
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006774  08006774  00007774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067bc  080067bc  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067bc  080067bc  000077bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067c4  080067c4  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c4  080067c4  000077c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067c8  080067c8  000077c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080067cc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  2000000c  080067d8  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  080067d8  00008308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014394  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003005  00000000  00000000  0001c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf2  00000000  00000000  00020490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f38  00000000  00000000  00021182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160ef  00000000  00000000  000490ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef5c2  00000000  00000000  0005f1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e76b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043cc  00000000  00000000  0014e7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00152b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800675c 	.word	0x0800675c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800675c 	.word	0x0800675c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004fa:	4b10      	ldr	r3, [pc, #64]	@ (800053c <MX_DMA_Init+0x48>)
 80004fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004fe:	4a0f      	ldr	r2, [pc, #60]	@ (800053c <MX_DMA_Init+0x48>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6493      	str	r3, [r2, #72]	@ 0x48
 8000506:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <MX_DMA_Init+0x48>)
 8000508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	2010      	movs	r0, #16
 8000518:	f000 ff1d 	bl	8001356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800051c:	2010      	movs	r0, #16
 800051e:	f000 ff36 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	2011      	movs	r0, #17
 8000528:	f000 ff15 	bl	8001356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800052c:	2011      	movs	r0, #17
 800052e:	f000 ff2e 	bl	800138e <HAL_NVIC_EnableIRQ>

}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <MCP23S17_SPI_Transmit>:
 *  Created on: Mar 13, 2025
 *      Author: lcroce
 */
#include "driver_led.h"

uint8_t MCP23S17_SPI_Transmit(uint8_t data) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af02      	add	r7, sp, #8
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedData;
    HAL_SPI_TransmitReceive(&hspi3, &data, &receivedData, 1, HAL_MAX_DELAY);
 800054a:	f107 020f 	add.w	r2, r7, #15
 800054e:	1df9      	adds	r1, r7, #7
 8000550:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2301      	movs	r3, #1
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <MCP23S17_SPI_Transmit+0x28>)
 800055a:	f005 f82d 	bl	80055b8 <HAL_SPI_TransmitReceive>
    return receivedData;
 800055e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000218 	.word	0x20000218

0800056c <MCP23S17_WriteRegister>:

void MCP23S17_WriteRegister(uint8_t reg, uint8_t value) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	460a      	mov	r2, r1
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	71bb      	strb	r3, [r7, #6]
    MCP23S17_CS_LOW();
 800057c:	2200      	movs	r2, #0
 800057e:	2180      	movs	r1, #128	@ 0x80
 8000580:	480b      	ldr	r0, [pc, #44]	@ (80005b0 <MCP23S17_WriteRegister+0x44>)
 8000582:	f001 faaf 	bl	8001ae4 <HAL_GPIO_WritePin>
    MCP23S17_SPI_Transmit(0x40);  // Adresse + écriture (0x40 = 0b01000000)
 8000586:	2040      	movs	r0, #64	@ 0x40
 8000588:	f7ff ffda 	bl	8000540 <MCP23S17_SPI_Transmit>
    MCP23S17_SPI_Transmit(reg);
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ffd6 	bl	8000540 <MCP23S17_SPI_Transmit>
    MCP23S17_SPI_Transmit(value);
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ffd2 	bl	8000540 <MCP23S17_SPI_Transmit>
    MCP23S17_CS_HIGH();
 800059c:	2201      	movs	r2, #1
 800059e:	2180      	movs	r1, #128	@ 0x80
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <MCP23S17_WriteRegister+0x44>)
 80005a2:	f001 fa9f 	bl	8001ae4 <HAL_GPIO_WritePin>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	48000400 	.word	0x48000400

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	@ 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b35      	ldr	r3, [pc, #212]	@ (80006a0 <MX_GPIO_Init+0xec>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	4a34      	ldr	r2, [pc, #208]	@ (80006a0 <MX_GPIO_Init+0xec>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d6:	4b32      	ldr	r3, [pc, #200]	@ (80006a0 <MX_GPIO_Init+0xec>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	4b2f      	ldr	r3, [pc, #188]	@ (80006a0 <MX_GPIO_Init+0xec>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	4a2e      	ldr	r2, [pc, #184]	@ (80006a0 <MX_GPIO_Init+0xec>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ee:	4b2c      	ldr	r3, [pc, #176]	@ (80006a0 <MX_GPIO_Init+0xec>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b29      	ldr	r3, [pc, #164]	@ (80006a0 <MX_GPIO_Init+0xec>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	4a28      	ldr	r2, [pc, #160]	@ (80006a0 <MX_GPIO_Init+0xec>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000606:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <MX_GPIO_Init+0xec>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <MX_GPIO_Init+0xec>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	4a22      	ldr	r2, [pc, #136]	@ (80006a0 <MX_GPIO_Init+0xec>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061e:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <MX_GPIO_Init+0xec>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRST_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2121      	movs	r1, #33	@ 0x21
 800062e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000632:	f001 fa57 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_ncs_GPIO_Port, VU_ncs_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2180      	movs	r1, #128	@ 0x80
 800063a:	481a      	ldr	r0, [pc, #104]	@ (80006a4 <MX_GPIO_Init+0xf0>)
 800063c:	f001 fa52 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000640:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000646:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4814      	ldr	r0, [pc, #80]	@ (80006a8 <MX_GPIO_Init+0xf4>)
 8000658:	f001 f89a 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRST_Pin PA5 */
  GPIO_InitStruct.Pin = VU_nRST_Pin|GPIO_PIN_5;
 800065c:	2321      	movs	r3, #33	@ 0x21
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000676:	f001 f88b 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_ncs_Pin */
  GPIO_InitStruct.Pin = VU_ncs_Pin;
 800067a:	2380      	movs	r3, #128	@ 0x80
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_ncs_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <MX_GPIO_Init+0xf0>)
 8000692:	f001 f87d 	bl	8001790 <HAL_GPIO_Init>

}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	@ 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000400 	.word	0x48000400
 80006a8:	48000800 	.word	0x48000800

080006ac <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <MX_I2C2_Init+0x74>)
 80006b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000724 <MX_I2C2_Init+0x78>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_I2C2_Init+0x74>)
 80006b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000728 <MX_I2C2_Init+0x7c>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <MX_I2C2_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_I2C2_Init+0x74>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <MX_I2C2_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_I2C2_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2C2_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_I2C2_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_I2C2_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006e6:	480e      	ldr	r0, [pc, #56]	@ (8000720 <MX_I2C2_Init+0x74>)
 80006e8:	f001 fa14 	bl	8001b14 <HAL_I2C_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006f2:	f000 f93e 	bl	8000972 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4809      	ldr	r0, [pc, #36]	@ (8000720 <MX_I2C2_Init+0x74>)
 80006fa:	f001 ff47 	bl	800258c <HAL_I2CEx_ConfigAnalogFilter>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000704:	f000 f935 	bl	8000972 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_I2C2_Init+0x74>)
 800070c:	f001 ff89 	bl	8002622 <HAL_I2CEx_ConfigDigitalFilter>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000716:	f000 f92c 	bl	8000972 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000028 	.word	0x20000028
 8000724:	40005800 	.word	0x40005800
 8000728:	10d19ce4 	.word	0x10d19ce4

0800072c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b0ac      	sub	sp, #176	@ 0xb0
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2288      	movs	r2, #136	@ 0x88
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f005 ffd8 	bl	8006702 <memset>
  if(i2cHandle->Instance==I2C2)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a21      	ldr	r2, [pc, #132]	@ (80007dc <HAL_I2C_MspInit+0xb0>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d13b      	bne.n	80007d4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800075c:	2380      	movs	r3, #128	@ 0x80
 800075e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000760:	2300      	movs	r3, #0
 8000762:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fe0b 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000774:	f000 f8fd 	bl	8000972 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000778:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <HAL_I2C_MspInit+0xb4>)
 800077a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077c:	4a18      	ldr	r2, [pc, #96]	@ (80007e0 <HAL_I2C_MspInit+0xb4>)
 800077e:	f043 0302 	orr.w	r3, r3, #2
 8000782:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <HAL_I2C_MspInit+0xb4>)
 8000786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000788:	f003 0302 	and.w	r3, r3, #2
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000790:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000794:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000798:	2312      	movs	r3, #18
 800079a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007aa:	2304      	movs	r3, #4
 80007ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007b4:	4619      	mov	r1, r3
 80007b6:	480b      	ldr	r0, [pc, #44]	@ (80007e4 <HAL_I2C_MspInit+0xb8>)
 80007b8:	f000 ffea 	bl	8001790 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_I2C_MspInit+0xb4>)
 80007be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_I2C_MspInit+0xb4>)
 80007c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_I2C_MspInit+0xb4>)
 80007ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80007d4:	bf00      	nop
 80007d6:	37b0      	adds	r7, #176	@ 0xb0
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40005800 	.word	0x40005800
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000400 	.word	0x48000400

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fc5b 	bl	80010a8 <HAL_Init>
 // __HAL_SAI_ENABLE(&hsai_BlockB2);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f843 	bl	800087c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007f6:	f000 f892 	bl	800091e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f7ff fedb 	bl	80005b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80007fe:	f7ff fe79 	bl	80004f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000802:	f000 fb9b 	bl	8000f3c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000806:	f000 fa71 	bl	8000cec <MX_SPI3_Init>
  MX_I2C2_Init();
 800080a:	f7ff ff4f 	bl	80006ac <MX_I2C2_Init>
  MX_SAI2_Init();
 800080e:	f000 f8b7 	bl	8000980 <MX_SAI2_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(VU_nRST_GPIO_Port, VU_nRST_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2101      	movs	r1, #1
 8000816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081a:	f001 f963 	bl	8001ae4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VU_ncs_GPIO_Port, VU_ncs_Pin, SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2180      	movs	r1, #128	@ 0x80
 8000822:	4813      	ldr	r0, [pc, #76]	@ (8000870 <main+0x88>)
 8000824:	f001 f95e 	bl	8001ae4 <HAL_GPIO_WritePin>
  MCP23S17_WriteRegister(0x00,  0x00);
 8000828:	2100      	movs	r1, #0
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff fe9e 	bl	800056c <MCP23S17_WriteRegister>
  MCP23S17_WriteRegister(0x01,  0x00);
 8000830:	2100      	movs	r1, #0
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff fe9a 	bl	800056c <MCP23S17_WriteRegister>
  int val = 255;
 8000838:	23ff      	movs	r3, #255	@ 0xff
 800083a:	607b      	str	r3, [r7, #4]

  __HAL_SAI_ENABLE(&hsai_BlockA2);
 800083c:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <main+0x8c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <main+0x8c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800084a:	601a      	str	r2, [r3, #0]
  init_sgtl(&hi2c2);
 800084c:	480a      	ldr	r0, [pc, #40]	@ (8000878 <main+0x90>)
 800084e:	f000 fa01 	bl	8000c54 <init_sgtl>

  while (1)
  {
	     /* Faire clignoter la LED de la NUCLEO */

	  	  HAL_I2C_Mem_Read(&hi2c2, 0x14, 0x0000, I2C_MEMADD_SIZE_8BIT, data, sizeof(data), HAL_MAX_DELAY);
 8000852:	78fb      	ldrb	r3, [r7, #3]
 8000854:	461a      	mov	r2, r3
 8000856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800085a:	9302      	str	r3, [sp, #8]
 800085c:	2301      	movs	r3, #1
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	9200      	str	r2, [sp, #0]
 8000862:	2301      	movs	r3, #1
 8000864:	2200      	movs	r2, #0
 8000866:	2114      	movs	r1, #20
 8000868:	4803      	ldr	r0, [pc, #12]	@ (8000878 <main+0x90>)
 800086a:	f001 fb07 	bl	8001e7c <HAL_I2C_Mem_Read>
 800086e:	e7f0      	b.n	8000852 <main+0x6a>
 8000870:	48000400 	.word	0x48000400
 8000874:	2000007c 	.word	0x2000007c
 8000878:	20000028 	.word	0x20000028

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b096      	sub	sp, #88	@ 0x58
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2244      	movs	r2, #68	@ 0x44
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f005 ff39 	bl	8006702 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800089e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008a2:	f001 ff19 	bl	80026d8 <HAL_PWREx_ControlVoltageScaling>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008ac:	f000 f861 	bl	8000972 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b0:	2302      	movs	r3, #2
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ba:	2310      	movs	r3, #16
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c2:	2302      	movs	r3, #2
 80008c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008ca:	230a      	movs	r3, #10
 80008cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008ce:	2307      	movs	r3, #7
 80008d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 ff50 	bl	8002784 <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008ea:	f000 f842 	bl	8000972 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2303      	movs	r3, #3
 80008f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	2104      	movs	r1, #4
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fb18 	bl	8002f3c <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000912:	f000 f82e 	bl	8000972 <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3758      	adds	r7, #88	@ 0x58
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b0a2      	sub	sp, #136	@ 0x88
 8000922:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	463b      	mov	r3, r7
 8000926:	2288      	movs	r2, #136	@ 0x88
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f005 fee9 	bl	8006702 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000934:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000936:	2300      	movs	r3, #0
 8000938:	66bb      	str	r3, [r7, #104]	@ 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800093a:	2302      	movs	r3, #2
 800093c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800093e:	2301      	movs	r3, #1
 8000940:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000942:	230d      	movs	r3, #13
 8000944:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000946:	2311      	movs	r3, #17
 8000948:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800094a:	2302      	movs	r3, #2
 800094c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000952:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000956:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fd12 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000966:	f000 f804 	bl	8000972 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3788      	adds	r7, #136	@ 0x88
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000976:	b672      	cpsid	i
}
 8000978:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097a:	bf00      	nop
 800097c:	e7fd      	b.n	800097a <Error_Handler+0x8>
	...

08000980 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_b;
DMA_HandleTypeDef hdma_sai2_a;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000984:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <MX_SAI2_Init+0xb0>)
 8000986:	4a2b      	ldr	r2, [pc, #172]	@ (8000a34 <MX_SAI2_Init+0xb4>)
 8000988:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800098a:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <MX_SAI2_Init+0xb0>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000990:	4b27      	ldr	r3, [pc, #156]	@ (8000a30 <MX_SAI2_Init+0xb0>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <MX_SAI2_Init+0xb0>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800099c:	4b24      	ldr	r3, [pc, #144]	@ (8000a30 <MX_SAI2_Init+0xb0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80009a2:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <MX_SAI2_Init+0xb0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <MX_SAI2_Init+0xb0>)
 80009aa:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80009ae:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <MX_SAI2_Init+0xb0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <MX_SAI2_Init+0xb0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80009bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <MX_SAI2_Init+0xb0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80009c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <MX_SAI2_Init+0xb0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80009c8:	2302      	movs	r3, #2
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	4818      	ldr	r0, [pc, #96]	@ (8000a30 <MX_SAI2_Init+0xb0>)
 80009d0:	f003 fff2 	bl	80049b8 <HAL_SAI_InitProtocol>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 80009da:	f7ff ffca 	bl	8000972 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_SAI2_Init+0xb8>)
 80009e0:	4a16      	ldr	r2, [pc, #88]	@ (8000a3c <MX_SAI2_Init+0xbc>)
 80009e2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_SAI2_Init+0xb8>)
 80009e6:	2203      	movs	r2, #3
 80009e8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80009ea:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <MX_SAI2_Init+0xb8>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_SAI2_Init+0xb8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_SAI2_Init+0xb8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80009fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_SAI2_Init+0xb8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <MX_SAI2_Init+0xb8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_SAI2_Init+0xb8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <MX_SAI2_Init+0xb8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000a14:	2302      	movs	r3, #2
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4807      	ldr	r0, [pc, #28]	@ (8000a38 <MX_SAI2_Init+0xb8>)
 8000a1c:	f003 ffcc 	bl	80049b8 <HAL_SAI_InitProtocol>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000a26:	f7ff ffa4 	bl	8000972 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000007c 	.word	0x2000007c
 8000a34:	40015804 	.word	0x40015804
 8000a38:	20000100 	.word	0x20000100
 8000a3c:	40015824 	.word	0x40015824

08000a40 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a64      	ldr	r2, [pc, #400]	@ (8000be0 <HAL_SAI_MspInit+0x1a0>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d15e      	bne.n	8000b10 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000a52:	4b64      	ldr	r3, [pc, #400]	@ (8000be4 <HAL_SAI_MspInit+0x1a4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d113      	bne.n	8000a82 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000a5a:	4b63      	ldr	r3, [pc, #396]	@ (8000be8 <HAL_SAI_MspInit+0x1a8>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5e:	4a62      	ldr	r2, [pc, #392]	@ (8000be8 <HAL_SAI_MspInit+0x1a8>)
 8000a60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a66:	4b60      	ldr	r3, [pc, #384]	@ (8000be8 <HAL_SAI_MspInit+0x1a8>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	204b      	movs	r0, #75	@ 0x4b
 8000a78:	f000 fc6d 	bl	8001356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000a7c:	204b      	movs	r0, #75	@ 0x4b
 8000a7e:	f000 fc86 	bl	800138e <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000a82:	4b58      	ldr	r3, [pc, #352]	@ (8000be4 <HAL_SAI_MspInit+0x1a4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	4a56      	ldr	r2, [pc, #344]	@ (8000be4 <HAL_SAI_MspInit+0x1a4>)
 8000a8a:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = I2S_LRCLK_Pin|I2S_SCLK_Pin|SYS_MCLK_Pin|I2S_DIN_Pin;
 8000a8c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000a9e:	230d      	movs	r3, #13
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4850      	ldr	r0, [pc, #320]	@ (8000bec <HAL_SAI_MspInit+0x1ac>)
 8000aaa:	f000 fe71 	bl	8001790 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000aae:	4b50      	ldr	r3, [pc, #320]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000ab0:	4a50      	ldr	r2, [pc, #320]	@ (8000bf4 <HAL_SAI_MspInit+0x1b4>)
 8000ab2:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000ab4:	4b4e      	ldr	r3, [pc, #312]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aba:	4b4d      	ldr	r3, [pc, #308]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000abc:	2210      	movs	r2, #16
 8000abe:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000ac8:	2280      	movs	r2, #128	@ 0x80
 8000aca:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000acc:	4b48      	ldr	r3, [pc, #288]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000ace:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ad2:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ad4:	4b46      	ldr	r3, [pc, #280]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000ad6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ada:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000adc:	4b44      	ldr	r3, [pc, #272]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000ade:	2220      	movs	r2, #32
 8000ae0:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000ae2:	4b43      	ldr	r3, [pc, #268]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000ae8:	4841      	ldr	r0, [pc, #260]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000aea:	f000 fc6b 	bl	80013c4 <HAL_DMA_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000af4:	f7ff ff3d 	bl	8000972 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a3d      	ldr	r2, [pc, #244]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000afc:	671a      	str	r2, [r3, #112]	@ 0x70
 8000afe:	4a3c      	ldr	r2, [pc, #240]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a3a      	ldr	r2, [pc, #232]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000b08:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000b0a:	4a39      	ldr	r2, [pc, #228]	@ (8000bf0 <HAL_SAI_MspInit+0x1b0>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a38      	ldr	r2, [pc, #224]	@ (8000bf8 <HAL_SAI_MspInit+0x1b8>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d15e      	bne.n	8000bd8 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000b1a:	4b32      	ldr	r3, [pc, #200]	@ (8000be4 <HAL_SAI_MspInit+0x1a4>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d113      	bne.n	8000b4a <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000b22:	4b31      	ldr	r3, [pc, #196]	@ (8000be8 <HAL_SAI_MspInit+0x1a8>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b26:	4a30      	ldr	r2, [pc, #192]	@ (8000be8 <HAL_SAI_MspInit+0x1a8>)
 8000b28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000be8 <HAL_SAI_MspInit+0x1a8>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	204b      	movs	r0, #75	@ 0x4b
 8000b40:	f000 fc09 	bl	8001356 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000b44:	204b      	movs	r0, #75	@ 0x4b
 8000b46:	f000 fc22 	bl	800138e <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000b4a:	4b26      	ldr	r3, [pc, #152]	@ (8000be4 <HAL_SAI_MspInit+0x1a4>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a24      	ldr	r2, [pc, #144]	@ (8000be4 <HAL_SAI_MspInit+0x1a4>)
 8000b52:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = I2S_DOUT_Pin;
 8000b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000b66:	230d      	movs	r3, #13
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2S_DOUT_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4822      	ldr	r0, [pc, #136]	@ (8000bfc <HAL_SAI_MspInit+0x1bc>)
 8000b72:	f000 fe0d 	bl	8001790 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000b76:	4b22      	ldr	r3, [pc, #136]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000b78:	4a22      	ldr	r2, [pc, #136]	@ (8000c04 <HAL_SAI_MspInit+0x1c4>)
 8000b7a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000b7c:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000b90:	2280      	movs	r2, #128	@ 0x80
 8000b92:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b9a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000b9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ba2:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000ba4:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000bb0:	4813      	ldr	r0, [pc, #76]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000bb2:	f000 fc07 	bl	80013c4 <HAL_DMA_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000bbc:	f7ff fed9 	bl	8000972 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000bc4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a0c      	ldr	r2, [pc, #48]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000bd0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c00 <HAL_SAI_MspInit+0x1c0>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	@ 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40015804 	.word	0x40015804
 8000be4:	20000214 	.word	0x20000214
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48000400 	.word	0x48000400
 8000bf0:	200001cc 	.word	0x200001cc
 8000bf4:	4002006c 	.word	0x4002006c
 8000bf8:	40015824 	.word	0x40015824
 8000bfc:	48000800 	.word	0x48000800
 8000c00:	20000184 	.word	0x20000184
 8000c04:	40020080 	.word	0x40020080

08000c08 <write_register>:
 *      Author: lcroce
 */

#include "sgtl5000.h"

static void write_register(I2C_HandleTypeDef *hi2c, uint16_t reg, uint16_t value) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	807b      	strh	r3, [r7, #2]
 8000c14:	4613      	mov	r3, r2
 8000c16:	803b      	strh	r3, [r7, #0]
    uint8_t data[4];
    data[0] = (reg >> 8) & 0xFF;  // MSB reg
 8000c18:	887b      	ldrh	r3, [r7, #2]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	733b      	strb	r3, [r7, #12]
    data[1] = reg & 0xFF;         // LSB reg
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	737b      	strb	r3, [r7, #13]
    data[2] = (value >> 8) & 0xFF;  // MSB value
 8000c28:	883b      	ldrh	r3, [r7, #0]
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	73bb      	strb	r3, [r7, #14]
    data[3] = value & 0xFF;         // LSB value
 8000c32:	883b      	ldrh	r3, [r7, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(hi2c, SGTL5000_I2C_ADDR, data, 4, HAL_MAX_DELAY);
 8000c38:	f107 020c 	add.w	r2, r7, #12
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2304      	movs	r3, #4
 8000c44:	2128      	movs	r1, #40	@ 0x28
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f001 f800 	bl	8001c4c <HAL_I2C_Master_Transmit>
}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <init_sgtl>:

void init_sgtl(I2C_HandleTypeDef *hi2c) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
    write_register(hi2c, CHIP_ANA_POWER,      0x4060);
 8000c5c:	f244 0260 	movw	r2, #16480	@ 0x4060
 8000c60:	2120      	movs	r1, #32
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ffd0 	bl	8000c08 <write_register>
    write_register(hi2c, CHIP_LINREG_CTRL,    0x006C);
 8000c68:	226c      	movs	r2, #108	@ 0x6c
 8000c6a:	2126      	movs	r1, #38	@ 0x26
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ffcb 	bl	8000c08 <write_register>
    write_register(hi2c, CHIP_REF_CTRL,       0x01F2);
 8000c72:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 8000c76:	2128      	movs	r1, #40	@ 0x28
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ffc5 	bl	8000c08 <write_register>
    write_register(hi2c, CHIP_LINE_OUT_CTRL,  0x0322);
 8000c7e:	f240 3222 	movw	r2, #802	@ 0x322
 8000c82:	212c      	movs	r1, #44	@ 0x2c
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ffbf 	bl	8000c08 <write_register>
    write_register(hi2c, CHIP_SHORT_CTRL,     0x4446);
 8000c8a:	f244 4246 	movw	r2, #17478	@ 0x4446
 8000c8e:	212e      	movs	r1, #46	@ 0x2e
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ffb9 	bl	8000c08 <write_register>
    write_register(hi2c, CHIP_ANA_CTRL,       0x0137);
 8000c96:	f240 1237 	movw	r2, #311	@ 0x137
 8000c9a:	212a      	movs	r1, #42	@ 0x2a
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ffb3 	bl	8000c08 <write_register>
    write_register(hi2c, CHIP_DIG_POWER,      0x0073);
 8000ca2:	2273      	movs	r2, #115	@ 0x73
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffae 	bl	8000c08 <write_register>
    write_register(hi2c, CHIP_LINE_OUT_VOL,   0x1D1D);
 8000cac:	f641 521d 	movw	r2, #7453	@ 0x1d1d
 8000cb0:	2122      	movs	r1, #34	@ 0x22
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ffa8 	bl	8000c08 <write_register>
    write_register(hi2c, CHIP_CLK_CTRL,       0x0004);
 8000cb8:	2204      	movs	r2, #4
 8000cba:	2104      	movs	r1, #4
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ffa3 	bl	8000c08 <write_register>
    write_register(hi2c, CHIP_I2S_CTRL,       0x0130);
 8000cc2:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8000cc6:	2106      	movs	r1, #6
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff9d 	bl	8000c08 <write_register>
    write_register(hi2c, CHIP_ADCDAC_CTRL,    0x0000);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	210e      	movs	r1, #14
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ff98 	bl	8000c08 <write_register>
    write_register(hi2c, CHIP_DAC_VOL,        0x3C3C);
 8000cd8:	f643 423c 	movw	r2, #15420	@ 0x3c3c
 8000cdc:	2110      	movs	r1, #16
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff92 	bl	8000c08 <write_register>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d64 <MX_SPI3_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000cf8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cfc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d04:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000d06:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d0a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d12:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000d1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d1e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000d46:	2208      	movs	r2, #8
 8000d48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_SPI3_Init+0x74>)
 8000d4c:	f004 fb91 	bl	8005472 <HAL_SPI_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f7ff fe0c 	bl	8000972 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000218 	.word	0x20000218
 8000d64:	40003c00 	.word	0x40003c00

08000d68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a25      	ldr	r2, [pc, #148]	@ (8000e1c <HAL_SPI_MspInit+0xb4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d144      	bne.n	8000e14 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d8a:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <HAL_SPI_MspInit+0xb8>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8e:	4a24      	ldr	r2, [pc, #144]	@ (8000e20 <HAL_SPI_MspInit+0xb8>)
 8000d90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d96:	4b22      	ldr	r3, [pc, #136]	@ (8000e20 <HAL_SPI_MspInit+0xb8>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <HAL_SPI_MspInit+0xb8>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e20 <HAL_SPI_MspInit+0xb8>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dae:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <HAL_SPI_MspInit+0xb8>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <HAL_SPI_MspInit+0xb8>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	4a18      	ldr	r2, [pc, #96]	@ (8000e20 <HAL_SPI_MspInit+0xb8>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <HAL_SPI_MspInit+0xb8>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dd2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de4:	2306      	movs	r3, #6
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <HAL_SPI_MspInit+0xbc>)
 8000df0:	f000 fcce 	bl	8001790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000df4:	2320      	movs	r3, #32
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e04:	2306      	movs	r3, #6
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	@ (8000e28 <HAL_SPI_MspInit+0xc0>)
 8000e10:	f000 fcbe 	bl	8001790 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	@ 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40003c00 	.word	0x40003c00
 8000e20:	40021000 	.word	0x40021000
 8000e24:	48000800 	.word	0x48000800
 8000e28:	48000400 	.word	0x48000400

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e36:	4a0e      	ldr	r2, [pc, #56]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4e:	4a08      	ldr	r2, [pc, #32]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <NMI_Handler+0x4>

08000e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eca:	f000 f949 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <DMA1_Channel6_IRQHandler+0x10>)
 8000eda:	f000 fbaa 	bl	8001632 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200001cc 	.word	0x200001cc

08000ee8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <DMA1_Channel7_IRQHandler+0x10>)
 8000eee:	f000 fba0 	bl	8001632 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000184 	.word	0x20000184

08000efc <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8000f00:	4803      	ldr	r0, [pc, #12]	@ (8000f10 <SAI2_IRQHandler+0x14>)
 8000f02:	f003 ff63 	bl	8004dcc <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8000f06:	4803      	ldr	r0, [pc, #12]	@ (8000f14 <SAI2_IRQHandler+0x18>)
 8000f08:	f003 ff60 	bl	8004dcc <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000007c 	.word	0x2000007c
 8000f14:	20000100 	.word	0x20000100

08000f18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f40:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f42:	4a15      	ldr	r2, [pc, #84]	@ (8000f98 <MX_USART2_UART_Init+0x5c>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f80:	f004 fe9e 	bl	8005cc0 <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f8a:	f7ff fcf2 	bl	8000972 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000027c 	.word	0x2000027c
 8000f98:	40004400 	.word	0x40004400

08000f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0ac      	sub	sp, #176	@ 0xb0
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2288      	movs	r2, #136	@ 0x88
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f005 fba0 	bl	8006702 <memset>
  if(uartHandle->Instance==USART2)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a21      	ldr	r2, [pc, #132]	@ (800104c <HAL_UART_MspInit+0xb0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d13b      	bne.n	8001044 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 f9d3 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fe4:	f7ff fcc5 	bl	8000972 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe8:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <HAL_UART_MspInit+0xb4>)
 8000fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fec:	4a18      	ldr	r2, [pc, #96]	@ (8001050 <HAL_UART_MspInit+0xb4>)
 8000fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ff4:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <HAL_UART_MspInit+0xb4>)
 8000ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <HAL_UART_MspInit+0xb4>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001004:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <HAL_UART_MspInit+0xb4>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100c:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <HAL_UART_MspInit+0xb4>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001018:	230c      	movs	r3, #12
 800101a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001030:	2307      	movs	r3, #7
 8001032:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001040:	f000 fba6 	bl	8001790 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	37b0      	adds	r7, #176	@ 0xb0
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40004400 	.word	0x40004400
 8001050:	40021000 	.word	0x40021000

08001054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800108c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001058:	f7ff ff5e 	bl	8000f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <LoopForever+0x6>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	@ (8001094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <LoopForever+0xe>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	@ (80010a0 <LoopForever+0x16>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001082:	f005 fb47 	bl	8006714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001086:	f7ff fbaf 	bl	80007e8 <main>

0800108a <LoopForever>:

LoopForever:
    b LoopForever
 800108a:	e7fe      	b.n	800108a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800108c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001098:	080067cc 	.word	0x080067cc
  ldr r2, =_sbss
 800109c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010a0:	20000308 	.word	0x20000308

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <HAL_Init+0x3c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a0b      	ldr	r2, [pc, #44]	@ (80010e4 <HAL_Init+0x3c>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010be:	2003      	movs	r0, #3
 80010c0:	f000 f93e 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f80f 	bl	80010e8 <HAL_InitTick>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	e001      	b.n	80010da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d6:	f7ff fea9 	bl	8000e2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010da:	79fb      	ldrb	r3, [r7, #7]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40022000 	.word	0x40022000

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <HAL_InitTick+0x6c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d023      	beq.n	8001144 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <HAL_InitTick+0x70>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <HAL_InitTick+0x6c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f949 	bl	80013aa <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10f      	bne.n	800113e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d809      	bhi.n	8001138 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800112c:	f000 f913 	bl	8001356 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <HAL_InitTick+0x74>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e007      	b.n	8001148 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e004      	b.n	8001148 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e001      	b.n	8001148 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008
 8001158:	20000000 	.word	0x20000000
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	20000304 	.word	0x20000304

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000304 	.word	0x20000304

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4907      	ldr	r1, [pc, #28]	@ (800123c <__NVIC_EnableIRQ+0x38>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	@ (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	@ (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	@ 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	@ 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001320:	f7ff ff8e 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	@ (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	@ (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff29 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff3e 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff8e 	bl	8001294 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5d 	bl	8001240 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff31 	bl	8001204 <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa2 	bl	80012fc <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e098      	b.n	8001508 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001514 <HAL_DMA_Init+0x150>)
 80013de:	429a      	cmp	r2, r3
 80013e0:	d80f      	bhi.n	8001402 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001518 <HAL_DMA_Init+0x154>)
 80013ea:	4413      	add	r3, r2
 80013ec:	4a4b      	ldr	r2, [pc, #300]	@ (800151c <HAL_DMA_Init+0x158>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	009a      	lsls	r2, r3, #2
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a48      	ldr	r2, [pc, #288]	@ (8001520 <HAL_DMA_Init+0x15c>)
 80013fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001400:	e00e      	b.n	8001420 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b46      	ldr	r3, [pc, #280]	@ (8001524 <HAL_DMA_Init+0x160>)
 800140a:	4413      	add	r3, r2
 800140c:	4a43      	ldr	r2, [pc, #268]	@ (800151c <HAL_DMA_Init+0x158>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	009a      	lsls	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a42      	ldr	r2, [pc, #264]	@ (8001528 <HAL_DMA_Init+0x164>)
 800141e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800143a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800147a:	d039      	beq.n	80014f0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	4a27      	ldr	r2, [pc, #156]	@ (8001520 <HAL_DMA_Init+0x15c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d11a      	bne.n	80014bc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001486:	4b29      	ldr	r3, [pc, #164]	@ (800152c <HAL_DMA_Init+0x168>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f003 031c 	and.w	r3, r3, #28
 8001492:	210f      	movs	r1, #15
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	4924      	ldr	r1, [pc, #144]	@ (800152c <HAL_DMA_Init+0x168>)
 800149c:	4013      	ands	r3, r2
 800149e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014a0:	4b22      	ldr	r3, [pc, #136]	@ (800152c <HAL_DMA_Init+0x168>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6859      	ldr	r1, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ac:	f003 031c 	and.w	r3, r3, #28
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	491d      	ldr	r1, [pc, #116]	@ (800152c <HAL_DMA_Init+0x168>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
 80014ba:	e019      	b.n	80014f0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <HAL_DMA_Init+0x16c>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c4:	f003 031c 	and.w	r3, r3, #28
 80014c8:	210f      	movs	r1, #15
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	4917      	ldr	r1, [pc, #92]	@ (8001530 <HAL_DMA_Init+0x16c>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <HAL_DMA_Init+0x16c>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6859      	ldr	r1, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	f003 031c 	and.w	r3, r3, #28
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	4911      	ldr	r1, [pc, #68]	@ (8001530 <HAL_DMA_Init+0x16c>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40020407 	.word	0x40020407
 8001518:	bffdfff8 	.word	0xbffdfff8
 800151c:	cccccccd 	.word	0xcccccccd
 8001520:	40020000 	.word	0x40020000
 8001524:	bffdfbf8 	.word	0xbffdfbf8
 8001528:	40020400 	.word	0x40020400
 800152c:	400200a8 	.word	0x400200a8
 8001530:	400204a8 	.word	0x400204a8

08001534 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d008      	beq.n	800155e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2204      	movs	r2, #4
 8001550:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e022      	b.n	80015a4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 020e 	bic.w	r2, r2, #14
 800156c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f003 021c 	and.w	r2, r3, #28
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	2101      	movs	r1, #1
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d005      	beq.n	80015d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2204      	movs	r2, #4
 80015cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	e029      	b.n	8001628 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 020e 	bic.w	r2, r2, #14
 80015e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f8:	f003 021c 	and.w	r2, r3, #28
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001600:	2101      	movs	r1, #1
 8001602:	fa01 f202 	lsl.w	r2, r1, r2
 8001606:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
    }
  }
  return status;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f003 031c 	and.w	r3, r3, #28
 8001652:	2204      	movs	r2, #4
 8001654:	409a      	lsls	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d026      	beq.n	80016ac <HAL_DMA_IRQHandler+0x7a>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d021      	beq.n	80016ac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b00      	cmp	r3, #0
 8001674:	d107      	bne.n	8001686 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0204 	bic.w	r2, r2, #4
 8001684:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	f003 021c 	and.w	r2, r3, #28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	2104      	movs	r1, #4
 8001694:	fa01 f202 	lsl.w	r2, r1, r2
 8001698:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d071      	beq.n	8001786 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80016aa:	e06c      	b.n	8001786 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b0:	f003 031c 	and.w	r3, r3, #28
 80016b4:	2202      	movs	r2, #2
 80016b6:	409a      	lsls	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d02e      	beq.n	800171e <HAL_DMA_IRQHandler+0xec>
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d029      	beq.n	800171e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0320 	and.w	r3, r3, #32
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10b      	bne.n	80016f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 020a 	bic.w	r2, r2, #10
 80016e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f4:	f003 021c 	and.w	r2, r3, #28
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	2102      	movs	r1, #2
 80016fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001702:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001710:	2b00      	cmp	r3, #0
 8001712:	d038      	beq.n	8001786 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800171c:	e033      	b.n	8001786 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	f003 031c 	and.w	r3, r3, #28
 8001726:	2208      	movs	r2, #8
 8001728:	409a      	lsls	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d02a      	beq.n	8001788 <HAL_DMA_IRQHandler+0x156>
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d025      	beq.n	8001788 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 020e 	bic.w	r2, r2, #14
 800174a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001750:	f003 021c 	and.w	r2, r3, #28
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	2101      	movs	r1, #1
 800175a:	fa01 f202 	lsl.w	r2, r1, r2
 800175e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177a:	2b00      	cmp	r3, #0
 800177c:	d004      	beq.n	8001788 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001786:	bf00      	nop
 8001788:	bf00      	nop
}
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179e:	e17f      	b.n	8001aa0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2101      	movs	r1, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 8171 	beq.w	8001a9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d005      	beq.n	80017d0 <HAL_GPIO_Init+0x40>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d130      	bne.n	8001832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001806:	2201      	movs	r2, #1
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 0201 	and.w	r2, r3, #1
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b03      	cmp	r3, #3
 800183c:	d118      	bne.n	8001870 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001844:	2201      	movs	r2, #1
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	f003 0201 	and.w	r2, r3, #1
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b03      	cmp	r3, #3
 800187a:	d017      	beq.n	80018ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d123      	bne.n	8001900 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	08da      	lsrs	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3208      	adds	r2, #8
 80018c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	220f      	movs	r2, #15
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	08da      	lsrs	r2, r3, #3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3208      	adds	r2, #8
 80018fa:	6939      	ldr	r1, [r7, #16]
 80018fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0203 	and.w	r2, r3, #3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80ac 	beq.w	8001a9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac0 <HAL_GPIO_Init+0x330>)
 8001944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001946:	4a5e      	ldr	r2, [pc, #376]	@ (8001ac0 <HAL_GPIO_Init+0x330>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6613      	str	r3, [r2, #96]	@ 0x60
 800194e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ac0 <HAL_GPIO_Init+0x330>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800195a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ac4 <HAL_GPIO_Init+0x334>)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	220f      	movs	r2, #15
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001984:	d025      	beq.n	80019d2 <HAL_GPIO_Init+0x242>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4f      	ldr	r2, [pc, #316]	@ (8001ac8 <HAL_GPIO_Init+0x338>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01f      	beq.n	80019ce <HAL_GPIO_Init+0x23e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4e      	ldr	r2, [pc, #312]	@ (8001acc <HAL_GPIO_Init+0x33c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d019      	beq.n	80019ca <HAL_GPIO_Init+0x23a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4d      	ldr	r2, [pc, #308]	@ (8001ad0 <HAL_GPIO_Init+0x340>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0x236>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ad4 <HAL_GPIO_Init+0x344>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00d      	beq.n	80019c2 <HAL_GPIO_Init+0x232>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ad8 <HAL_GPIO_Init+0x348>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x22e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4a      	ldr	r2, [pc, #296]	@ (8001adc <HAL_GPIO_Init+0x34c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_GPIO_Init+0x22a>
 80019b6:	2306      	movs	r3, #6
 80019b8:	e00c      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019ba:	2307      	movs	r3, #7
 80019bc:	e00a      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019be:	2305      	movs	r3, #5
 80019c0:	e008      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019c6:	2303      	movs	r3, #3
 80019c8:	e004      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e002      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019d2:	2300      	movs	r3, #0
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	f002 0203 	and.w	r2, r2, #3
 80019da:	0092      	lsls	r2, r2, #2
 80019dc:	4093      	lsls	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019e4:	4937      	ldr	r1, [pc, #220]	@ (8001ac4 <HAL_GPIO_Init+0x334>)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019f2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae0 <HAL_GPIO_Init+0x350>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a16:	4a32      	ldr	r2, [pc, #200]	@ (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a1c:	4b30      	ldr	r3, [pc, #192]	@ (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a40:	4a27      	ldr	r2, [pc, #156]	@ (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a46:	4b26      	ldr	r3, [pc, #152]	@ (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a94:	4a12      	ldr	r2, [pc, #72]	@ (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f47f ae78 	bne.w	80017a0 <HAL_GPIO_Init+0x10>
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	48000400 	.word	0x48000400
 8001acc:	48000800 	.word	0x48000800
 8001ad0:	48000c00 	.word	0x48000c00
 8001ad4:	48001000 	.word	0x48001000
 8001ad8:	48001400 	.word	0x48001400
 8001adc:	48001800 	.word	0x48001800
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
 8001af0:	4613      	mov	r3, r2
 8001af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e08d      	b.n	8001c42 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7fe fdf6 	bl	800072c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2224      	movs	r2, #36	@ 0x24
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	e006      	b.n	8001b9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d108      	bne.n	8001bb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	e007      	b.n	8001bc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001be8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69d9      	ldr	r1, [r3, #28]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1a      	ldr	r2, [r3, #32]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	461a      	mov	r2, r3
 8001c58:	460b      	mov	r3, r1
 8001c5a:	817b      	strh	r3, [r7, #10]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	f040 80fd 	bne.w	8001e68 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_I2C_Master_Transmit+0x30>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e0f6      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x21e>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c84:	f7ff fa80 	bl	8001188 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2319      	movs	r3, #25
 8001c90:	2201      	movs	r2, #1
 8001c92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 fa82 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0e1      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2221      	movs	r2, #33	@ 0x21
 8001caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2210      	movs	r2, #16
 8001cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	893a      	ldrh	r2, [r7, #8]
 8001cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2bff      	cmp	r3, #255	@ 0xff
 8001cd6:	d906      	bls.n	8001ce6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	22ff      	movs	r2, #255	@ 0xff
 8001cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001cde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	e007      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001cf0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cf4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d024      	beq.n	8001d48 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	8979      	ldrh	r1, [r7, #10]
 8001d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e74 <HAL_I2C_Master_Transmit+0x228>)
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 fbf1 	bl	8002528 <I2C_TransferConfig>
 8001d46:	e066      	b.n	8001e16 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	8979      	ldrh	r1, [r7, #10]
 8001d50:	4b48      	ldr	r3, [pc, #288]	@ (8001e74 <HAL_I2C_Master_Transmit+0x228>)
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fbe6 	bl	8002528 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001d5c:	e05b      	b.n	8001e16 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	6a39      	ldr	r1, [r7, #32]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fa75 	bl	8002252 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e07b      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d034      	beq.n	8001e16 <HAL_I2C_Master_Transmit+0x1ca>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d130      	bne.n	8001e16 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2180      	movs	r1, #128	@ 0x80
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f9ee 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e04d      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2bff      	cmp	r3, #255	@ 0xff
 8001dd6:	d90e      	bls.n	8001df6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	22ff      	movs	r2, #255	@ 0xff
 8001ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	8979      	ldrh	r1, [r7, #10]
 8001de6:	2300      	movs	r3, #0
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fb9a 	bl	8002528 <I2C_TransferConfig>
 8001df4:	e00f      	b.n	8001e16 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	8979      	ldrh	r1, [r7, #10]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 fb89 	bl	8002528 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d19e      	bne.n	8001d5e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	6a39      	ldr	r1, [r7, #32]
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 fa5b 	bl	80022e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e01a      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6859      	ldr	r1, [r3, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <HAL_I2C_Master_Transmit+0x22c>)
 8001e48:	400b      	ands	r3, r1
 8001e4a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
  }
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	80002000 	.word	0x80002000
 8001e78:	fe00e800 	.word	0xfe00e800

08001e7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	4608      	mov	r0, r1
 8001e86:	4611      	mov	r1, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	817b      	strh	r3, [r7, #10]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	813b      	strh	r3, [r7, #8]
 8001e92:	4613      	mov	r3, r2
 8001e94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	f040 80fd 	bne.w	800209e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_I2C_Mem_Read+0x34>
 8001eaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eb6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0f1      	b.n	80020a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_I2C_Mem_Read+0x4e>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e0ea      	b.n	80020a0 <HAL_I2C_Mem_Read+0x224>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ed2:	f7ff f959 	bl	8001188 <HAL_GetTick>
 8001ed6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2319      	movs	r3, #25
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f95b 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0d5      	b.n	80020a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2222      	movs	r2, #34	@ 0x22
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2240      	movs	r2, #64	@ 0x40
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6a3a      	ldr	r2, [r7, #32]
 8001f0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f1c:	88f8      	ldrh	r0, [r7, #6]
 8001f1e:	893a      	ldrh	r2, [r7, #8]
 8001f20:	8979      	ldrh	r1, [r7, #10]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f8bf 	bl	80020b0 <I2C_RequestMemoryRead>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0ad      	b.n	80020a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2bff      	cmp	r3, #255	@ 0xff
 8001f4c:	d90e      	bls.n	8001f6c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	8979      	ldrh	r1, [r7, #10]
 8001f5c:	4b52      	ldr	r3, [pc, #328]	@ (80020a8 <HAL_I2C_Mem_Read+0x22c>)
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 fadf 	bl	8002528 <I2C_TransferConfig>
 8001f6a:	e00f      	b.n	8001f8c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	8979      	ldrh	r1, [r7, #10]
 8001f7e:	4b4a      	ldr	r3, [pc, #296]	@ (80020a8 <HAL_I2C_Mem_Read+0x22c>)
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 face 	bl	8002528 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f92:	2200      	movs	r2, #0
 8001f94:	2104      	movs	r1, #4
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f902 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e07c      	b.n	80020a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d034      	beq.n	800204c <HAL_I2C_Mem_Read+0x1d0>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d130      	bne.n	800204c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2180      	movs	r1, #128	@ 0x80
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f8d3 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e04d      	b.n	80020a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002008:	b29b      	uxth	r3, r3
 800200a:	2bff      	cmp	r3, #255	@ 0xff
 800200c:	d90e      	bls.n	800202c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002018:	b2da      	uxtb	r2, r3
 800201a:	8979      	ldrh	r1, [r7, #10]
 800201c:	2300      	movs	r3, #0
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 fa7f 	bl	8002528 <I2C_TransferConfig>
 800202a:	e00f      	b.n	800204c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800203a:	b2da      	uxtb	r2, r3
 800203c:	8979      	ldrh	r1, [r7, #10]
 800203e:	2300      	movs	r3, #0
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fa6e 	bl	8002528 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d19a      	bne.n	8001f8c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f940 	bl	80022e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e01a      	b.n	80020a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2220      	movs	r2, #32
 8002070:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b0b      	ldr	r3, [pc, #44]	@ (80020ac <HAL_I2C_Mem_Read+0x230>)
 800207e:	400b      	ands	r3, r1
 8002080:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800209a:	2300      	movs	r3, #0
 800209c:	e000      	b.n	80020a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800209e:	2302      	movs	r3, #2
  }
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	80002400 	.word	0x80002400
 80020ac:	fe00e800 	.word	0xfe00e800

080020b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	4608      	mov	r0, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	461a      	mov	r2, r3
 80020be:	4603      	mov	r3, r0
 80020c0:	817b      	strh	r3, [r7, #10]
 80020c2:	460b      	mov	r3, r1
 80020c4:	813b      	strh	r3, [r7, #8]
 80020c6:	4613      	mov	r3, r2
 80020c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	8979      	ldrh	r1, [r7, #10]
 80020d0:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <I2C_RequestMemoryRead+0xa4>)
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2300      	movs	r3, #0
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fa26 	bl	8002528 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	69b9      	ldr	r1, [r7, #24]
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 f8b6 	bl	8002252 <I2C_WaitOnTXISFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e02c      	b.n	800214a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d105      	bne.n	8002102 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020f6:	893b      	ldrh	r3, [r7, #8]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8002100:	e015      	b.n	800212e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002102:	893b      	ldrh	r3, [r7, #8]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	b29b      	uxth	r3, r3
 8002108:	b2da      	uxtb	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	69b9      	ldr	r1, [r7, #24]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f89c 	bl	8002252 <I2C_WaitOnTXISFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e012      	b.n	800214a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002124:	893b      	ldrh	r3, [r7, #8]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2200      	movs	r2, #0
 8002136:	2140      	movs	r1, #64	@ 0x40
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 f831 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	80002000 	.word	0x80002000

08002158 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b02      	cmp	r3, #2
 800216c:	d103      	bne.n	8002176 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d007      	beq.n	8002194 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	619a      	str	r2, [r3, #24]
  }
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	4613      	mov	r3, r2
 80021ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021b0:	e03b      	b.n	800222a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	6839      	ldr	r1, [r7, #0]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f8d6 	bl	8002368 <I2C_IsErrorOccurred>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e041      	b.n	800224a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021cc:	d02d      	beq.n	800222a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ce:	f7fe ffdb 	bl	8001188 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d302      	bcc.n	80021e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d122      	bne.n	800222a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	4013      	ands	r3, r2
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	bf0c      	ite	eq
 80021f4:	2301      	moveq	r3, #1
 80021f6:	2300      	movne	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d113      	bne.n	800222a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	f043 0220 	orr.w	r2, r3, #32
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4013      	ands	r3, r2
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	429a      	cmp	r2, r3
 8002238:	bf0c      	ite	eq
 800223a:	2301      	moveq	r3, #1
 800223c:	2300      	movne	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	429a      	cmp	r2, r3
 8002246:	d0b4      	beq.n	80021b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800225e:	e033      	b.n	80022c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f87f 	bl	8002368 <I2C_IsErrorOccurred>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e031      	b.n	80022d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800227a:	d025      	beq.n	80022c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227c:	f7fe ff84 	bl	8001188 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	429a      	cmp	r2, r3
 800228a:	d302      	bcc.n	8002292 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d11a      	bne.n	80022c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b02      	cmp	r3, #2
 800229e:	d013      	beq.n	80022c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e007      	b.n	80022d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d1c4      	bne.n	8002260 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ec:	e02f      	b.n	800234e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f838 	bl	8002368 <I2C_IsErrorOccurred>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e02d      	b.n	800235e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002302:	f7fe ff41 	bl	8001188 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	429a      	cmp	r2, r3
 8002310:	d302      	bcc.n	8002318 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d11a      	bne.n	800234e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b20      	cmp	r3, #32
 8002324:	d013      	beq.n	800234e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	f043 0220 	orr.w	r2, r3, #32
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e007      	b.n	800235e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b20      	cmp	r3, #32
 800235a:	d1c8      	bne.n	80022ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	@ 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b00      	cmp	r3, #0
 8002392:	d068      	beq.n	8002466 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2210      	movs	r2, #16
 800239a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800239c:	e049      	b.n	8002432 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023a4:	d045      	beq.n	8002432 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023a6:	f7fe feef 	bl	8001188 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d302      	bcc.n	80023bc <I2C_IsErrorOccurred+0x54>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d13a      	bne.n	8002432 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023de:	d121      	bne.n	8002424 <I2C_IsErrorOccurred+0xbc>
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023e6:	d01d      	beq.n	8002424 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	d01a      	beq.n	8002424 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023fe:	f7fe fec3 	bl	8001188 <HAL_GetTick>
 8002402:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002404:	e00e      	b.n	8002424 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002406:	f7fe febf 	bl	8001188 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b19      	cmp	r3, #25
 8002412:	d907      	bls.n	8002424 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	f043 0320 	orr.w	r3, r3, #32
 800241a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002422:	e006      	b.n	8002432 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b20      	cmp	r3, #32
 8002430:	d1e9      	bne.n	8002406 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b20      	cmp	r3, #32
 800243e:	d003      	beq.n	8002448 <I2C_IsErrorOccurred+0xe0>
 8002440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0aa      	beq.n	800239e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800244c:	2b00      	cmp	r3, #0
 800244e:	d103      	bne.n	8002458 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2220      	movs	r2, #32
 8002456:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00b      	beq.n	8002490 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002488:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	f043 0308 	orr.w	r3, r3, #8
 80024a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00b      	beq.n	80024d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80024d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01c      	beq.n	8002516 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff fe3b 	bl	8002158 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <I2C_IsErrorOccurred+0x1bc>)
 80024ee:	400b      	ands	r3, r1
 80024f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002516:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800251a:	4618      	mov	r0, r3
 800251c:	3728      	adds	r7, #40	@ 0x28
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	fe00e800 	.word	0xfe00e800

08002528 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	817b      	strh	r3, [r7, #10]
 8002536:	4613      	mov	r3, r2
 8002538:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800253a:	897b      	ldrh	r3, [r7, #10]
 800253c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002540:	7a7b      	ldrb	r3, [r7, #9]
 8002542:	041b      	lsls	r3, r3, #16
 8002544:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002548:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	4313      	orrs	r3, r2
 8002552:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002556:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	0d5b      	lsrs	r3, r3, #21
 8002562:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002566:	4b08      	ldr	r3, [pc, #32]	@ (8002588 <I2C_TransferConfig+0x60>)
 8002568:	430b      	orrs	r3, r1
 800256a:	43db      	mvns	r3, r3
 800256c:	ea02 0103 	and.w	r1, r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	430a      	orrs	r2, r1
 8002578:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	03ff63ff 	.word	0x03ff63ff

0800258c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d138      	bne.n	8002614 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e032      	b.n	8002616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2224      	movs	r2, #36	@ 0x24
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	e000      	b.n	8002616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
  }
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002622:	b480      	push	{r7}
 8002624:	b085      	sub	sp, #20
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b20      	cmp	r3, #32
 8002636:	d139      	bne.n	80026ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002642:	2302      	movs	r3, #2
 8002644:	e033      	b.n	80026ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2224      	movs	r2, #36	@ 0x24
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0201 	bic.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002674:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e000      	b.n	80026ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026c0:	4b04      	ldr	r3, [pc, #16]	@ (80026d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40007000 	.word	0x40007000

080026d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026e6:	d130      	bne.n	800274a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026e8:	4b23      	ldr	r3, [pc, #140]	@ (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026f4:	d038      	beq.n	8002768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f6:	4b20      	ldr	r3, [pc, #128]	@ (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002700:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002704:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002706:	4b1d      	ldr	r3, [pc, #116]	@ (800277c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2232      	movs	r2, #50	@ 0x32
 800270c:	fb02 f303 	mul.w	r3, r2, r3
 8002710:	4a1b      	ldr	r2, [pc, #108]	@ (8002780 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	0c9b      	lsrs	r3, r3, #18
 8002718:	3301      	adds	r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800271c:	e002      	b.n	8002724 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3b01      	subs	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002724:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002730:	d102      	bne.n	8002738 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f2      	bne.n	800271e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002738:	4b0f      	ldr	r3, [pc, #60]	@ (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002744:	d110      	bne.n	8002768 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e00f      	b.n	800276a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800274a:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002756:	d007      	beq.n	8002768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002758:	4b07      	ldr	r3, [pc, #28]	@ (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002760:	4a05      	ldr	r2, [pc, #20]	@ (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002762:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002766:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40007000 	.word	0x40007000
 800277c:	20000000 	.word	0x20000000
 8002780:	431bde83 	.word	0x431bde83

08002784 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e3ca      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002796:	4b97      	ldr	r3, [pc, #604]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027a0:	4b94      	ldr	r3, [pc, #592]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80e4 	beq.w	8002980 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <HAL_RCC_OscConfig+0x4a>
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b0c      	cmp	r3, #12
 80027c2:	f040 808b 	bne.w	80028dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	f040 8087 	bne.w	80028dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ce:	4b89      	ldr	r3, [pc, #548]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_RCC_OscConfig+0x62>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e3a2      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1a      	ldr	r2, [r3, #32]
 80027ea:	4b82      	ldr	r3, [pc, #520]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <HAL_RCC_OscConfig+0x7c>
 80027f6:	4b7f      	ldr	r3, [pc, #508]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027fe:	e005      	b.n	800280c <HAL_RCC_OscConfig+0x88>
 8002800:	4b7c      	ldr	r3, [pc, #496]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800280c:	4293      	cmp	r3, r2
 800280e:	d223      	bcs.n	8002858 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fd55 	bl	80032c4 <RCC_SetFlashLatencyFromMSIRange>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e383      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002824:	4b73      	ldr	r3, [pc, #460]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a72      	ldr	r2, [pc, #456]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 800282a:	f043 0308 	orr.w	r3, r3, #8
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b70      	ldr	r3, [pc, #448]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	496d      	ldr	r1, [pc, #436]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002842:	4b6c      	ldr	r3, [pc, #432]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	4968      	ldr	r1, [pc, #416]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]
 8002856:	e025      	b.n	80028a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002858:	4b66      	ldr	r3, [pc, #408]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a65      	ldr	r2, [pc, #404]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 800285e:	f043 0308 	orr.w	r3, r3, #8
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b63      	ldr	r3, [pc, #396]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	4960      	ldr	r1, [pc, #384]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002876:	4b5f      	ldr	r3, [pc, #380]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	495b      	ldr	r1, [pc, #364]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d109      	bne.n	80028a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fd15 	bl	80032c4 <RCC_SetFlashLatencyFromMSIRange>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e343      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028a4:	f000 fc4a 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b52      	ldr	r3, [pc, #328]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	091b      	lsrs	r3, r3, #4
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	4950      	ldr	r1, [pc, #320]	@ (80029f8 <HAL_RCC_OscConfig+0x274>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
 80028c0:	4a4e      	ldr	r2, [pc, #312]	@ (80029fc <HAL_RCC_OscConfig+0x278>)
 80028c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028c4:	4b4e      	ldr	r3, [pc, #312]	@ (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe fc0d 	bl	80010e8 <HAL_InitTick>
 80028ce:	4603      	mov	r3, r0
 80028d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d052      	beq.n	800297e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	e327      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d032      	beq.n	800294a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028e4:	4b43      	ldr	r3, [pc, #268]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a42      	ldr	r2, [pc, #264]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f0:	f7fe fc4a 	bl	8001188 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028f8:	f7fe fc46 	bl	8001188 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e310      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800290a:	4b3a      	ldr	r3, [pc, #232]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002916:	4b37      	ldr	r3, [pc, #220]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a36      	ldr	r2, [pc, #216]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 800291c:	f043 0308 	orr.w	r3, r3, #8
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b34      	ldr	r3, [pc, #208]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4931      	ldr	r1, [pc, #196]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002934:	4b2f      	ldr	r3, [pc, #188]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	492c      	ldr	r1, [pc, #176]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
 8002948:	e01a      	b.n	8002980 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800294a:	4b2a      	ldr	r3, [pc, #168]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a29      	ldr	r2, [pc, #164]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002956:	f7fe fc17 	bl	8001188 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800295e:	f7fe fc13 	bl	8001188 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e2dd      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002970:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x1da>
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800297e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d074      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b08      	cmp	r3, #8
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x21a>
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b0c      	cmp	r3, #12
 8002996:	d10e      	bne.n	80029b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d10b      	bne.n	80029b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299e:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d064      	beq.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d160      	bne.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e2ba      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x24a>
 80029c0:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0b      	ldr	r2, [pc, #44]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	e026      	b.n	8002a1c <HAL_RCC_OscConfig+0x298>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d6:	d115      	bne.n	8002a04 <HAL_RCC_OscConfig+0x280>
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a05      	ldr	r2, [pc, #20]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b03      	ldr	r3, [pc, #12]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a02      	ldr	r2, [pc, #8]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e014      	b.n	8002a1c <HAL_RCC_OscConfig+0x298>
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	08006774 	.word	0x08006774
 80029fc:	20000000 	.word	0x20000000
 8002a00:	20000004 	.word	0x20000004
 8002a04:	4ba0      	ldr	r3, [pc, #640]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a9f      	ldr	r2, [pc, #636]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b9d      	ldr	r3, [pc, #628]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a9c      	ldr	r2, [pc, #624]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fbb0 	bl	8001188 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7fe fbac 	bl	8001188 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	@ 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e276      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3e:	4b92      	ldr	r3, [pc, #584]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x2a8>
 8002a4a:	e014      	b.n	8002a76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fb9c 	bl	8001188 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe fb98 	bl	8001188 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	@ 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e262      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a66:	4b88      	ldr	r3, [pc, #544]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x2d0>
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d060      	beq.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_OscConfig+0x310>
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d119      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d116      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a94:	4b7c      	ldr	r3, [pc, #496]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_OscConfig+0x328>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e23f      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aac:	4b76      	ldr	r3, [pc, #472]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	4973      	ldr	r1, [pc, #460]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac0:	e040      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d023      	beq.n	8002b12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aca:	4b6f      	ldr	r3, [pc, #444]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6e      	ldr	r2, [pc, #440]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fb57 	bl	8001188 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ade:	f7fe fb53 	bl	8001188 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e21d      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af0:	4b65      	ldr	r3, [pc, #404]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afc:	4b62      	ldr	r3, [pc, #392]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	495f      	ldr	r1, [pc, #380]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
 8002b10:	e018      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b12:	4b5d      	ldr	r3, [pc, #372]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5c      	ldr	r2, [pc, #368]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fb33 	bl	8001188 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b26:	f7fe fb2f 	bl	8001188 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e1f9      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b38:	4b53      	ldr	r3, [pc, #332]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d03c      	beq.n	8002bca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01c      	beq.n	8002b92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b58:	4b4b      	ldr	r3, [pc, #300]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7fe fb0e 	bl	8001188 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b70:	f7fe fb0a 	bl	8001188 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1d4      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b82:	4b41      	ldr	r3, [pc, #260]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ef      	beq.n	8002b70 <HAL_RCC_OscConfig+0x3ec>
 8002b90:	e01b      	b.n	8002bca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b92:	4b3d      	ldr	r3, [pc, #244]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b98:	4a3b      	ldr	r2, [pc, #236]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7fe faf1 	bl	8001188 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002baa:	f7fe faed 	bl	8001188 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1b7      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bbc:	4b32      	ldr	r3, [pc, #200]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ef      	bne.n	8002baa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80a6 	beq.w	8002d24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10d      	bne.n	8002c04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	4b27      	ldr	r3, [pc, #156]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bec:	4a26      	ldr	r2, [pc, #152]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bf4:	4b24      	ldr	r3, [pc, #144]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c04:	4b21      	ldr	r3, [pc, #132]	@ (8002c8c <HAL_RCC_OscConfig+0x508>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d118      	bne.n	8002c42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c10:	4b1e      	ldr	r3, [pc, #120]	@ (8002c8c <HAL_RCC_OscConfig+0x508>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1d      	ldr	r2, [pc, #116]	@ (8002c8c <HAL_RCC_OscConfig+0x508>)
 8002c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1c:	f7fe fab4 	bl	8001188 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c24:	f7fe fab0 	bl	8001188 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e17a      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c36:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <HAL_RCC_OscConfig+0x508>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d108      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4d8>
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c50:	4a0d      	ldr	r2, [pc, #52]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c5a:	e029      	b.n	8002cb0 <HAL_RCC_OscConfig+0x52c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d115      	bne.n	8002c90 <HAL_RCC_OscConfig+0x50c>
 8002c64:	4b08      	ldr	r3, [pc, #32]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6a:	4a07      	ldr	r2, [pc, #28]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c74:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7a:	4a03      	ldr	r2, [pc, #12]	@ (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c84:	e014      	b.n	8002cb0 <HAL_RCC_OscConfig+0x52c>
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	4b9c      	ldr	r3, [pc, #624]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c96:	4a9b      	ldr	r2, [pc, #620]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ca0:	4b98      	ldr	r3, [pc, #608]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	4a97      	ldr	r2, [pc, #604]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d016      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe fa66 	bl	8001188 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fa62 	bl	8001188 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e12a      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd6:	4b8b      	ldr	r3, [pc, #556]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ed      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x53c>
 8002ce4:	e015      	b.n	8002d12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fa4f 	bl	8001188 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fe fa4b 	bl	8001188 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e113      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d04:	4b7f      	ldr	r3, [pc, #508]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ed      	bne.n	8002cee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d18:	4b7a      	ldr	r3, [pc, #488]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1c:	4a79      	ldr	r2, [pc, #484]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80fe 	beq.w	8002f2a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	f040 80d0 	bne.w	8002ed8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d38:	4b72      	ldr	r3, [pc, #456]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f003 0203 	and.w	r2, r3, #3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d130      	bne.n	8002dae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	3b01      	subs	r3, #1
 8002d58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d127      	bne.n	8002dae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d11f      	bne.n	8002dae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d78:	2a07      	cmp	r2, #7
 8002d7a:	bf14      	ite	ne
 8002d7c:	2201      	movne	r2, #1
 8002d7e:	2200      	moveq	r2, #0
 8002d80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d113      	bne.n	8002dae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	3b01      	subs	r3, #1
 8002d94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d109      	bne.n	8002dae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	3b01      	subs	r3, #1
 8002da8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d06e      	beq.n	8002e8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d069      	beq.n	8002e88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002db4:	4b53      	ldr	r3, [pc, #332]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002dc0:	4b50      	ldr	r3, [pc, #320]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0ad      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b4c      	ldr	r3, [pc, #304]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a4b      	ldr	r2, [pc, #300]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ddc:	f7fe f9d4 	bl	8001188 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe f9d0 	bl	8001188 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e09a      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df6:	4b43      	ldr	r3, [pc, #268]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e02:	4b40      	ldr	r3, [pc, #256]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	4b40      	ldr	r3, [pc, #256]	@ (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e12:	3a01      	subs	r2, #1
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	4311      	orrs	r1, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e1c:	0212      	lsls	r2, r2, #8
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e24:	0852      	lsrs	r2, r2, #1
 8002e26:	3a01      	subs	r2, #1
 8002e28:	0552      	lsls	r2, r2, #21
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e30:	0852      	lsrs	r2, r2, #1
 8002e32:	3a01      	subs	r2, #1
 8002e34:	0652      	lsls	r2, r2, #25
 8002e36:	4311      	orrs	r1, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e3c:	0912      	lsrs	r2, r2, #4
 8002e3e:	0452      	lsls	r2, r2, #17
 8002e40:	430a      	orrs	r2, r1
 8002e42:	4930      	ldr	r1, [pc, #192]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e48:	4b2e      	ldr	r3, [pc, #184]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e54:	4b2b      	ldr	r3, [pc, #172]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a2a      	ldr	r2, [pc, #168]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e60:	f7fe f992 	bl	8001188 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fe f98e 	bl	8001188 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e058      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7a:	4b22      	ldr	r3, [pc, #136]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e86:	e050      	b.n	8002f2a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e04f      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d148      	bne.n	8002f2a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e98:	4b1a      	ldr	r3, [pc, #104]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a19      	ldr	r2, [pc, #100]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ea2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ea4:	4b17      	ldr	r3, [pc, #92]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a16      	ldr	r2, [pc, #88]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002eaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eb0:	f7fe f96a 	bl	8001188 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe f966 	bl	8001188 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e030      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eca:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x734>
 8002ed6:	e028      	b.n	8002f2a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	d023      	beq.n	8002f26 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ede:	4b09      	ldr	r3, [pc, #36]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a08      	ldr	r2, [pc, #32]	@ (8002f04 <HAL_RCC_OscConfig+0x780>)
 8002ee4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eea:	f7fe f94d 	bl	8001188 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef0:	e00c      	b.n	8002f0c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7fe f949 	bl	8001188 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d905      	bls.n	8002f0c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e013      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
 8002f04:	40021000 	.word	0x40021000
 8002f08:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0c:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <HAL_RCC_OscConfig+0x7b0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ec      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f18:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <HAL_RCC_OscConfig+0x7b0>)
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	4905      	ldr	r1, [pc, #20]	@ (8002f34 <HAL_RCC_OscConfig+0x7b0>)
 8002f1e:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <HAL_RCC_OscConfig+0x7b4>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	60cb      	str	r3, [r1, #12]
 8002f24:	e001      	b.n	8002f2a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000
 8002f38:	feeefffc 	.word	0xfeeefffc

08002f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0e7      	b.n	8003120 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f50:	4b75      	ldr	r3, [pc, #468]	@ (8003128 <HAL_RCC_ClockConfig+0x1ec>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d910      	bls.n	8002f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b72      	ldr	r3, [pc, #456]	@ (8003128 <HAL_RCC_ClockConfig+0x1ec>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 0207 	bic.w	r2, r3, #7
 8002f66:	4970      	ldr	r1, [pc, #448]	@ (8003128 <HAL_RCC_ClockConfig+0x1ec>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b6e      	ldr	r3, [pc, #440]	@ (8003128 <HAL_RCC_ClockConfig+0x1ec>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0cf      	b.n	8003120 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d010      	beq.n	8002fae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	4b66      	ldr	r3, [pc, #408]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d908      	bls.n	8002fae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b63      	ldr	r3, [pc, #396]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4960      	ldr	r1, [pc, #384]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d04c      	beq.n	8003054 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc2:	4b5a      	ldr	r3, [pc, #360]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d121      	bne.n	8003012 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0a6      	b.n	8003120 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fda:	4b54      	ldr	r3, [pc, #336]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d115      	bne.n	8003012 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e09a      	b.n	8003120 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ff2:	4b4e      	ldr	r3, [pc, #312]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e08e      	b.n	8003120 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003002:	4b4a      	ldr	r3, [pc, #296]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e086      	b.n	8003120 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003012:	4b46      	ldr	r3, [pc, #280]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f023 0203 	bic.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4943      	ldr	r1, [pc, #268]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 8003020:	4313      	orrs	r3, r2
 8003022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003024:	f7fe f8b0 	bl	8001188 <HAL_GetTick>
 8003028:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	e00a      	b.n	8003042 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302c:	f7fe f8ac 	bl	8001188 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e06e      	b.n	8003120 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	4b3a      	ldr	r3, [pc, #232]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 020c 	and.w	r2, r3, #12
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	429a      	cmp	r2, r3
 8003052:	d1eb      	bne.n	800302c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d010      	beq.n	8003082 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	4b31      	ldr	r3, [pc, #196]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800306c:	429a      	cmp	r2, r3
 800306e:	d208      	bcs.n	8003082 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003070:	4b2e      	ldr	r3, [pc, #184]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	492b      	ldr	r1, [pc, #172]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003082:	4b29      	ldr	r3, [pc, #164]	@ (8003128 <HAL_RCC_ClockConfig+0x1ec>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d210      	bcs.n	80030b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003090:	4b25      	ldr	r3, [pc, #148]	@ (8003128 <HAL_RCC_ClockConfig+0x1ec>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f023 0207 	bic.w	r2, r3, #7
 8003098:	4923      	ldr	r1, [pc, #140]	@ (8003128 <HAL_RCC_ClockConfig+0x1ec>)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a0:	4b21      	ldr	r3, [pc, #132]	@ (8003128 <HAL_RCC_ClockConfig+0x1ec>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d001      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e036      	b.n	8003120 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030be:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	4918      	ldr	r1, [pc, #96]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d009      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030dc:	4b13      	ldr	r3, [pc, #76]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4910      	ldr	r1, [pc, #64]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030f0:	f000 f824 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b0d      	ldr	r3, [pc, #52]	@ (800312c <HAL_RCC_ClockConfig+0x1f0>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	490b      	ldr	r1, [pc, #44]	@ (8003130 <HAL_RCC_ClockConfig+0x1f4>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
 800310c:	4a09      	ldr	r2, [pc, #36]	@ (8003134 <HAL_RCC_ClockConfig+0x1f8>)
 800310e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003110:	4b09      	ldr	r3, [pc, #36]	@ (8003138 <HAL_RCC_ClockConfig+0x1fc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd ffe7 	bl	80010e8 <HAL_InitTick>
 800311a:	4603      	mov	r3, r0
 800311c:	72fb      	strb	r3, [r7, #11]

  return status;
 800311e:	7afb      	ldrb	r3, [r7, #11]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40022000 	.word	0x40022000
 800312c:	40021000 	.word	0x40021000
 8003130:	08006774 	.word	0x08006774
 8003134:	20000000 	.word	0x20000000
 8003138:	20000004 	.word	0x20000004

0800313c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	@ 0x24
 8003140:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	2300      	movs	r3, #0
 8003148:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800314a:	4b3e      	ldr	r3, [pc, #248]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003154:	4b3b      	ldr	r3, [pc, #236]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x34>
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d121      	bne.n	80031ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d11e      	bne.n	80031ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003170:	4b34      	ldr	r3, [pc, #208]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d107      	bne.n	800318c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800317c:	4b31      	ldr	r3, [pc, #196]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 800317e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	e005      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800318c:	4b2d      	ldr	r3, [pc, #180]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003198:	4a2b      	ldr	r2, [pc, #172]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x10c>)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10d      	bne.n	80031c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d102      	bne.n	80031ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031b4:	4b25      	ldr	r3, [pc, #148]	@ (800324c <HAL_RCC_GetSysClockFreq+0x110>)
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	e004      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031c0:	4b23      	ldr	r3, [pc, #140]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x114>)
 80031c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d134      	bne.n	8003234 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d003      	beq.n	80031e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d003      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0xac>
 80031e0:	e005      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031e2:	4b1a      	ldr	r3, [pc, #104]	@ (800324c <HAL_RCC_GetSysClockFreq+0x110>)
 80031e4:	617b      	str	r3, [r7, #20]
      break;
 80031e6:	e005      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031e8:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x114>)
 80031ea:	617b      	str	r3, [r7, #20]
      break;
 80031ec:	e002      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	617b      	str	r3, [r7, #20]
      break;
 80031f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f4:	4b13      	ldr	r3, [pc, #76]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	3301      	adds	r3, #1
 8003200:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003202:	4b10      	ldr	r3, [pc, #64]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	fb03 f202 	mul.w	r2, r3, r2
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800321a:	4b0a      	ldr	r3, [pc, #40]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	0e5b      	lsrs	r3, r3, #25
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	3301      	adds	r3, #1
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003234:	69bb      	ldr	r3, [r7, #24]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3724      	adds	r7, #36	@ 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	0800678c 	.word	0x0800678c
 800324c:	00f42400 	.word	0x00f42400
 8003250:	007a1200 	.word	0x007a1200

08003254 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003258:	4b03      	ldr	r3, [pc, #12]	@ (8003268 <HAL_RCC_GetHCLKFreq+0x14>)
 800325a:	681b      	ldr	r3, [r3, #0]
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000000 	.word	0x20000000

0800326c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003270:	f7ff fff0 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 8003274:	4602      	mov	r2, r0
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	4904      	ldr	r1, [pc, #16]	@ (8003294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003282:	5ccb      	ldrb	r3, [r1, r3]
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	08006784 	.word	0x08006784

08003298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800329c:	f7ff ffda 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	0adb      	lsrs	r3, r3, #11
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4904      	ldr	r1, [pc, #16]	@ (80032c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	08006784 	.word	0x08006784

080032c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032cc:	2300      	movs	r3, #0
 80032ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032d0:	4b2a      	ldr	r3, [pc, #168]	@ (800337c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032dc:	f7ff f9ee 	bl	80026bc <HAL_PWREx_GetVoltageRange>
 80032e0:	6178      	str	r0, [r7, #20]
 80032e2:	e014      	b.n	800330e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032e4:	4b25      	ldr	r3, [pc, #148]	@ (800337c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e8:	4a24      	ldr	r2, [pc, #144]	@ (800337c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80032f0:	4b22      	ldr	r3, [pc, #136]	@ (800337c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032fc:	f7ff f9de 	bl	80026bc <HAL_PWREx_GetVoltageRange>
 8003300:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003302:	4b1e      	ldr	r3, [pc, #120]	@ (800337c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003306:	4a1d      	ldr	r2, [pc, #116]	@ (800337c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003308:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800330c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003314:	d10b      	bne.n	800332e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b80      	cmp	r3, #128	@ 0x80
 800331a:	d919      	bls.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003320:	d902      	bls.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003322:	2302      	movs	r3, #2
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	e013      	b.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003328:	2301      	movs	r3, #1
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e010      	b.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b80      	cmp	r3, #128	@ 0x80
 8003332:	d902      	bls.n	800333a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003334:	2303      	movs	r3, #3
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	e00a      	b.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b80      	cmp	r3, #128	@ 0x80
 800333e:	d102      	bne.n	8003346 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003340:	2302      	movs	r3, #2
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	e004      	b.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b70      	cmp	r3, #112	@ 0x70
 800334a:	d101      	bne.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800334c:	2301      	movs	r3, #1
 800334e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003350:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 0207 	bic.w	r2, r3, #7
 8003358:	4909      	ldr	r1, [pc, #36]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003360:	4b07      	ldr	r3, [pc, #28]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	429a      	cmp	r2, r3
 800336c:	d001      	beq.n	8003372 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	40022000 	.word	0x40022000

08003384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800338c:	2300      	movs	r3, #0
 800338e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003390:	2300      	movs	r3, #0
 8003392:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800339c:	2b00      	cmp	r3, #0
 800339e:	d041      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033a8:	d02a      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033ae:	d824      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033b4:	d008      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033ba:	d81e      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033c4:	d010      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033c6:	e018      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033c8:	4b86      	ldr	r3, [pc, #536]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4a85      	ldr	r2, [pc, #532]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d4:	e015      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3304      	adds	r3, #4
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 f829 	bl	8004434 <RCCEx_PLLSAI1_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e6:	e00c      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3320      	adds	r3, #32
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 f914 	bl	800461c <RCCEx_PLLSAI2_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033f8:	e003      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	74fb      	strb	r3, [r7, #19]
      break;
 80033fe:	e000      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003402:	7cfb      	ldrb	r3, [r7, #19]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003408:	4b76      	ldr	r3, [pc, #472]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003416:	4973      	ldr	r1, [pc, #460]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800341e:	e001      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d041      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003434:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003438:	d02a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800343a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800343e:	d824      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003440:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003444:	d008      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800344a:	d81e      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003454:	d010      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003456:	e018      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003458:	4b62      	ldr	r3, [pc, #392]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a61      	ldr	r2, [pc, #388]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003462:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003464:	e015      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3304      	adds	r3, #4
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f000 ffe1 	bl	8004434 <RCCEx_PLLSAI1_Config>
 8003472:	4603      	mov	r3, r0
 8003474:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003476:	e00c      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3320      	adds	r3, #32
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f001 f8cc 	bl	800461c <RCCEx_PLLSAI2_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003488:	e003      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	74fb      	strb	r3, [r7, #19]
      break;
 800348e:	e000      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10b      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003498:	4b52      	ldr	r3, [pc, #328]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034a6:	494f      	ldr	r1, [pc, #316]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034ae:	e001      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80a0 	beq.w	8003602 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034c6:	4b47      	ldr	r3, [pc, #284]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034dc:	4b41      	ldr	r3, [pc, #260]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e0:	4a40      	ldr	r2, [pc, #256]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80034e8:	4b3e      	ldr	r3, [pc, #248]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f4:	2301      	movs	r3, #1
 80034f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f8:	4b3b      	ldr	r3, [pc, #236]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a3a      	ldr	r2, [pc, #232]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003502:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003504:	f7fd fe40 	bl	8001188 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800350a:	e009      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350c:	f7fd fe3c 	bl	8001188 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d902      	bls.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	74fb      	strb	r3, [r7, #19]
        break;
 800351e:	e005      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003520:	4b31      	ldr	r3, [pc, #196]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ef      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d15c      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003532:	4b2c      	ldr	r3, [pc, #176]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003538:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800353c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01f      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	429a      	cmp	r2, r3
 800354e:	d019      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003550:	4b24      	ldr	r3, [pc, #144]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003556:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800355a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800355c:	4b21      	ldr	r3, [pc, #132]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003562:	4a20      	ldr	r2, [pc, #128]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800356c:	4b1d      	ldr	r3, [pc, #116]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003572:	4a1c      	ldr	r2, [pc, #112]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800357c:	4a19      	ldr	r2, [pc, #100]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d016      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7fd fdfb 	bl	8001188 <HAL_GetTick>
 8003592:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003594:	e00b      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7fd fdf7 	bl	8001188 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d902      	bls.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	74fb      	strb	r3, [r7, #19]
            break;
 80035ac:	e006      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ae:	4b0d      	ldr	r3, [pc, #52]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0ec      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10c      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035c2:	4b08      	ldr	r3, [pc, #32]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035d2:	4904      	ldr	r1, [pc, #16]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035da:	e009      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	74bb      	strb	r3, [r7, #18]
 80035e0:	e006      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f0:	7c7b      	ldrb	r3, [r7, #17]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d105      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f6:	4b9e      	ldr	r3, [pc, #632]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	4a9d      	ldr	r2, [pc, #628]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003600:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800360e:	4b98      	ldr	r3, [pc, #608]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003614:	f023 0203 	bic.w	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	4994      	ldr	r1, [pc, #592]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003630:	4b8f      	ldr	r3, [pc, #572]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003636:	f023 020c 	bic.w	r2, r3, #12
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363e:	498c      	ldr	r1, [pc, #560]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003652:	4b87      	ldr	r3, [pc, #540]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003658:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	4983      	ldr	r1, [pc, #524]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003674:	4b7e      	ldr	r3, [pc, #504]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	497b      	ldr	r1, [pc, #492]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003696:	4b76      	ldr	r3, [pc, #472]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a4:	4972      	ldr	r1, [pc, #456]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036b8:	4b6d      	ldr	r3, [pc, #436]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c6:	496a      	ldr	r1, [pc, #424]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036da:	4b65      	ldr	r3, [pc, #404]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e8:	4961      	ldr	r1, [pc, #388]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036fc:	4b5c      	ldr	r3, [pc, #368]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003702:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370a:	4959      	ldr	r1, [pc, #356]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800371e:	4b54      	ldr	r3, [pc, #336]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003724:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372c:	4950      	ldr	r1, [pc, #320]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003740:	4b4b      	ldr	r3, [pc, #300]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003746:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800374e:	4948      	ldr	r1, [pc, #288]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003762:	4b43      	ldr	r3, [pc, #268]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003768:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003770:	493f      	ldr	r1, [pc, #252]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d028      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003784:	4b3a      	ldr	r3, [pc, #232]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003792:	4937      	ldr	r1, [pc, #220]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800379e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037a2:	d106      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a4:	4b32      	ldr	r3, [pc, #200]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4a31      	ldr	r2, [pc, #196]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ae:	60d3      	str	r3, [r2, #12]
 80037b0:	e011      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037ba:	d10c      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3304      	adds	r3, #4
 80037c0:	2101      	movs	r1, #1
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fe36 	bl	8004434 <RCCEx_PLLSAI1_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037d2:	7cfb      	ldrb	r3, [r7, #19]
 80037d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d028      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037e2:	4b23      	ldr	r3, [pc, #140]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	491f      	ldr	r1, [pc, #124]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003800:	d106      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003802:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	4a1a      	ldr	r2, [pc, #104]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800380c:	60d3      	str	r3, [r2, #12]
 800380e:	e011      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003814:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003818:	d10c      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3304      	adds	r3, #4
 800381e:	2101      	movs	r1, #1
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fe07 	bl	8004434 <RCCEx_PLLSAI1_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d02b      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003840:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003846:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384e:	4908      	ldr	r1, [pc, #32]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800385e:	d109      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003860:	4b03      	ldr	r3, [pc, #12]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4a02      	ldr	r2, [pc, #8]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800386a:	60d3      	str	r3, [r2, #12]
 800386c:	e014      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003878:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800387c:	d10c      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	2101      	movs	r1, #1
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fdd5 	bl	8004434 <RCCEx_PLLSAI1_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800388e:	7cfb      	ldrb	r3, [r7, #19]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d02f      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038b2:	4928      	ldr	r1, [pc, #160]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038c2:	d10d      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3304      	adds	r3, #4
 80038c8:	2102      	movs	r1, #2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fdb2 	bl	8004434 <RCCEx_PLLSAI1_Config>
 80038d0:	4603      	mov	r3, r0
 80038d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d014      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038da:	7cfb      	ldrb	r3, [r7, #19]
 80038dc:	74bb      	strb	r3, [r7, #18]
 80038de:	e011      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038e8:	d10c      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3320      	adds	r3, #32
 80038ee:	2102      	movs	r1, #2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fe93 	bl	800461c <RCCEx_PLLSAI2_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003910:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003916:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800391e:	490d      	ldr	r1, [pc, #52]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003932:	4b08      	ldr	r3, [pc, #32]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003938:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003942:	4904      	ldr	r1, [pc, #16]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800394a:	7cbb      	ldrb	r3, [r7, #18]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000

08003958 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800396a:	d13e      	bne.n	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800396c:	4bb2      	ldr	r3, [pc, #712]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003976:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800397e:	d028      	beq.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003986:	f200 8542 	bhi.w	800440e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003990:	d005      	beq.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003998:	d00e      	beq.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800399a:	f000 bd38 	b.w	800440e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800399e:	4ba6      	ldr	r3, [pc, #664]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	f040 8532 	bne.w	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80039ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039b2:	61fb      	str	r3, [r7, #28]
      break;
 80039b4:	f000 bd2d 	b.w	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80039b8:	4b9f      	ldr	r3, [pc, #636]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	f040 8527 	bne.w	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80039c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80039cc:	61fb      	str	r3, [r7, #28]
      break;
 80039ce:	f000 bd22 	b.w	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80039d2:	4b99      	ldr	r3, [pc, #612]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039de:	f040 851c 	bne.w	800441a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80039e2:	4b96      	ldr	r3, [pc, #600]	@ (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80039e4:	61fb      	str	r3, [r7, #28]
      break;
 80039e6:	f000 bd18 	b.w	800441a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039ea:	4b93      	ldr	r3, [pc, #588]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d036      	beq.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d840      	bhi.n	8003a82 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d003      	beq.n	8003a0e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d020      	beq.n	8003a4e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003a0c:	e039      	b.n	8003a82 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003a0e:	4b8a      	ldr	r3, [pc, #552]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d116      	bne.n	8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003a1a:	4b87      	ldr	r3, [pc, #540]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003a26:	4b84      	ldr	r3, [pc, #528]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	e005      	b.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003a32:	4b81      	ldr	r3, [pc, #516]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	4a80      	ldr	r2, [pc, #512]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003a46:	e01f      	b.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]
      break;
 8003a4c:	e01c      	b.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a5a:	d102      	bne.n	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003a5c:	4b79      	ldr	r3, [pc, #484]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003a5e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003a60:	e012      	b.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
      break;
 8003a66:	e00f      	b.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003a68:	4b73      	ldr	r3, [pc, #460]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a74:	d102      	bne.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003a76:	4b74      	ldr	r3, [pc, #464]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003a78:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003a7a:	e005      	b.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
      break;
 8003a80:	e002      	b.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61bb      	str	r3, [r7, #24]
      break;
 8003a86:	bf00      	nop
    }

    switch(PeriphClk)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a8e:	f000 80dd 	beq.w	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a98:	f200 84c1 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003aa2:	f000 80d3 	beq.w	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003aac:	f200 84b7 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab6:	f000 835f 	beq.w	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac0:	f200 84ad 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aca:	f000 847e 	beq.w	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad4:	f200 84a3 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ade:	f000 82cd 	beq.w	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ae8:	f200 8499 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af2:	f000 80ab 	beq.w	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003afc:	f200 848f 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b06:	f000 8090 	beq.w	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b10:	f200 8485 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b1a:	d07f      	beq.n	8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b22:	f200 847c 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b2c:	f000 8403 	beq.w	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b36:	f200 8472 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b40:	f000 83af 	beq.w	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b4a:	f200 8468 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b54:	f000 8379 	beq.w	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b5e:	f200 845e 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b80      	cmp	r3, #128	@ 0x80
 8003b66:	f000 8344 	beq.w	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b80      	cmp	r3, #128	@ 0x80
 8003b6e:	f200 8456 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d84b      	bhi.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 844f 	beq.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	2b1f      	cmp	r3, #31
 8003b86:	f200 844a 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b90:	08003d79 	.word	0x08003d79
 8003b94:	08003de7 	.word	0x08003de7
 8003b98:	0800441f 	.word	0x0800441f
 8003b9c:	08003e7b 	.word	0x08003e7b
 8003ba0:	0800441f 	.word	0x0800441f
 8003ba4:	0800441f 	.word	0x0800441f
 8003ba8:	0800441f 	.word	0x0800441f
 8003bac:	08003f01 	.word	0x08003f01
 8003bb0:	0800441f 	.word	0x0800441f
 8003bb4:	0800441f 	.word	0x0800441f
 8003bb8:	0800441f 	.word	0x0800441f
 8003bbc:	0800441f 	.word	0x0800441f
 8003bc0:	0800441f 	.word	0x0800441f
 8003bc4:	0800441f 	.word	0x0800441f
 8003bc8:	0800441f 	.word	0x0800441f
 8003bcc:	08003f79 	.word	0x08003f79
 8003bd0:	0800441f 	.word	0x0800441f
 8003bd4:	0800441f 	.word	0x0800441f
 8003bd8:	0800441f 	.word	0x0800441f
 8003bdc:	0800441f 	.word	0x0800441f
 8003be0:	0800441f 	.word	0x0800441f
 8003be4:	0800441f 	.word	0x0800441f
 8003be8:	0800441f 	.word	0x0800441f
 8003bec:	0800441f 	.word	0x0800441f
 8003bf0:	0800441f 	.word	0x0800441f
 8003bf4:	0800441f 	.word	0x0800441f
 8003bf8:	0800441f 	.word	0x0800441f
 8003bfc:	0800441f 	.word	0x0800441f
 8003c00:	0800441f 	.word	0x0800441f
 8003c04:	0800441f 	.word	0x0800441f
 8003c08:	0800441f 	.word	0x0800441f
 8003c0c:	08003ffb 	.word	0x08003ffb
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b40      	cmp	r3, #64	@ 0x40
 8003c14:	f000 82c1 	beq.w	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003c18:	f000 bc01 	b.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003c1c:	69b9      	ldr	r1, [r7, #24]
 8003c1e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003c22:	f000 fdd9 	bl	80047d8 <RCCEx_GetSAIxPeriphCLKFreq>
 8003c26:	61f8      	str	r0, [r7, #28]
      break;
 8003c28:	e3fa      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003c2a:	69b9      	ldr	r1, [r7, #24]
 8003c2c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003c30:	f000 fdd2 	bl	80047d8 <RCCEx_GetSAIxPeriphCLKFreq>
 8003c34:	61f8      	str	r0, [r7, #28]
      break;
 8003c36:	e3f3      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	0003d090 	.word	0x0003d090
 8003c40:	0800678c 	.word	0x0800678c
 8003c44:	00f42400 	.word	0x00f42400
 8003c48:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003c4c:	4ba9      	ldr	r3, [pc, #676]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c52:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003c56:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003c5e:	d00c      	beq.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003c66:	d87f      	bhi.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c6e:	d04e      	beq.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c76:	d01d      	beq.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003c78:	e076      	b.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003c7a:	4b9e      	ldr	r3, [pc, #632]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d172      	bne.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c86:	4b9b      	ldr	r3, [pc, #620]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d005      	beq.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8003c92:	4b98      	ldr	r3, [pc, #608]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	e005      	b.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8003c9e:	4b95      	ldr	r3, [pc, #596]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	4a93      	ldr	r2, [pc, #588]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb0:	61fb      	str	r3, [r7, #28]
          break;
 8003cb2:	e05b      	b.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003cb4:	4b8f      	ldr	r3, [pc, #572]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cc0:	d156      	bne.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003cc2:	4b8c      	ldr	r3, [pc, #560]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cce:	d14f      	bne.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003cd0:	4b88      	ldr	r3, [pc, #544]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cda:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	fb03 f202 	mul.w	r2, r3, r2
 8003ce4:	4b83      	ldr	r3, [pc, #524]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	3301      	adds	r3, #1
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	0d5b      	lsrs	r3, r3, #21
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	3301      	adds	r3, #1
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0a:	61fb      	str	r3, [r7, #28]
          break;
 8003d0c:	e030      	b.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003d0e:	4b79      	ldr	r3, [pc, #484]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d1a:	d12b      	bne.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003d1c:	4b75      	ldr	r3, [pc, #468]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d28:	d124      	bne.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003d2a:	4b72      	ldr	r3, [pc, #456]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	0a1b      	lsrs	r3, r3, #8
 8003d30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d34:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	fb03 f202 	mul.w	r2, r3, r2
 8003d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	3301      	adds	r3, #1
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003d50:	4b68      	ldr	r3, [pc, #416]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	0d5b      	lsrs	r3, r3, #21
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	61fb      	str	r3, [r7, #28]
          break;
 8003d66:	e005      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8003d68:	bf00      	nop
 8003d6a:	e359      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d6c:	bf00      	nop
 8003d6e:	e357      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d70:	bf00      	nop
 8003d72:	e355      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d74:	bf00      	nop
        break;
 8003d76:	e353      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003d78:	4b5e      	ldr	r3, [pc, #376]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d827      	bhi.n	8003dda <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8003d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003da9 	.word	0x08003da9
 8003d98:	08003db1 	.word	0x08003db1
 8003d9c:	08003dc5 	.word	0x08003dc5
          frequency = HAL_RCC_GetPCLK2Freq();
 8003da0:	f7ff fa7a 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 8003da4:	61f8      	str	r0, [r7, #28]
          break;
 8003da6:	e01d      	b.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003da8:	f7ff f9c8 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8003dac:	61f8      	str	r0, [r7, #28]
          break;
 8003dae:	e019      	b.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003db0:	4b50      	ldr	r3, [pc, #320]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dbc:	d10f      	bne.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8003dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003dc0:	61fb      	str	r3, [r7, #28]
          break;
 8003dc2:	e00c      	b.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8003dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dd6:	61fb      	str	r3, [r7, #28]
          break;
 8003dd8:	e003      	b.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8003dda:	bf00      	nop
 8003ddc:	e320      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003dde:	bf00      	nop
 8003de0:	e31e      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003de2:	bf00      	nop
        break;
 8003de4:	e31c      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003de6:	4b43      	ldr	r3, [pc, #268]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dec:	f003 030c 	and.w	r3, r3, #12
 8003df0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b0c      	cmp	r3, #12
 8003df6:	d83a      	bhi.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003df8:	a201      	add	r2, pc, #4	@ (adr r2, 8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e35 	.word	0x08003e35
 8003e04:	08003e6f 	.word	0x08003e6f
 8003e08:	08003e6f 	.word	0x08003e6f
 8003e0c:	08003e6f 	.word	0x08003e6f
 8003e10:	08003e3d 	.word	0x08003e3d
 8003e14:	08003e6f 	.word	0x08003e6f
 8003e18:	08003e6f 	.word	0x08003e6f
 8003e1c:	08003e6f 	.word	0x08003e6f
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e6f 	.word	0x08003e6f
 8003e28:	08003e6f 	.word	0x08003e6f
 8003e2c:	08003e6f 	.word	0x08003e6f
 8003e30:	08003e59 	.word	0x08003e59
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e34:	f7ff fa1a 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8003e38:	61f8      	str	r0, [r7, #28]
          break;
 8003e3a:	e01d      	b.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e3c:	f7ff f97e 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8003e40:	61f8      	str	r0, [r7, #28]
          break;
 8003e42:	e019      	b.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e44:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e50:	d10f      	bne.n	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8003e52:	4b2a      	ldr	r3, [pc, #168]	@ (8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003e54:	61fb      	str	r3, [r7, #28]
          break;
 8003e56:	e00c      	b.n	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e58:	4b26      	ldr	r3, [pc, #152]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d107      	bne.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8003e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e6a:	61fb      	str	r3, [r7, #28]
          break;
 8003e6c:	e003      	b.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8003e6e:	bf00      	nop
 8003e70:	e2d6      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e72:	bf00      	nop
 8003e74:	e2d4      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e76:	bf00      	nop
        break;
 8003e78:	e2d2      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e84:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b30      	cmp	r3, #48	@ 0x30
 8003e8a:	d021      	beq.n	8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b30      	cmp	r3, #48	@ 0x30
 8003e90:	d829      	bhi.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d011      	beq.n	8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d823      	bhi.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b10      	cmp	r3, #16
 8003ea8:	d004      	beq.n	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8003eaa:	e01c      	b.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003eac:	f7ff f9de 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8003eb0:	61f8      	str	r0, [r7, #28]
          break;
 8003eb2:	e01d      	b.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8003eb4:	f7ff f942 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8003eb8:	61f8      	str	r0, [r7, #28]
          break;
 8003eba:	e019      	b.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ec8:	d10f      	bne.n	8003eea <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8003eca:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003ecc:	61fb      	str	r3, [r7, #28]
          break;
 8003ece:	e00c      	b.n	8003eea <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ed0:	4b08      	ldr	r3, [pc, #32]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d107      	bne.n	8003eee <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8003ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ee2:	61fb      	str	r3, [r7, #28]
          break;
 8003ee4:	e003      	b.n	8003eee <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8003ee6:	bf00      	nop
 8003ee8:	e29a      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003eea:	bf00      	nop
 8003eec:	e298      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003eee:	bf00      	nop
        break;
 8003ef0:	e296      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	0800678c 	.word	0x0800678c
 8003efc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003f00:	4b9b      	ldr	r3, [pc, #620]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f0a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f10:	d021      	beq.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f16:	d829      	bhi.n	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b80      	cmp	r3, #128	@ 0x80
 8003f1c:	d011      	beq.n	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2b80      	cmp	r3, #128	@ 0x80
 8003f22:	d823      	bhi.n	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b40      	cmp	r3, #64	@ 0x40
 8003f2e:	d004      	beq.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003f30:	e01c      	b.n	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f32:	f7ff f99b 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8003f36:	61f8      	str	r0, [r7, #28]
          break;
 8003f38:	e01d      	b.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f3a:	f7ff f8ff 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8003f3e:	61f8      	str	r0, [r7, #28]
          break;
 8003f40:	e019      	b.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f42:	4b8b      	ldr	r3, [pc, #556]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4e:	d10f      	bne.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8003f50:	4b88      	ldr	r3, [pc, #544]	@ (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003f52:	61fb      	str	r3, [r7, #28]
          break;
 8003f54:	e00c      	b.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f56:	4b86      	ldr	r3, [pc, #536]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d107      	bne.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8003f64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f68:	61fb      	str	r3, [r7, #28]
          break;
 8003f6a:	e003      	b.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8003f6c:	bf00      	nop
 8003f6e:	e257      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f70:	bf00      	nop
 8003f72:	e255      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f74:	bf00      	nop
        break;
 8003f76:	e253      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003f78:	4b7d      	ldr	r3, [pc, #500]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f82:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f8a:	d025      	beq.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f92:	d82c      	bhi.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f9a:	d013      	beq.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fa2:	d824      	bhi.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d004      	beq.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb0:	d004      	beq.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8003fb2:	e01c      	b.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fb4:	f7ff f95a 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8003fb8:	61f8      	str	r0, [r7, #28]
          break;
 8003fba:	e01d      	b.n	8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fbc:	f7ff f8be 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8003fc0:	61f8      	str	r0, [r7, #28]
          break;
 8003fc2:	e019      	b.n	8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd0:	d10f      	bne.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8003fd2:	4b68      	ldr	r3, [pc, #416]	@ (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003fd4:	61fb      	str	r3, [r7, #28]
          break;
 8003fd6:	e00c      	b.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fd8:	4b65      	ldr	r3, [pc, #404]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d107      	bne.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8003fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fea:	61fb      	str	r3, [r7, #28]
          break;
 8003fec:	e003      	b.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8003fee:	bf00      	nop
 8003ff0:	e216      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ff2:	bf00      	nop
 8003ff4:	e214      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ff6:	bf00      	nop
        break;
 8003ff8:	e212      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004000:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004004:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800400c:	d025      	beq.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004014:	d82c      	bhi.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800401c:	d013      	beq.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004024:	d824      	bhi.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d004      	beq.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004032:	d004      	beq.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8004034:	e01c      	b.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004036:	f7ff f919 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 800403a:	61f8      	str	r0, [r7, #28]
          break;
 800403c:	e01d      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800403e:	f7ff f87d 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8004042:	61f8      	str	r0, [r7, #28]
          break;
 8004044:	e019      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004046:	4b4a      	ldr	r3, [pc, #296]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004052:	d10f      	bne.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8004054:	4b47      	ldr	r3, [pc, #284]	@ (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004056:	61fb      	str	r3, [r7, #28]
          break;
 8004058:	e00c      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800405a:	4b45      	ldr	r3, [pc, #276]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b02      	cmp	r3, #2
 8004066:	d107      	bne.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004068:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800406c:	61fb      	str	r3, [r7, #28]
          break;
 800406e:	e003      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8004070:	bf00      	nop
 8004072:	e1d5      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004074:	bf00      	nop
 8004076:	e1d3      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004078:	bf00      	nop
        break;
 800407a:	e1d1      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800407c:	4b3c      	ldr	r3, [pc, #240]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004082:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004086:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800408e:	d00c      	beq.n	80040aa <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004096:	d864      	bhi.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800409e:	d008      	beq.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040a6:	d030      	beq.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80040a8:	e05b      	b.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80040aa:	f7ff f847 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80040ae:	61f8      	str	r0, [r7, #28]
          break;
 80040b0:	e05c      	b.n	800416c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80040b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040be:	d152      	bne.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80040c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d04c      	beq.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80040cc:	4b28      	ldr	r3, [pc, #160]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	0a1b      	lsrs	r3, r3, #8
 80040d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040d6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	fb03 f202 	mul.w	r2, r3, r2
 80040e0:	4b23      	ldr	r3, [pc, #140]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	3301      	adds	r3, #1
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80040f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	0e5b      	lsrs	r3, r3, #25
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	3301      	adds	r3, #1
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	fbb2 f3f3 	udiv	r3, r2, r3
 8004106:	61fb      	str	r3, [r7, #28]
          break;
 8004108:	e02d      	b.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800410a:	4b19      	ldr	r3, [pc, #100]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004116:	d128      	bne.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004118:	4b15      	ldr	r3, [pc, #84]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d022      	beq.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004124:	4b12      	ldr	r3, [pc, #72]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800412e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	fb03 f202 	mul.w	r2, r3, r2
 8004138:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	3301      	adds	r3, #1
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800414a:	4b09      	ldr	r3, [pc, #36]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	0e5b      	lsrs	r3, r3, #25
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	3301      	adds	r3, #1
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	fbb2 f3f3 	udiv	r3, r2, r3
 800415e:	61fb      	str	r3, [r7, #28]
          break;
 8004160:	e003      	b.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8004162:	bf00      	nop
 8004164:	e15c      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004166:	bf00      	nop
 8004168:	e15a      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800416a:	bf00      	nop
        break;
 800416c:	e158      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800416e:	bf00      	nop
 8004170:	40021000 	.word	0x40021000
 8004174:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004178:	4b9d      	ldr	r3, [pc, #628]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004182:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d103      	bne.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800418a:	f7ff f885 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 800418e:	61f8      	str	r0, [r7, #28]
        break;
 8004190:	e146      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004192:	f7fe ffd3 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8004196:	61f8      	str	r0, [r7, #28]
        break;
 8004198:	e142      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800419a:	4b95      	ldr	r3, [pc, #596]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80041a4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ac:	d013      	beq.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041b4:	d819      	bhi.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c2:	d004      	beq.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80041c4:	e011      	b.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041c6:	f7ff f851 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 80041ca:	61f8      	str	r0, [r7, #28]
          break;
 80041cc:	e010      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80041ce:	f7fe ffb5 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80041d2:	61f8      	str	r0, [r7, #28]
          break;
 80041d4:	e00c      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041d6:	4b86      	ldr	r3, [pc, #536]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e2:	d104      	bne.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80041e4:	4b83      	ldr	r3, [pc, #524]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80041e6:	61fb      	str	r3, [r7, #28]
          break;
 80041e8:	e001      	b.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80041ea:	bf00      	nop
 80041ec:	e118      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041ee:	bf00      	nop
        break;
 80041f0:	e116      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80041f2:	4b7f      	ldr	r3, [pc, #508]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80041fc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004204:	d013      	beq.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800420c:	d819      	bhi.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800421a:	d004      	beq.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 800421c:	e011      	b.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800421e:	f7ff f825 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8004222:	61f8      	str	r0, [r7, #28]
          break;
 8004224:	e010      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004226:	f7fe ff89 	bl	800313c <HAL_RCC_GetSysClockFreq>
 800422a:	61f8      	str	r0, [r7, #28]
          break;
 800422c:	e00c      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800422e:	4b70      	ldr	r3, [pc, #448]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423a:	d104      	bne.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 800423c:	4b6d      	ldr	r3, [pc, #436]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800423e:	61fb      	str	r3, [r7, #28]
          break;
 8004240:	e001      	b.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8004242:	bf00      	nop
 8004244:	e0ec      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004246:	bf00      	nop
        break;
 8004248:	e0ea      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800424a:	4b69      	ldr	r3, [pc, #420]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004250:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004254:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800425c:	d013      	beq.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004264:	d819      	bhi.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d004      	beq.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004272:	d004      	beq.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8004274:	e011      	b.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004276:	f7fe fff9 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 800427a:	61f8      	str	r0, [r7, #28]
          break;
 800427c:	e010      	b.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800427e:	f7fe ff5d 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8004282:	61f8      	str	r0, [r7, #28]
          break;
 8004284:	e00c      	b.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004286:	4b5a      	ldr	r3, [pc, #360]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004292:	d104      	bne.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004294:	4b57      	ldr	r3, [pc, #348]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004296:	61fb      	str	r3, [r7, #28]
          break;
 8004298:	e001      	b.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800429a:	bf00      	nop
 800429c:	e0c0      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800429e:	bf00      	nop
        break;
 80042a0:	e0be      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80042a2:	4b53      	ldr	r3, [pc, #332]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80042ac:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80042b4:	d02c      	beq.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80042bc:	d833      	bhi.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042c4:	d01a      	beq.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042cc:	d82b      	bhi.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d004      	beq.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042da:	d004      	beq.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80042dc:	e023      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042de:	f7fe ffc5 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 80042e2:	61f8      	str	r0, [r7, #28]
          break;
 80042e4:	e026      	b.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80042e6:	4b42      	ldr	r3, [pc, #264]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d11a      	bne.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80042f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80042f8:	61fb      	str	r3, [r7, #28]
          break;
 80042fa:	e016      	b.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042fc:	4b3c      	ldr	r3, [pc, #240]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004308:	d111      	bne.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800430a:	4b3a      	ldr	r3, [pc, #232]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800430c:	61fb      	str	r3, [r7, #28]
          break;
 800430e:	e00e      	b.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004310:	4b37      	ldr	r3, [pc, #220]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b02      	cmp	r3, #2
 800431c:	d109      	bne.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800431e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004322:	61fb      	str	r3, [r7, #28]
          break;
 8004324:	e005      	b.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8004326:	bf00      	nop
 8004328:	e07a      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800432a:	bf00      	nop
 800432c:	e078      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800432e:	bf00      	nop
 8004330:	e076      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004332:	bf00      	nop
        break;
 8004334:	e074      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004336:	4b2e      	ldr	r3, [pc, #184]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004340:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004348:	d02c      	beq.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004350:	d833      	bhi.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004358:	d01a      	beq.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004360:	d82b      	bhi.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800436e:	d004      	beq.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004370:	e023      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004372:	f7fe ff7b 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8004376:	61f8      	str	r0, [r7, #28]
          break;
 8004378:	e026      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800437a:	4b1d      	ldr	r3, [pc, #116]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800437c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b02      	cmp	r3, #2
 8004386:	d11a      	bne.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004388:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800438c:	61fb      	str	r3, [r7, #28]
          break;
 800438e:	e016      	b.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004390:	4b17      	ldr	r3, [pc, #92]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439c:	d111      	bne.n	80043c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800439e:	4b15      	ldr	r3, [pc, #84]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80043a0:	61fb      	str	r3, [r7, #28]
          break;
 80043a2:	e00e      	b.n	80043c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043a4:	4b12      	ldr	r3, [pc, #72]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d109      	bne.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 80043b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043b6:	61fb      	str	r3, [r7, #28]
          break;
 80043b8:	e005      	b.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 80043ba:	bf00      	nop
 80043bc:	e030      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043be:	bf00      	nop
 80043c0:	e02e      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043c2:	bf00      	nop
 80043c4:	e02c      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043c6:	bf00      	nop
        break;
 80043c8:	e02a      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80043ca:	4b09      	ldr	r3, [pc, #36]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80043d4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d004      	beq.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043e2:	d009      	beq.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80043e4:	e012      	b.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043e6:	f7fe ff41 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 80043ea:	61f8      	str	r0, [r7, #28]
          break;
 80043ec:	e00e      	b.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043f8:	4b0c      	ldr	r3, [pc, #48]	@ (800442c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004404:	d101      	bne.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004406:	4b0a      	ldr	r3, [pc, #40]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004408:	61fb      	str	r3, [r7, #28]
          break;
 800440a:	bf00      	nop
        break;
 800440c:	e008      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800440e:	bf00      	nop
 8004410:	e006      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004412:	bf00      	nop
 8004414:	e004      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004416:	bf00      	nop
 8004418:	e002      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800441a:	bf00      	nop
 800441c:	e000      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800441e:	bf00      	nop
    }
  }

  return(frequency);
 8004420:	69fb      	ldr	r3, [r7, #28]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000
 8004430:	00f42400 	.word	0x00f42400

08004434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004442:	4b75      	ldr	r3, [pc, #468]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d018      	beq.n	8004480 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800444e:	4b72      	ldr	r3, [pc, #456]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0203 	and.w	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d10d      	bne.n	800447a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
       ||
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004466:	4b6c      	ldr	r3, [pc, #432]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
       ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d047      	beq.n	800450a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
 800447e:	e044      	b.n	800450a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d018      	beq.n	80044ba <RCCEx_PLLSAI1_Config+0x86>
 8004488:	2b03      	cmp	r3, #3
 800448a:	d825      	bhi.n	80044d8 <RCCEx_PLLSAI1_Config+0xa4>
 800448c:	2b01      	cmp	r3, #1
 800448e:	d002      	beq.n	8004496 <RCCEx_PLLSAI1_Config+0x62>
 8004490:	2b02      	cmp	r3, #2
 8004492:	d009      	beq.n	80044a8 <RCCEx_PLLSAI1_Config+0x74>
 8004494:	e020      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004496:	4b60      	ldr	r3, [pc, #384]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d11d      	bne.n	80044de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a6:	e01a      	b.n	80044de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044a8:	4b5b      	ldr	r3, [pc, #364]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d116      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b8:	e013      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044ba:	4b57      	ldr	r3, [pc, #348]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10f      	bne.n	80044e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044c6:	4b54      	ldr	r3, [pc, #336]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044d6:	e006      	b.n	80044e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
      break;
 80044dc:	e004      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044de:	bf00      	nop
 80044e0:	e002      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044e2:	bf00      	nop
 80044e4:	e000      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6819      	ldr	r1, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	3b01      	subs	r3, #1
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	430b      	orrs	r3, r1
 8004504:	4944      	ldr	r1, [pc, #272]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004506:	4313      	orrs	r3, r2
 8004508:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d17d      	bne.n	800460c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004510:	4b41      	ldr	r3, [pc, #260]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a40      	ldr	r2, [pc, #256]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004516:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800451a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800451c:	f7fc fe34 	bl	8001188 <HAL_GetTick>
 8004520:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004522:	e009      	b.n	8004538 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004524:	f7fc fe30 	bl	8001188 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d902      	bls.n	8004538 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	73fb      	strb	r3, [r7, #15]
        break;
 8004536:	e005      	b.n	8004544 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004538:	4b37      	ldr	r3, [pc, #220]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1ef      	bne.n	8004524 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d160      	bne.n	800460c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d111      	bne.n	8004574 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004550:	4b31      	ldr	r3, [pc, #196]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6892      	ldr	r2, [r2, #8]
 8004560:	0211      	lsls	r1, r2, #8
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68d2      	ldr	r2, [r2, #12]
 8004566:	0912      	lsrs	r2, r2, #4
 8004568:	0452      	lsls	r2, r2, #17
 800456a:	430a      	orrs	r2, r1
 800456c:	492a      	ldr	r1, [pc, #168]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800456e:	4313      	orrs	r3, r2
 8004570:	610b      	str	r3, [r1, #16]
 8004572:	e027      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d112      	bne.n	80045a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800457a:	4b27      	ldr	r3, [pc, #156]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004582:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6892      	ldr	r2, [r2, #8]
 800458a:	0211      	lsls	r1, r2, #8
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6912      	ldr	r2, [r2, #16]
 8004590:	0852      	lsrs	r2, r2, #1
 8004592:	3a01      	subs	r2, #1
 8004594:	0552      	lsls	r2, r2, #21
 8004596:	430a      	orrs	r2, r1
 8004598:	491f      	ldr	r1, [pc, #124]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459a:	4313      	orrs	r3, r2
 800459c:	610b      	str	r3, [r1, #16]
 800459e:	e011      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6892      	ldr	r2, [r2, #8]
 80045b0:	0211      	lsls	r1, r2, #8
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6952      	ldr	r2, [r2, #20]
 80045b6:	0852      	lsrs	r2, r2, #1
 80045b8:	3a01      	subs	r2, #1
 80045ba:	0652      	lsls	r2, r2, #25
 80045bc:	430a      	orrs	r2, r1
 80045be:	4916      	ldr	r1, [pc, #88]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045c4:	4b14      	ldr	r3, [pc, #80]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a13      	ldr	r2, [pc, #76]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d0:	f7fc fdda 	bl	8001188 <HAL_GetTick>
 80045d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d6:	e009      	b.n	80045ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045d8:	f7fc fdd6 	bl	8001188 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d902      	bls.n	80045ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	73fb      	strb	r3, [r7, #15]
          break;
 80045ea:	e005      	b.n	80045f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ef      	beq.n	80045d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045fe:	4b06      	ldr	r3, [pc, #24]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	4904      	ldr	r1, [pc, #16]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004608:	4313      	orrs	r3, r2
 800460a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000

0800461c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800462a:	4b6a      	ldr	r3, [pc, #424]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d018      	beq.n	8004668 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004636:	4b67      	ldr	r3, [pc, #412]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f003 0203 	and.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d10d      	bne.n	8004662 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
       ||
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800464e:	4b61      	ldr	r3, [pc, #388]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
       ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d047      	beq.n	80046f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	e044      	b.n	80046f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d018      	beq.n	80046a2 <RCCEx_PLLSAI2_Config+0x86>
 8004670:	2b03      	cmp	r3, #3
 8004672:	d825      	bhi.n	80046c0 <RCCEx_PLLSAI2_Config+0xa4>
 8004674:	2b01      	cmp	r3, #1
 8004676:	d002      	beq.n	800467e <RCCEx_PLLSAI2_Config+0x62>
 8004678:	2b02      	cmp	r3, #2
 800467a:	d009      	beq.n	8004690 <RCCEx_PLLSAI2_Config+0x74>
 800467c:	e020      	b.n	80046c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800467e:	4b55      	ldr	r3, [pc, #340]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d11d      	bne.n	80046c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800468e:	e01a      	b.n	80046c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004690:	4b50      	ldr	r3, [pc, #320]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004698:	2b00      	cmp	r3, #0
 800469a:	d116      	bne.n	80046ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a0:	e013      	b.n	80046ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046a2:	4b4c      	ldr	r3, [pc, #304]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046ae:	4b49      	ldr	r3, [pc, #292]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046be:	e006      	b.n	80046ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
      break;
 80046c4:	e004      	b.n	80046d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046c6:	bf00      	nop
 80046c8:	e002      	b.n	80046d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10d      	bne.n	80046f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046d6:	4b3f      	ldr	r3, [pc, #252]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6819      	ldr	r1, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	430b      	orrs	r3, r1
 80046ec:	4939      	ldr	r1, [pc, #228]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d167      	bne.n	80047c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046f8:	4b36      	ldr	r3, [pc, #216]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a35      	ldr	r2, [pc, #212]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004704:	f7fc fd40 	bl	8001188 <HAL_GetTick>
 8004708:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800470a:	e009      	b.n	8004720 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800470c:	f7fc fd3c 	bl	8001188 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d902      	bls.n	8004720 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	73fb      	strb	r3, [r7, #15]
        break;
 800471e:	e005      	b.n	800472c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004720:	4b2c      	ldr	r3, [pc, #176]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ef      	bne.n	800470c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d14a      	bne.n	80047c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d111      	bne.n	800475c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004738:	4b26      	ldr	r3, [pc, #152]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6892      	ldr	r2, [r2, #8]
 8004748:	0211      	lsls	r1, r2, #8
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68d2      	ldr	r2, [r2, #12]
 800474e:	0912      	lsrs	r2, r2, #4
 8004750:	0452      	lsls	r2, r2, #17
 8004752:	430a      	orrs	r2, r1
 8004754:	491f      	ldr	r1, [pc, #124]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004756:	4313      	orrs	r3, r2
 8004758:	614b      	str	r3, [r1, #20]
 800475a:	e011      	b.n	8004780 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800475c:	4b1d      	ldr	r3, [pc, #116]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004764:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6892      	ldr	r2, [r2, #8]
 800476c:	0211      	lsls	r1, r2, #8
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6912      	ldr	r2, [r2, #16]
 8004772:	0852      	lsrs	r2, r2, #1
 8004774:	3a01      	subs	r2, #1
 8004776:	0652      	lsls	r2, r2, #25
 8004778:	430a      	orrs	r2, r1
 800477a:	4916      	ldr	r1, [pc, #88]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004780:	4b14      	ldr	r3, [pc, #80]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a13      	ldr	r2, [pc, #76]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800478a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fc fcfc 	bl	8001188 <HAL_GetTick>
 8004790:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004792:	e009      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004794:	f7fc fcf8 	bl	8001188 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d902      	bls.n	80047a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	73fb      	strb	r3, [r7, #15]
          break;
 80047a6:	e005      	b.n	80047b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047a8:	4b0a      	ldr	r3, [pc, #40]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ef      	beq.n	8004794 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047ba:	4b06      	ldr	r3, [pc, #24]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	4904      	ldr	r1, [pc, #16]	@ (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40021000 	.word	0x40021000

080047d8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80047d8:	b480      	push	{r7}
 80047da:	b089      	sub	sp, #36	@ 0x24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047f4:	d10c      	bne.n	8004810 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80047f6:	4b6e      	ldr	r3, [pc, #440]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004800:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004808:	d112      	bne.n	8004830 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800480a:	4b6a      	ldr	r3, [pc, #424]	@ (80049b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	e00f      	b.n	8004830 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004816:	d10b      	bne.n	8004830 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004818:	4b65      	ldr	r3, [pc, #404]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004822:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800482a:	d101      	bne.n	8004830 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800482c:	4b61      	ldr	r3, [pc, #388]	@ (80049b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800482e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f040 80b4 	bne.w	80049a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004842:	d003      	beq.n	800484c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800484a:	d135      	bne.n	80048b8 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800484c:	4b58      	ldr	r3, [pc, #352]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004854:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004858:	f040 80a1 	bne.w	800499e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800485c:	4b54      	ldr	r3, [pc, #336]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 809a 	beq.w	800499e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800486a:	4b51      	ldr	r3, [pc, #324]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	091b      	lsrs	r3, r3, #4
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	3301      	adds	r3, #1
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800487e:	4b4c      	ldr	r3, [pc, #304]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004888:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004890:	4b47      	ldr	r3, [pc, #284]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800489c:	2311      	movs	r3, #17
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	e001      	b.n	80048a6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80048a2:	2307      	movs	r3, #7
 80048a4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	fb03 f202 	mul.w	r2, r3, r2
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80048b6:	e072      	b.n	800499e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d133      	bne.n	8004926 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80048be:	4b3c      	ldr	r3, [pc, #240]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048ca:	d169      	bne.n	80049a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80048cc:	4b38      	ldr	r3, [pc, #224]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d063      	beq.n	80049a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80048d8:	4b35      	ldr	r3, [pc, #212]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	3301      	adds	r3, #1
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ea:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80048ec:	4b30      	ldr	r3, [pc, #192]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	0a1b      	lsrs	r3, r3, #8
 80048f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048f6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80048fe:	4b2c      	ldr	r3, [pc, #176]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800490a:	2311      	movs	r3, #17
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e001      	b.n	8004914 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004910:	2307      	movs	r3, #7
 8004912:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	fb03 f202 	mul.w	r2, r3, r2
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	e03c      	b.n	80049a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800492c:	d003      	beq.n	8004936 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004934:	d134      	bne.n	80049a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004936:	4b1e      	ldr	r3, [pc, #120]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800493e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004942:	d12d      	bne.n	80049a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004944:	4b1a      	ldr	r3, [pc, #104]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d027      	beq.n	80049a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004950:	4b17      	ldr	r3, [pc, #92]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	091b      	lsrs	r3, r3, #4
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	3301      	adds	r3, #1
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004964:	4b12      	ldr	r3, [pc, #72]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	0a1b      	lsrs	r3, r3, #8
 800496a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800496e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10a      	bne.n	800498c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004976:	4b0e      	ldr	r3, [pc, #56]	@ (80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004982:	2311      	movs	r3, #17
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	e001      	b.n	800498c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004988:	2307      	movs	r3, #7
 800498a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	fb03 f202 	mul.w	r2, r3, r2
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	fbb2 f3f3 	udiv	r3, r2, r3
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	e000      	b.n	80049a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800499e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80049a0:	69fb      	ldr	r3, [r7, #28]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3724      	adds	r7, #36	@ 0x24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000
 80049b4:	001fff68 	.word	0x001fff68

080049b8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d904      	bls.n	80049d6 <HAL_SAI_InitProtocol+0x1e>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	3b03      	subs	r3, #3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d812      	bhi.n	80049fa <HAL_SAI_InitProtocol+0x42>
 80049d4:	e008      	b.n	80049e8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fba3 	bl	8005128 <SAI_InitI2S>
 80049e2:	4603      	mov	r3, r0
 80049e4:	75fb      	strb	r3, [r7, #23]
      break;
 80049e6:	e00b      	b.n	8004a00 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fc4c 	bl	800528c <SAI_InitPCM>
 80049f4:	4603      	mov	r3, r0
 80049f6:	75fb      	strb	r3, [r7, #23]
      break;
 80049f8:	e002      	b.n	8004a00 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	75fb      	strb	r3, [r7, #23]
      break;
 80049fe:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a00:	7dfb      	ldrb	r3, [r7, #23]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d104      	bne.n	8004a10 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f808 	bl	8004a1c <HAL_SAI_Init>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e155      	b.n	8004cda <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fb fffc 	bl	8000a40 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fca1 	bl	8005390 <SAI_Disable>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e140      	b.n	8004cda <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d00c      	beq.n	8004a82 <HAL_SAI_Init+0x66>
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d80d      	bhi.n	8004a88 <HAL_SAI_Init+0x6c>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <HAL_SAI_Init+0x5a>
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d003      	beq.n	8004a7c <HAL_SAI_Init+0x60>
 8004a74:	e008      	b.n	8004a88 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
      break;
 8004a7a:	e008      	b.n	8004a8e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	61fb      	str	r3, [r7, #28]
      break;
 8004a80:	e005      	b.n	8004a8e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004a82:	2320      	movs	r3, #32
 8004a84:	61fb      	str	r3, [r7, #28]
      break;
 8004a86:	e002      	b.n	8004a8e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]
      break;
 8004a8c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d81d      	bhi.n	8004ad2 <HAL_SAI_Init+0xb6>
 8004a96:	a201      	add	r2, pc, #4	@ (adr r2, 8004a9c <HAL_SAI_Init+0x80>)
 8004a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9c:	08004aad 	.word	0x08004aad
 8004aa0:	08004ab3 	.word	0x08004ab3
 8004aa4:	08004abb 	.word	0x08004abb
 8004aa8:	08004ac3 	.word	0x08004ac3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
      break;
 8004ab0:	e012      	b.n	8004ad8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ab6:	617b      	str	r3, [r7, #20]
      break;
 8004ab8:	e00e      	b.n	8004ad8 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004aba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004abe:	617b      	str	r3, [r7, #20]
      break;
 8004ac0:	e00a      	b.n	8004ad8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004ac2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ac6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	61fb      	str	r3, [r7, #28]
      break;
 8004ad0:	e002      	b.n	8004ad8 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
      break;
 8004ad6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a81      	ldr	r2, [pc, #516]	@ (8004ce4 <HAL_SAI_Init+0x2c8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_SAI_Init+0xd0>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a80      	ldr	r2, [pc, #512]	@ (8004ce8 <HAL_SAI_Init+0x2cc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d103      	bne.n	8004af4 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004aec:	4a7f      	ldr	r2, [pc, #508]	@ (8004cec <HAL_SAI_Init+0x2d0>)
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e002      	b.n	8004afa <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004af4:	4a7e      	ldr	r2, [pc, #504]	@ (8004cf0 <HAL_SAI_Init+0x2d4>)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d041      	beq.n	8004b86 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a77      	ldr	r2, [pc, #476]	@ (8004ce4 <HAL_SAI_Init+0x2c8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d004      	beq.n	8004b16 <HAL_SAI_Init+0xfa>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a75      	ldr	r2, [pc, #468]	@ (8004ce8 <HAL_SAI_Init+0x2cc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d105      	bne.n	8004b22 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004b16:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004b1a:	f7fe ff1d 	bl	8003958 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b1e:	6138      	str	r0, [r7, #16]
 8004b20:	e004      	b.n	8004b2c <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004b22:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004b26:	f7fe ff17 	bl	8003958 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b2a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	461a      	mov	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	025b      	lsls	r3, r3, #9
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a6b      	ldr	r2, [pc, #428]	@ (8004cf4 <HAL_SAI_Init+0x2d8>)
 8004b48:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4c:	08da      	lsrs	r2, r3, #3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004b52:	68f9      	ldr	r1, [r7, #12]
 8004b54:	4b67      	ldr	r3, [pc, #412]	@ (8004cf4 <HAL_SAI_Init+0x2d8>)
 8004b56:	fba3 2301 	umull	r2, r3, r3, r1
 8004b5a:	08da      	lsrs	r2, r3, #3
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	1aca      	subs	r2, r1, r3
 8004b66:	2a08      	cmp	r2, #8
 8004b68:	d904      	bls.n	8004b74 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d104      	bne.n	8004b86 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	085a      	lsrs	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_SAI_Init+0x17a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d109      	bne.n	8004baa <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_SAI_Init+0x186>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e001      	b.n	8004ba6 <HAL_SAI_Init+0x18a>
 8004ba2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	e008      	b.n	8004bbc <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d102      	bne.n	8004bb8 <HAL_SAI_Init+0x19c>
 8004bb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bb6:	e000      	b.n	8004bba <HAL_SAI_Init+0x19e>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6819      	ldr	r1, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8004cf8 <HAL_SAI_Init+0x2dc>)
 8004bc8:	400b      	ands	r3, r1
 8004bca:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6819      	ldr	r1, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bda:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004be0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be6:	431a      	orrs	r2, r3
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8004bf4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c00:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	051b      	lsls	r3, r3, #20
 8004c08:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004c20:	f023 030f 	bic.w	r3, r3, #15
 8004c24:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6859      	ldr	r1, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699a      	ldr	r2, [r3, #24]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6899      	ldr	r1, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8004cfc <HAL_SAI_Init+0x2e0>)
 8004c50:	400b      	ands	r3, r1
 8004c52:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6899      	ldr	r1, [r3, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c64:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8004c6a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004c70:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c76:	3b01      	subs	r3, #1
 8004c78:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004c7a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68d9      	ldr	r1, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8004c92:	400b      	ands	r3, r1
 8004c94:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68d9      	ldr	r1, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004caa:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004cac:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40015404 	.word	0x40015404
 8004ce8:	40015424 	.word	0x40015424
 8004cec:	40015400 	.word	0x40015400
 8004cf0:	40015800 	.word	0x40015800
 8004cf4:	cccccccd 	.word	0xcccccccd
 8004cf8:	ff05c010 	.word	0xff05c010
 8004cfc:	fff88000 	.word	0xfff88000

08004d00 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_SAI_Abort+0x1a>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e053      	b.n	8004dc2 <HAL_SAI_Abort+0xc2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fb34 	bl	8005390 <SAI_Disable>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d40:	d125      	bne.n	8004d8e <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004d50:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b12      	cmp	r3, #18
 8004d5c:	d108      	bne.n	8004d70 <HAL_SAI_Abort+0x70>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d004      	beq.n	8004d70 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fc fbe2 	bl	8001534 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b22      	cmp	r3, #34	@ 0x22
 8004d7a:	d108      	bne.n	8004d8e <HAL_SAI_Abort+0x8e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d004      	beq.n	8004d8e <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fc fbd3 	bl	8001534 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d9e:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0208 	orr.w	r2, r2, #8
 8004dae:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8192 	beq.w	8005106 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d009      	beq.n	8004e18 <HAL_SAI_IRQHandler+0x4c>
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d004      	beq.n	8004e18 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	4798      	blx	r3
 8004e16:	e176      	b.n	8005106 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01e      	beq.n	8004e60 <HAL_SAI_IRQHandler+0x94>
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d019      	beq.n	8004e60 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2201      	movs	r2, #1
 8004e32:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b22      	cmp	r3, #34	@ 0x22
 8004e3e:	d101      	bne.n	8004e44 <HAL_SAI_IRQHandler+0x78>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e000      	b.n	8004e46 <HAL_SAI_IRQHandler+0x7a>
 8004e44:	2302      	movs	r3, #2
 8004e46:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f95b 	bl	8005114 <HAL_SAI_ErrorCallback>
 8004e5e:	e152      	b.n	8005106 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d011      	beq.n	8004e8e <HAL_SAI_IRQHandler+0xc2>
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00c      	beq.n	8004e8e <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8140 	beq.w	8005106 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e8a:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8004e8c:	e13b      	b.n	8005106 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d055      	beq.n	8004f44 <HAL_SAI_IRQHandler+0x178>
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d050      	beq.n	8004f44 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eb0:	f043 0204 	orr.w	r2, r3, #4
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d038      	beq.n	8004f36 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d016      	beq.n	8004efa <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ed0:	4a8f      	ldr	r2, [pc, #572]	@ (8005110 <HAL_SAI_IRQHandler+0x344>)
 8004ed2:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fc fb69 	bl	80015b0 <HAL_DMA_Abort_IT>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f90d 	bl	8005114 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80fc 	beq.w	80050fc <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f08:	4a81      	ldr	r2, [pc, #516]	@ (8005110 <HAL_SAI_IRQHandler+0x344>)
 8004f0a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fc fb4d 	bl	80015b0 <HAL_DMA_Abort_IT>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80ef 	beq.w	80050fc <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f8f0 	bl	8005114 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f34:	e0e2      	b.n	80050fc <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff fee2 	bl	8004d00 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f8e9 	bl	8005114 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f42:	e0db      	b.n	80050fc <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d055      	beq.n	8004ffa <HAL_SAI_IRQHandler+0x22e>
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d050      	beq.n	8004ffa <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2240      	movs	r2, #64	@ 0x40
 8004f5e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f66:	f043 0208 	orr.w	r2, r3, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d038      	beq.n	8004fec <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d016      	beq.n	8004fb0 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f86:	4a62      	ldr	r2, [pc, #392]	@ (8005110 <HAL_SAI_IRQHandler+0x344>)
 8004f88:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fc fb0e 	bl	80015b0 <HAL_DMA_Abort_IT>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fa0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8b2 	bl	8005114 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80a3 	beq.w	8005100 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fbe:	4a54      	ldr	r2, [pc, #336]	@ (8005110 <HAL_SAI_IRQHandler+0x344>)
 8004fc0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fc faf2 	bl	80015b0 <HAL_DMA_Abort_IT>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8096 	beq.w	8005100 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fda:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f895 	bl	8005114 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004fea:	e089      	b.n	8005100 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fe87 	bl	8004d00 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f88e 	bl	8005114 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004ff8:	e082      	b.n	8005100 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d061      	beq.n	80050c8 <HAL_SAI_IRQHandler+0x2fc>
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b00      	cmp	r3, #0
 800500c:	d05c      	beq.n	80050c8 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2204      	movs	r2, #4
 8005014:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800501c:	f043 0220 	orr.w	r2, r3, #32
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d036      	beq.n	800509e <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d016      	beq.n	8005066 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800503c:	4a34      	ldr	r2, [pc, #208]	@ (8005110 <HAL_SAI_IRQHandler+0x344>)
 800503e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005044:	4618      	mov	r0, r3
 8005046:	f7fc fab3 	bl	80015b0 <HAL_DMA_Abort_IT>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005056:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f857 	bl	8005114 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506a:	2b00      	cmp	r3, #0
 800506c:	d04a      	beq.n	8005104 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005072:	4a27      	ldr	r2, [pc, #156]	@ (8005110 <HAL_SAI_IRQHandler+0x344>)
 8005074:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507a:	4618      	mov	r0, r3
 800507c:	f7fc fa98 	bl	80015b0 <HAL_DMA_Abort_IT>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d03e      	beq.n	8005104 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800508c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f83c 	bl	8005114 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800509c:	e032      	b.n	8005104 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050ae:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f827 	bl	8005114 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80050c6:	e01d      	b.n	8005104 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d019      	beq.n	8005106 <HAL_SAI_IRQHandler+0x33a>
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d014      	beq.n	8005106 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2210      	movs	r2, #16
 80050e2:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ea:	f043 0210 	orr.w	r2, r3, #16
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f80d 	bl	8005114 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80050fa:	e004      	b.n	8005106 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80050fc:	bf00      	nop
 80050fe:	e002      	b.n	8005106 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005100:	bf00      	nop
 8005102:	e000      	b.n	8005106 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005104:	bf00      	nop
}
 8005106:	bf00      	nop
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	08005405 	.word	0x08005405

08005114 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <SAI_InitI2S+0x2e>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d103      	bne.n	800515e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800515c:	e002      	b.n	8005164 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800516a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005172:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e077      	b.n	800527e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d107      	bne.n	80051a4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80051a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80051a2:	e006      	b.n	80051b2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80051aa:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d84f      	bhi.n	8005258 <SAI_InitI2S+0x130>
 80051b8:	a201      	add	r2, pc, #4	@ (adr r2, 80051c0 <SAI_InitI2S+0x98>)
 80051ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051be:	bf00      	nop
 80051c0:	080051d1 	.word	0x080051d1
 80051c4:	080051f3 	.word	0x080051f3
 80051c8:	08005215 	.word	0x08005215
 80051cc:	08005237 	.word	0x08005237
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2280      	movs	r2, #128	@ 0x80
 80051d4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	085b      	lsrs	r3, r3, #1
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	011a      	lsls	r2, r3, #4
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2240      	movs	r2, #64	@ 0x40
 80051ee:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80051f0:	e035      	b.n	800525e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2280      	movs	r2, #128	@ 0x80
 80051f6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	019a      	lsls	r2, r3, #6
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2280      	movs	r2, #128	@ 0x80
 8005210:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005212:	e024      	b.n	800525e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	22c0      	movs	r2, #192	@ 0xc0
 8005218:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	019a      	lsls	r2, r3, #6
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2280      	movs	r2, #128	@ 0x80
 8005232:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005234:	e013      	b.n	800525e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	22e0      	movs	r2, #224	@ 0xe0
 800523a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	085b      	lsrs	r3, r3, #1
 8005240:	019a      	lsls	r2, r3, #6
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2280      	movs	r2, #128	@ 0x80
 8005254:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005256:	e002      	b.n	800525e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	75fb      	strb	r3, [r7, #23]
      break;
 800525c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d10b      	bne.n	800527c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d102      	bne.n	8005270 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2210      	movs	r2, #16
 800526e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d102      	bne.n	800527c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2208      	movs	r2, #8
 800527a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 800527c:	7dfb      	ldrb	r3, [r7, #23]
}
 800527e:	4618      	mov	r0, r3
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop

0800528c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <SAI_InitPCM+0x2e>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d103      	bne.n	80052c2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052c0:	e002      	b.n	80052c8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80052d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80052dc:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052f0:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d103      	bne.n	8005300 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80052fe:	e002      	b.n	8005306 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	220d      	movs	r2, #13
 8005304:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d837      	bhi.n	800537c <SAI_InitPCM+0xf0>
 800530c:	a201      	add	r2, pc, #4	@ (adr r2, 8005314 <SAI_InitPCM+0x88>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	08005325 	.word	0x08005325
 8005318:	0800533b 	.word	0x0800533b
 800531c:	08005351 	.word	0x08005351
 8005320:	08005367 	.word	0x08005367
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2280      	movs	r2, #128	@ 0x80
 8005328:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	011a      	lsls	r2, r3, #4
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2240      	movs	r2, #64	@ 0x40
 8005336:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005338:	e023      	b.n	8005382 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2280      	movs	r2, #128	@ 0x80
 800533e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2280      	movs	r2, #128	@ 0x80
 800534c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800534e:	e018      	b.n	8005382 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	22c0      	movs	r2, #192	@ 0xc0
 8005354:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2280      	movs	r2, #128	@ 0x80
 8005362:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005364:	e00d      	b.n	8005382 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	22e0      	movs	r2, #224	@ 0xe0
 800536a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2280      	movs	r2, #128	@ 0x80
 8005378:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800537a:	e002      	b.n	8005382 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	75fb      	strb	r3, [r7, #23]
      break;
 8005380:	bf00      	nop
  }

  return status;
 8005382:	7dfb      	ldrb	r3, [r7, #23]
}
 8005384:	4618      	mov	r0, r3
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005398:	4b18      	ldr	r3, [pc, #96]	@ (80053fc <SAI_Disable+0x6c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a18      	ldr	r2, [pc, #96]	@ (8005400 <SAI_Disable+0x70>)
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	0b1b      	lsrs	r3, r3, #12
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80053ba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10a      	bne.n	80053d8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	72fb      	strb	r3, [r7, #11]
      break;
 80053d6:	e009      	b.n	80053ec <SAI_Disable+0x5c>
    }
    count--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3b01      	subs	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e7      	bne.n	80053bc <SAI_Disable+0x2c>

  return status;
 80053ec:	7afb      	ldrb	r3, [r7, #11]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	20000000 	.word	0x20000000
 8005400:	95cbec1b 	.word	0x95cbec1b

08005404 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005420:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2200      	movs	r2, #0
 8005428:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005432:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800543a:	2b20      	cmp	r3, #32
 800543c:	d00a      	beq.n	8005454 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7ff ffa6 	bl	8005390 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0208 	orr.w	r2, r2, #8
 8005452:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f7ff fe55 	bl	8005114 <HAL_SAI_ErrorCallback>
#endif
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b084      	sub	sp, #16
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e095      	b.n	80055b0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	2b00      	cmp	r3, #0
 800548a:	d108      	bne.n	800549e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005494:	d009      	beq.n	80054aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	61da      	str	r2, [r3, #28]
 800549c:	e005      	b.n	80054aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d106      	bne.n	80054ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7fb fc4f 	bl	8000d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054ea:	d902      	bls.n	80054f2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e002      	b.n	80054f8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80054f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005500:	d007      	beq.n	8005512 <HAL_SPI_Init+0xa0>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800550a:	d002      	beq.n	8005512 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005554:	ea42 0103 	orr.w	r1, r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	0c1b      	lsrs	r3, r3, #16
 800556e:	f003 0204 	and.w	r2, r3, #4
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800558e:	ea42 0103 	orr.w	r1, r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	@ 0x28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055c6:	2301      	movs	r3, #1
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055ca:	f7fb fddd 	bl	8001188 <HAL_GetTick>
 80055ce:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055d6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80055de:	887b      	ldrh	r3, [r7, #2]
 80055e0:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80055e2:	887b      	ldrh	r3, [r7, #2]
 80055e4:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055e6:	7ffb      	ldrb	r3, [r7, #31]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d00c      	beq.n	8005606 <HAL_SPI_TransmitReceive+0x4e>
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055f2:	d106      	bne.n	8005602 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d102      	bne.n	8005602 <HAL_SPI_TransmitReceive+0x4a>
 80055fc:	7ffb      	ldrb	r3, [r7, #31]
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d001      	beq.n	8005606 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005602:	2302      	movs	r3, #2
 8005604:	e1f3      	b.n	80059ee <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_SPI_TransmitReceive+0x60>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <HAL_SPI_TransmitReceive+0x60>
 8005612:	887b      	ldrh	r3, [r7, #2]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e1e8      	b.n	80059ee <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_SPI_TransmitReceive+0x72>
 8005626:	2302      	movs	r3, #2
 8005628:	e1e1      	b.n	80059ee <HAL_SPI_TransmitReceive+0x436>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b04      	cmp	r3, #4
 800563c:	d003      	beq.n	8005646 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2205      	movs	r2, #5
 8005642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	887a      	ldrh	r2, [r7, #2]
 8005656:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	887a      	ldrh	r2, [r7, #2]
 800565e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	887a      	ldrh	r2, [r7, #2]
 800566c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	887a      	ldrh	r2, [r7, #2]
 8005672:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005688:	d802      	bhi.n	8005690 <HAL_SPI_TransmitReceive+0xd8>
 800568a:	8abb      	ldrh	r3, [r7, #20]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d908      	bls.n	80056a2 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800569e:	605a      	str	r2, [r3, #4]
 80056a0:	e007      	b.n	80056b2 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056bc:	2b40      	cmp	r3, #64	@ 0x40
 80056be:	d007      	beq.n	80056d0 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056d8:	f240 8083 	bls.w	80057e2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <HAL_SPI_TransmitReceive+0x132>
 80056e4:	8afb      	ldrh	r3, [r7, #22]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d16f      	bne.n	80057ca <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ee:	881a      	ldrh	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fa:	1c9a      	adds	r2, r3, #2
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005704:	b29b      	uxth	r3, r3
 8005706:	3b01      	subs	r3, #1
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800570e:	e05c      	b.n	80057ca <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b02      	cmp	r3, #2
 800571c:	d11b      	bne.n	8005756 <HAL_SPI_TransmitReceive+0x19e>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d016      	beq.n	8005756 <HAL_SPI_TransmitReceive+0x19e>
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	2b01      	cmp	r3, #1
 800572c:	d113      	bne.n	8005756 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573e:	1c9a      	adds	r2, r3, #2
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b01      	cmp	r3, #1
 8005762:	d11c      	bne.n	800579e <HAL_SPI_TransmitReceive+0x1e6>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d016      	beq.n	800579e <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577a:	b292      	uxth	r2, r2
 800577c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	1c9a      	adds	r2, r3, #2
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800579a:	2301      	movs	r3, #1
 800579c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800579e:	f7fb fcf3 	bl	8001188 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d80d      	bhi.n	80057ca <HAL_SPI_TransmitReceive+0x212>
 80057ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057b4:	d009      	beq.n	80057ca <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e111      	b.n	80059ee <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d19d      	bne.n	8005710 <HAL_SPI_TransmitReceive+0x158>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d197      	bne.n	8005710 <HAL_SPI_TransmitReceive+0x158>
 80057e0:	e0e5      	b.n	80059ae <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_SPI_TransmitReceive+0x23a>
 80057ea:	8afb      	ldrh	r3, [r7, #22]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	f040 80d1 	bne.w	8005994 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d912      	bls.n	8005822 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005800:	881a      	ldrh	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580c:	1c9a      	adds	r2, r3, #2
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b02      	subs	r3, #2
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005820:	e0b8      	b.n	8005994 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	330c      	adds	r3, #12
 800582c:	7812      	ldrb	r2, [r2, #0]
 800582e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005848:	e0a4      	b.n	8005994 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b02      	cmp	r3, #2
 8005856:	d134      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x30a>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d02f      	beq.n	80058c2 <HAL_SPI_TransmitReceive+0x30a>
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	2b01      	cmp	r3, #1
 8005866:	d12c      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	d912      	bls.n	8005898 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005876:	881a      	ldrh	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005882:	1c9a      	adds	r2, r3, #2
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b02      	subs	r3, #2
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005896:	e012      	b.n	80058be <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	7812      	ldrb	r2, [r2, #0]
 80058a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d148      	bne.n	8005962 <HAL_SPI_TransmitReceive+0x3aa>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d042      	beq.n	8005962 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d923      	bls.n	8005930 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f2:	b292      	uxth	r2, r2
 80058f4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fa:	1c9a      	adds	r2, r3, #2
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b02      	subs	r3, #2
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b01      	cmp	r3, #1
 800591c:	d81f      	bhi.n	800595e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	e016      	b.n	800595e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f103 020c 	add.w	r2, r3, #12
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593c:	7812      	ldrb	r2, [r2, #0]
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800595e:	2301      	movs	r3, #1
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005962:	f7fb fc11 	bl	8001188 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800596e:	429a      	cmp	r2, r3
 8005970:	d803      	bhi.n	800597a <HAL_SPI_TransmitReceive+0x3c2>
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005978:	d102      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x3c8>
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	2b00      	cmp	r3, #0
 800597e:	d109      	bne.n	8005994 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e02c      	b.n	80059ee <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	f47f af55 	bne.w	800584a <HAL_SPI_TransmitReceive+0x292>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f47f af4e 	bne.w	800584a <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059ae:	6a3a      	ldr	r2, [r7, #32]
 80059b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f93e 	bl	8005c34 <SPI_EndRxTxTransaction>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d008      	beq.n	80059d0 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e00e      	b.n	80059ee <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
  }
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3728      	adds	r7, #40	@ 0x28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	4613      	mov	r3, r2
 8005a06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a08:	f7fb fbbe 	bl	8001188 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	4413      	add	r3, r2
 8005a16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a18:	f7fb fbb6 	bl	8001188 <HAL_GetTick>
 8005a1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a1e:	4b39      	ldr	r3, [pc, #228]	@ (8005b04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	015b      	lsls	r3, r3, #5
 8005a24:	0d1b      	lsrs	r3, r3, #20
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a2e:	e054      	b.n	8005ada <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a36:	d050      	beq.n	8005ada <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a38:	f7fb fba6 	bl	8001188 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d902      	bls.n	8005a4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d13d      	bne.n	8005aca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a66:	d111      	bne.n	8005a8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a70:	d004      	beq.n	8005a7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a7a:	d107      	bne.n	8005a8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a94:	d10f      	bne.n	8005ab6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ab4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e017      	b.n	8005afa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d19b      	bne.n	8005a30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20000000 	.word	0x20000000

08005b08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08a      	sub	sp, #40	@ 0x28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b1a:	f7fb fb35 	bl	8001188 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b22:	1a9b      	subs	r3, r3, r2
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	4413      	add	r3, r2
 8005b28:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005b2a:	f7fb fb2d 	bl	8001188 <HAL_GetTick>
 8005b2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b38:	4b3d      	ldr	r3, [pc, #244]	@ (8005c30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	00da      	lsls	r2, r3, #3
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	0d1b      	lsrs	r3, r3, #20
 8005b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b4a:	fb02 f303 	mul.w	r3, r2, r3
 8005b4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b50:	e060      	b.n	8005c14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005b58:	d107      	bne.n	8005b6a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b70:	d050      	beq.n	8005c14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b72:	f7fb fb09 	bl	8001188 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d902      	bls.n	8005b88 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d13d      	bne.n	8005c04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ba0:	d111      	bne.n	8005bc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005baa:	d004      	beq.n	8005bb6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb4:	d107      	bne.n	8005bc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bce:	d10f      	bne.n	8005bf0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e010      	b.n	8005c26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d196      	bne.n	8005b52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3728      	adds	r7, #40	@ 0x28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000000 	.word	0x20000000

08005c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7ff ff5b 	bl	8005b08 <SPI_WaitFifoStateUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c5c:	f043 0220 	orr.w	r2, r3, #32
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e027      	b.n	8005cb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2180      	movs	r1, #128	@ 0x80
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff fec0 	bl	80059f8 <SPI_WaitFlagStateUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d007      	beq.n	8005c8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c82:	f043 0220 	orr.w	r2, r3, #32
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e014      	b.n	8005cb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff ff34 	bl	8005b08 <SPI_WaitFifoStateUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005caa:	f043 0220 	orr.w	r2, r3, #32
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e000      	b.n	8005cb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e040      	b.n	8005d54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d106      	bne.n	8005ce8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fb f95a 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2224      	movs	r2, #36	@ 0x24
 8005cec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fae0 	bl	80062cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f825 	bl	8005d5c <UART_SetConfig>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e01b      	b.n	8005d54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fb5f 	bl	8006410 <UART_CheckIdleState>
 8005d52:	4603      	mov	r3, r0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d60:	b08a      	sub	sp, #40	@ 0x28
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	431a      	orrs	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4ba4      	ldr	r3, [pc, #656]	@ (800601c <UART_SetConfig+0x2c0>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d94:	430b      	orrs	r3, r1
 8005d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a99      	ldr	r2, [pc, #612]	@ (8006020 <UART_SetConfig+0x2c4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a90      	ldr	r2, [pc, #576]	@ (8006024 <UART_SetConfig+0x2c8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d126      	bne.n	8005e34 <UART_SetConfig+0xd8>
 8005de6:	4b90      	ldr	r3, [pc, #576]	@ (8006028 <UART_SetConfig+0x2cc>)
 8005de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d81b      	bhi.n	8005e2c <UART_SetConfig+0xd0>
 8005df4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dfc <UART_SetConfig+0xa0>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e1d 	.word	0x08005e1d
 8005e04:	08005e15 	.word	0x08005e15
 8005e08:	08005e25 	.word	0x08005e25
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e12:	e116      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005e14:	2302      	movs	r3, #2
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e1a:	e112      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e22:	e10e      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005e24:	2308      	movs	r3, #8
 8005e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e2a:	e10a      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e32:	e106      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a7c      	ldr	r2, [pc, #496]	@ (800602c <UART_SetConfig+0x2d0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d138      	bne.n	8005eb0 <UART_SetConfig+0x154>
 8005e3e:	4b7a      	ldr	r3, [pc, #488]	@ (8006028 <UART_SetConfig+0x2cc>)
 8005e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e44:	f003 030c 	and.w	r3, r3, #12
 8005e48:	2b0c      	cmp	r3, #12
 8005e4a:	d82d      	bhi.n	8005ea8 <UART_SetConfig+0x14c>
 8005e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e54 <UART_SetConfig+0xf8>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005e89 	.word	0x08005e89
 8005e58:	08005ea9 	.word	0x08005ea9
 8005e5c:	08005ea9 	.word	0x08005ea9
 8005e60:	08005ea9 	.word	0x08005ea9
 8005e64:	08005e99 	.word	0x08005e99
 8005e68:	08005ea9 	.word	0x08005ea9
 8005e6c:	08005ea9 	.word	0x08005ea9
 8005e70:	08005ea9 	.word	0x08005ea9
 8005e74:	08005e91 	.word	0x08005e91
 8005e78:	08005ea9 	.word	0x08005ea9
 8005e7c:	08005ea9 	.word	0x08005ea9
 8005e80:	08005ea9 	.word	0x08005ea9
 8005e84:	08005ea1 	.word	0x08005ea1
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8e:	e0d8      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005e90:	2302      	movs	r3, #2
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e96:	e0d4      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9e:	e0d0      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005ea0:	2308      	movs	r3, #8
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea6:	e0cc      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eae:	e0c8      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a5e      	ldr	r2, [pc, #376]	@ (8006030 <UART_SetConfig+0x2d4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d125      	bne.n	8005f06 <UART_SetConfig+0x1aa>
 8005eba:	4b5b      	ldr	r3, [pc, #364]	@ (8006028 <UART_SetConfig+0x2cc>)
 8005ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ec4:	2b30      	cmp	r3, #48	@ 0x30
 8005ec6:	d016      	beq.n	8005ef6 <UART_SetConfig+0x19a>
 8005ec8:	2b30      	cmp	r3, #48	@ 0x30
 8005eca:	d818      	bhi.n	8005efe <UART_SetConfig+0x1a2>
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	d00a      	beq.n	8005ee6 <UART_SetConfig+0x18a>
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d814      	bhi.n	8005efe <UART_SetConfig+0x1a2>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <UART_SetConfig+0x182>
 8005ed8:	2b10      	cmp	r3, #16
 8005eda:	d008      	beq.n	8005eee <UART_SetConfig+0x192>
 8005edc:	e00f      	b.n	8005efe <UART_SetConfig+0x1a2>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ee4:	e0ad      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eec:	e0a9      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005eee:	2304      	movs	r3, #4
 8005ef0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ef4:	e0a5      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005ef6:	2308      	movs	r3, #8
 8005ef8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005efc:	e0a1      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005efe:	2310      	movs	r3, #16
 8005f00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f04:	e09d      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a4a      	ldr	r2, [pc, #296]	@ (8006034 <UART_SetConfig+0x2d8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d125      	bne.n	8005f5c <UART_SetConfig+0x200>
 8005f10:	4b45      	ldr	r3, [pc, #276]	@ (8006028 <UART_SetConfig+0x2cc>)
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f1c:	d016      	beq.n	8005f4c <UART_SetConfig+0x1f0>
 8005f1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f20:	d818      	bhi.n	8005f54 <UART_SetConfig+0x1f8>
 8005f22:	2b80      	cmp	r3, #128	@ 0x80
 8005f24:	d00a      	beq.n	8005f3c <UART_SetConfig+0x1e0>
 8005f26:	2b80      	cmp	r3, #128	@ 0x80
 8005f28:	d814      	bhi.n	8005f54 <UART_SetConfig+0x1f8>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <UART_SetConfig+0x1d8>
 8005f2e:	2b40      	cmp	r3, #64	@ 0x40
 8005f30:	d008      	beq.n	8005f44 <UART_SetConfig+0x1e8>
 8005f32:	e00f      	b.n	8005f54 <UART_SetConfig+0x1f8>
 8005f34:	2300      	movs	r3, #0
 8005f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f3a:	e082      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f42:	e07e      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005f44:	2304      	movs	r3, #4
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f4a:	e07a      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f52:	e076      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005f54:	2310      	movs	r3, #16
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f5a:	e072      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a35      	ldr	r2, [pc, #212]	@ (8006038 <UART_SetConfig+0x2dc>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d12a      	bne.n	8005fbc <UART_SetConfig+0x260>
 8005f66:	4b30      	ldr	r3, [pc, #192]	@ (8006028 <UART_SetConfig+0x2cc>)
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f74:	d01a      	beq.n	8005fac <UART_SetConfig+0x250>
 8005f76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f7a:	d81b      	bhi.n	8005fb4 <UART_SetConfig+0x258>
 8005f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f80:	d00c      	beq.n	8005f9c <UART_SetConfig+0x240>
 8005f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f86:	d815      	bhi.n	8005fb4 <UART_SetConfig+0x258>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <UART_SetConfig+0x238>
 8005f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f90:	d008      	beq.n	8005fa4 <UART_SetConfig+0x248>
 8005f92:	e00f      	b.n	8005fb4 <UART_SetConfig+0x258>
 8005f94:	2300      	movs	r3, #0
 8005f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f9a:	e052      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fa2:	e04e      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005faa:	e04a      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005fac:	2308      	movs	r3, #8
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb2:	e046      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fba:	e042      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a17      	ldr	r2, [pc, #92]	@ (8006020 <UART_SetConfig+0x2c4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d13a      	bne.n	800603c <UART_SetConfig+0x2e0>
 8005fc6:	4b18      	ldr	r3, [pc, #96]	@ (8006028 <UART_SetConfig+0x2cc>)
 8005fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fcc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005fd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fd4:	d01a      	beq.n	800600c <UART_SetConfig+0x2b0>
 8005fd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fda:	d81b      	bhi.n	8006014 <UART_SetConfig+0x2b8>
 8005fdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fe0:	d00c      	beq.n	8005ffc <UART_SetConfig+0x2a0>
 8005fe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fe6:	d815      	bhi.n	8006014 <UART_SetConfig+0x2b8>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <UART_SetConfig+0x298>
 8005fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff0:	d008      	beq.n	8006004 <UART_SetConfig+0x2a8>
 8005ff2:	e00f      	b.n	8006014 <UART_SetConfig+0x2b8>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ffa:	e022      	b.n	8006042 <UART_SetConfig+0x2e6>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006002:	e01e      	b.n	8006042 <UART_SetConfig+0x2e6>
 8006004:	2304      	movs	r3, #4
 8006006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800600a:	e01a      	b.n	8006042 <UART_SetConfig+0x2e6>
 800600c:	2308      	movs	r3, #8
 800600e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006012:	e016      	b.n	8006042 <UART_SetConfig+0x2e6>
 8006014:	2310      	movs	r3, #16
 8006016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800601a:	e012      	b.n	8006042 <UART_SetConfig+0x2e6>
 800601c:	efff69f3 	.word	0xefff69f3
 8006020:	40008000 	.word	0x40008000
 8006024:	40013800 	.word	0x40013800
 8006028:	40021000 	.word	0x40021000
 800602c:	40004400 	.word	0x40004400
 8006030:	40004800 	.word	0x40004800
 8006034:	40004c00 	.word	0x40004c00
 8006038:	40005000 	.word	0x40005000
 800603c:	2310      	movs	r3, #16
 800603e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a9f      	ldr	r2, [pc, #636]	@ (80062c4 <UART_SetConfig+0x568>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d17a      	bne.n	8006142 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800604c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006050:	2b08      	cmp	r3, #8
 8006052:	d824      	bhi.n	800609e <UART_SetConfig+0x342>
 8006054:	a201      	add	r2, pc, #4	@ (adr r2, 800605c <UART_SetConfig+0x300>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006081 	.word	0x08006081
 8006060:	0800609f 	.word	0x0800609f
 8006064:	08006089 	.word	0x08006089
 8006068:	0800609f 	.word	0x0800609f
 800606c:	0800608f 	.word	0x0800608f
 8006070:	0800609f 	.word	0x0800609f
 8006074:	0800609f 	.word	0x0800609f
 8006078:	0800609f 	.word	0x0800609f
 800607c:	08006097 	.word	0x08006097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006080:	f7fd f8f4 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8006084:	61f8      	str	r0, [r7, #28]
        break;
 8006086:	e010      	b.n	80060aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006088:	4b8f      	ldr	r3, [pc, #572]	@ (80062c8 <UART_SetConfig+0x56c>)
 800608a:	61fb      	str	r3, [r7, #28]
        break;
 800608c:	e00d      	b.n	80060aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800608e:	f7fd f855 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8006092:	61f8      	str	r0, [r7, #28]
        break;
 8006094:	e009      	b.n	80060aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800609a:	61fb      	str	r3, [r7, #28]
        break;
 800609c:	e005      	b.n	80060aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80fb 	beq.w	80062a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	4613      	mov	r3, r2
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	4413      	add	r3, r2
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d305      	bcc.n	80060ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d903      	bls.n	80060d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060d4:	e0e8      	b.n	80062a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	2200      	movs	r2, #0
 80060da:	461c      	mov	r4, r3
 80060dc:	4615      	mov	r5, r2
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	f04f 0300 	mov.w	r3, #0
 80060e6:	022b      	lsls	r3, r5, #8
 80060e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80060ec:	0222      	lsls	r2, r4, #8
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	6849      	ldr	r1, [r1, #4]
 80060f2:	0849      	lsrs	r1, r1, #1
 80060f4:	2000      	movs	r0, #0
 80060f6:	4688      	mov	r8, r1
 80060f8:	4681      	mov	r9, r0
 80060fa:	eb12 0a08 	adds.w	sl, r2, r8
 80060fe:	eb43 0b09 	adc.w	fp, r3, r9
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	603b      	str	r3, [r7, #0]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006110:	4650      	mov	r0, sl
 8006112:	4659      	mov	r1, fp
 8006114:	f7fa f858 	bl	80001c8 <__aeabi_uldivmod>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4613      	mov	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006126:	d308      	bcc.n	800613a <UART_SetConfig+0x3de>
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800612e:	d204      	bcs.n	800613a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	60da      	str	r2, [r3, #12]
 8006138:	e0b6      	b.n	80062a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006140:	e0b2      	b.n	80062a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800614a:	d15e      	bne.n	800620a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800614c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006150:	2b08      	cmp	r3, #8
 8006152:	d828      	bhi.n	80061a6 <UART_SetConfig+0x44a>
 8006154:	a201      	add	r2, pc, #4	@ (adr r2, 800615c <UART_SetConfig+0x400>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	08006181 	.word	0x08006181
 8006160:	08006189 	.word	0x08006189
 8006164:	08006191 	.word	0x08006191
 8006168:	080061a7 	.word	0x080061a7
 800616c:	08006197 	.word	0x08006197
 8006170:	080061a7 	.word	0x080061a7
 8006174:	080061a7 	.word	0x080061a7
 8006178:	080061a7 	.word	0x080061a7
 800617c:	0800619f 	.word	0x0800619f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006180:	f7fd f874 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8006184:	61f8      	str	r0, [r7, #28]
        break;
 8006186:	e014      	b.n	80061b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006188:	f7fd f886 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 800618c:	61f8      	str	r0, [r7, #28]
        break;
 800618e:	e010      	b.n	80061b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006190:	4b4d      	ldr	r3, [pc, #308]	@ (80062c8 <UART_SetConfig+0x56c>)
 8006192:	61fb      	str	r3, [r7, #28]
        break;
 8006194:	e00d      	b.n	80061b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006196:	f7fc ffd1 	bl	800313c <HAL_RCC_GetSysClockFreq>
 800619a:	61f8      	str	r0, [r7, #28]
        break;
 800619c:	e009      	b.n	80061b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800619e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061a2:	61fb      	str	r3, [r7, #28]
        break;
 80061a4:	e005      	b.n	80061b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80061b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d077      	beq.n	80062a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	005a      	lsls	r2, r3, #1
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	085b      	lsrs	r3, r3, #1
 80061c2:	441a      	add	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	2b0f      	cmp	r3, #15
 80061d2:	d916      	bls.n	8006202 <UART_SetConfig+0x4a6>
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061da:	d212      	bcs.n	8006202 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f023 030f 	bic.w	r3, r3, #15
 80061e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	085b      	lsrs	r3, r3, #1
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	8afb      	ldrh	r3, [r7, #22]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	8afa      	ldrh	r2, [r7, #22]
 80061fe:	60da      	str	r2, [r3, #12]
 8006200:	e052      	b.n	80062a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006208:	e04e      	b.n	80062a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800620a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800620e:	2b08      	cmp	r3, #8
 8006210:	d827      	bhi.n	8006262 <UART_SetConfig+0x506>
 8006212:	a201      	add	r2, pc, #4	@ (adr r2, 8006218 <UART_SetConfig+0x4bc>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	0800623d 	.word	0x0800623d
 800621c:	08006245 	.word	0x08006245
 8006220:	0800624d 	.word	0x0800624d
 8006224:	08006263 	.word	0x08006263
 8006228:	08006253 	.word	0x08006253
 800622c:	08006263 	.word	0x08006263
 8006230:	08006263 	.word	0x08006263
 8006234:	08006263 	.word	0x08006263
 8006238:	0800625b 	.word	0x0800625b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800623c:	f7fd f816 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8006240:	61f8      	str	r0, [r7, #28]
        break;
 8006242:	e014      	b.n	800626e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006244:	f7fd f828 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 8006248:	61f8      	str	r0, [r7, #28]
        break;
 800624a:	e010      	b.n	800626e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800624c:	4b1e      	ldr	r3, [pc, #120]	@ (80062c8 <UART_SetConfig+0x56c>)
 800624e:	61fb      	str	r3, [r7, #28]
        break;
 8006250:	e00d      	b.n	800626e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006252:	f7fc ff73 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8006256:	61f8      	str	r0, [r7, #28]
        break;
 8006258:	e009      	b.n	800626e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800625a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800625e:	61fb      	str	r3, [r7, #28]
        break;
 8006260:	e005      	b.n	800626e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800626c:	bf00      	nop
    }

    if (pclk != 0U)
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d019      	beq.n	80062a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	085a      	lsrs	r2, r3, #1
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	441a      	add	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	fbb2 f3f3 	udiv	r3, r2, r3
 8006286:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2b0f      	cmp	r3, #15
 800628c:	d909      	bls.n	80062a2 <UART_SetConfig+0x546>
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006294:	d205      	bcs.n	80062a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60da      	str	r2, [r3, #12]
 80062a0:	e002      	b.n	80062a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80062b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3728      	adds	r7, #40	@ 0x28
 80062bc:	46bd      	mov	sp, r7
 80062be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062c2:	bf00      	nop
 80062c4:	40008000 	.word	0x40008000
 80062c8:	00f42400 	.word	0x00f42400

080062cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00a      	beq.n	80062f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00a      	beq.n	800637e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01a      	beq.n	80063e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ca:	d10a      	bne.n	80063e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	605a      	str	r2, [r3, #4]
  }
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b098      	sub	sp, #96	@ 0x60
 8006414:	af02      	add	r7, sp, #8
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006420:	f7fa feb2 	bl	8001188 <HAL_GetTick>
 8006424:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b08      	cmp	r3, #8
 8006432:	d12e      	bne.n	8006492 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006434:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800643c:	2200      	movs	r2, #0
 800643e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f88c 	bl	8006560 <UART_WaitOnFlagUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d021      	beq.n	8006492 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800645c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800645e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006462:	653b      	str	r3, [r7, #80]	@ 0x50
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	461a      	mov	r2, r3
 800646a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800646c:	647b      	str	r3, [r7, #68]	@ 0x44
 800646e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800647a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e6      	bne.n	800644e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e062      	b.n	8006558 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b04      	cmp	r3, #4
 800649e:	d149      	bne.n	8006534 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064a8:	2200      	movs	r2, #0
 80064aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f856 	bl	8006560 <UART_WaitOnFlagUntilTimeout>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d03c      	beq.n	8006534 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	623b      	str	r3, [r7, #32]
   return(result);
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	461a      	mov	r2, r3
 80064d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e6      	bne.n	80064ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3308      	adds	r3, #8
 80064f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0301 	bic.w	r3, r3, #1
 8006502:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3308      	adds	r3, #8
 800650a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800650c:	61fa      	str	r2, [r7, #28]
 800650e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	69b9      	ldr	r1, [r7, #24]
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	617b      	str	r3, [r7, #20]
   return(result);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e5      	bne.n	80064ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e011      	b.n	8006558 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3758      	adds	r7, #88	@ 0x58
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	4613      	mov	r3, r2
 800656e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006570:	e04f      	b.n	8006612 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006578:	d04b      	beq.n	8006612 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657a:	f7fa fe05 	bl	8001188 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	429a      	cmp	r2, r3
 8006588:	d302      	bcc.n	8006590 <UART_WaitOnFlagUntilTimeout+0x30>
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e04e      	b.n	8006632 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d037      	beq.n	8006612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b80      	cmp	r3, #128	@ 0x80
 80065a6:	d034      	beq.n	8006612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b40      	cmp	r3, #64	@ 0x40
 80065ac:	d031      	beq.n	8006612 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d110      	bne.n	80065de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2208      	movs	r2, #8
 80065c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f838 	bl	800663a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2208      	movs	r2, #8
 80065ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e029      	b.n	8006632 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065ec:	d111      	bne.n	8006612 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f81e 	bl	800663a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2220      	movs	r2, #32
 8006602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e00f      	b.n	8006632 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69da      	ldr	r2, [r3, #28]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4013      	ands	r3, r2
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	429a      	cmp	r2, r3
 8006620:	bf0c      	ite	eq
 8006622:	2301      	moveq	r3, #1
 8006624:	2300      	movne	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	429a      	cmp	r2, r3
 800662e:	d0a0      	beq.n	8006572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800663a:	b480      	push	{r7}
 800663c:	b095      	sub	sp, #84	@ 0x54
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006652:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006660:	643b      	str	r3, [r7, #64]	@ 0x40
 8006662:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006666:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e6      	bne.n	8006642 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3308      	adds	r3, #8
 800667a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	e853 3f00 	ldrex	r3, [r3]
 8006682:	61fb      	str	r3, [r7, #28]
   return(result);
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3308      	adds	r3, #8
 8006692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006694:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006696:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800669a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e5      	bne.n	8006674 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d118      	bne.n	80066e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f023 0310 	bic.w	r3, r3, #16
 80066c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6979      	ldr	r1, [r7, #20]
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	613b      	str	r3, [r7, #16]
   return(result);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e6      	bne.n	80066b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80066f6:	bf00      	nop
 80066f8:	3754      	adds	r7, #84	@ 0x54
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <memset>:
 8006702:	4402      	add	r2, r0
 8006704:	4603      	mov	r3, r0
 8006706:	4293      	cmp	r3, r2
 8006708:	d100      	bne.n	800670c <memset+0xa>
 800670a:	4770      	bx	lr
 800670c:	f803 1b01 	strb.w	r1, [r3], #1
 8006710:	e7f9      	b.n	8006706 <memset+0x4>
	...

08006714 <__libc_init_array>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	4d0d      	ldr	r5, [pc, #52]	@ (800674c <__libc_init_array+0x38>)
 8006718:	4c0d      	ldr	r4, [pc, #52]	@ (8006750 <__libc_init_array+0x3c>)
 800671a:	1b64      	subs	r4, r4, r5
 800671c:	10a4      	asrs	r4, r4, #2
 800671e:	2600      	movs	r6, #0
 8006720:	42a6      	cmp	r6, r4
 8006722:	d109      	bne.n	8006738 <__libc_init_array+0x24>
 8006724:	4d0b      	ldr	r5, [pc, #44]	@ (8006754 <__libc_init_array+0x40>)
 8006726:	4c0c      	ldr	r4, [pc, #48]	@ (8006758 <__libc_init_array+0x44>)
 8006728:	f000 f818 	bl	800675c <_init>
 800672c:	1b64      	subs	r4, r4, r5
 800672e:	10a4      	asrs	r4, r4, #2
 8006730:	2600      	movs	r6, #0
 8006732:	42a6      	cmp	r6, r4
 8006734:	d105      	bne.n	8006742 <__libc_init_array+0x2e>
 8006736:	bd70      	pop	{r4, r5, r6, pc}
 8006738:	f855 3b04 	ldr.w	r3, [r5], #4
 800673c:	4798      	blx	r3
 800673e:	3601      	adds	r6, #1
 8006740:	e7ee      	b.n	8006720 <__libc_init_array+0xc>
 8006742:	f855 3b04 	ldr.w	r3, [r5], #4
 8006746:	4798      	blx	r3
 8006748:	3601      	adds	r6, #1
 800674a:	e7f2      	b.n	8006732 <__libc_init_array+0x1e>
 800674c:	080067c4 	.word	0x080067c4
 8006750:	080067c4 	.word	0x080067c4
 8006754:	080067c4 	.word	0x080067c4
 8006758:	080067c8 	.word	0x080067c8

0800675c <_init>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr

08006768 <_fini>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	bf00      	nop
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr
