
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dcc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006f5c  08006f5c  00007f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe4  08006fe4  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006fe4  08006fe4  00007fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fec  08006fec  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fec  08006fec  00007fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ff0  08006ff0  00007ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006ff4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000068  0800705c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  0800705c  000084b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014246  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030dd  00000000  00000000  0001c2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0001f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d64  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028cbd  00000000  00000000  0002127c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166a5  00000000  00000000  00049f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1523  00000000  00000000  000605de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151b01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ddc  00000000  00000000  00151b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00156920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f44 	.word	0x08006f44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006f44 	.word	0x08006f44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	4b10      	ldr	r3, [pc, #64]	@ (80005e4 <MX_DMA_Init+0x48>)
 80005a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005a6:	4a0f      	ldr	r2, [pc, #60]	@ (80005e4 <MX_DMA_Init+0x48>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80005ae:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <MX_DMA_Init+0x48>)
 80005b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	2010      	movs	r0, #16
 80005c0:	f000 ffb9 	bl	8001536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005c4:	2010      	movs	r0, #16
 80005c6:	f000 ffd2 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2011      	movs	r0, #17
 80005d0:	f000 ffb1 	bl	8001536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005d4:	2011      	movs	r0, #17
 80005d6:	f000 ffca 	bl	800156e <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <MCP23S17_SPI_Transmit>:
 *  Created on: Mar 13, 2025
 *      Author: lcroce
 */
#include "driver_led.h"

uint8_t MCP23S17_SPI_Transmit(uint8_t data) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedData;
    HAL_SPI_TransmitReceive(&hspi3, &data, &receivedData, 1, HAL_MAX_DELAY);
 80005f2:	f107 020f 	add.w	r2, r7, #15
 80005f6:	1df9      	adds	r1, r7, #7
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2301      	movs	r3, #1
 8000600:	4803      	ldr	r0, [pc, #12]	@ (8000610 <MCP23S17_SPI_Transmit+0x28>)
 8000602:	f004 fc41 	bl	8004e88 <HAL_SPI_TransmitReceive>
    return receivedData;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000274 	.word	0x20000274

08000614 <MCP23S17_WriteRegister>:

void MCP23S17_WriteRegister(uint8_t reg, uint8_t value) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	460a      	mov	r2, r1
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	4613      	mov	r3, r2
 8000622:	71bb      	strb	r3, [r7, #6]
    MCP23S17_CS_LOW();
 8000624:	2200      	movs	r2, #0
 8000626:	2180      	movs	r1, #128	@ 0x80
 8000628:	480b      	ldr	r0, [pc, #44]	@ (8000658 <MCP23S17_WriteRegister+0x44>)
 800062a:	f001 fb4b 	bl	8001cc4 <HAL_GPIO_WritePin>
    MCP23S17_SPI_Transmit(0x40);  // Adresse + écriture (0x40 = 0b01000000)
 800062e:	2040      	movs	r0, #64	@ 0x40
 8000630:	f7ff ffda 	bl	80005e8 <MCP23S17_SPI_Transmit>
    MCP23S17_SPI_Transmit(reg);
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ffd6 	bl	80005e8 <MCP23S17_SPI_Transmit>
    MCP23S17_SPI_Transmit(value);
 800063c:	79bb      	ldrb	r3, [r7, #6]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffd2 	bl	80005e8 <MCP23S17_SPI_Transmit>
    MCP23S17_CS_HIGH();
 8000644:	2201      	movs	r2, #1
 8000646:	2180      	movs	r1, #128	@ 0x80
 8000648:	4803      	ldr	r0, [pc, #12]	@ (8000658 <MCP23S17_WriteRegister+0x44>)
 800064a:	f001 fb3b 	bl	8001cc4 <HAL_GPIO_WritePin>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	48000400 	.word	0x48000400

0800065c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	4b35      	ldr	r3, [pc, #212]	@ (8000748 <MX_GPIO_Init+0xec>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a34      	ldr	r2, [pc, #208]	@ (8000748 <MX_GPIO_Init+0xec>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b32      	ldr	r3, [pc, #200]	@ (8000748 <MX_GPIO_Init+0xec>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	4b2f      	ldr	r3, [pc, #188]	@ (8000748 <MX_GPIO_Init+0xec>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a2e      	ldr	r2, [pc, #184]	@ (8000748 <MX_GPIO_Init+0xec>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000696:	4b2c      	ldr	r3, [pc, #176]	@ (8000748 <MX_GPIO_Init+0xec>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <MX_GPIO_Init+0xec>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <MX_GPIO_Init+0xec>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ae:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <MX_GPIO_Init+0xec>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <MX_GPIO_Init+0xec>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a22      	ldr	r2, [pc, #136]	@ (8000748 <MX_GPIO_Init+0xec>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b20      	ldr	r3, [pc, #128]	@ (8000748 <MX_GPIO_Init+0xec>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRST_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2121      	movs	r1, #33	@ 0x21
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006da:	f001 faf3 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_ncs_GPIO_Port, VU_ncs_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2180      	movs	r1, #128	@ 0x80
 80006e2:	481a      	ldr	r0, [pc, #104]	@ (800074c <MX_GPIO_Init+0xf0>)
 80006e4:	f001 faee 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4814      	ldr	r0, [pc, #80]	@ (8000750 <MX_GPIO_Init+0xf4>)
 8000700:	f001 f936 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRST_Pin PA5 */
  GPIO_InitStruct.Pin = VU_nRST_Pin|GPIO_PIN_5;
 8000704:	2321      	movs	r3, #33	@ 0x21
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071e:	f001 f927 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_ncs_Pin */
  GPIO_InitStruct.Pin = VU_ncs_Pin;
 8000722:	2380      	movs	r3, #128	@ 0x80
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_ncs_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_GPIO_Init+0xf0>)
 800073a:	f001 f919 	bl	8001970 <HAL_GPIO_Init>

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	@ 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000
 800074c:	48000400 	.word	0x48000400
 8000750:	48000800 	.word	0x48000800

08000754 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000758:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_I2C2_Init+0x74>)
 800075a:	4a1c      	ldr	r2, [pc, #112]	@ (80007cc <MX_I2C2_Init+0x78>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800075e:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_I2C2_Init+0x74>)
 8000760:	4a1b      	ldr	r2, [pc, #108]	@ (80007d0 <MX_I2C2_Init+0x7c>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_I2C2_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_I2C2_Init+0x74>)
 800076c:	2201      	movs	r2, #1
 800076e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <MX_I2C2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_I2C2_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_I2C2_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_I2C2_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_I2C2_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800078e:	480e      	ldr	r0, [pc, #56]	@ (80007c8 <MX_I2C2_Init+0x74>)
 8000790:	f001 faca 	bl	8001d28 <HAL_I2C_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800079a:	f000 f984 	bl	8000aa6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	4809      	ldr	r0, [pc, #36]	@ (80007c8 <MX_I2C2_Init+0x74>)
 80007a2:	f001 fb5c 	bl	8001e5e <HAL_I2CEx_ConfigAnalogFilter>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007ac:	f000 f97b 	bl	8000aa6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_I2C2_Init+0x74>)
 80007b4:	f001 fb9e 	bl	8001ef4 <HAL_I2CEx_ConfigDigitalFilter>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007be:	f000 f972 	bl	8000aa6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000084 	.word	0x20000084
 80007cc:	40005800 	.word	0x40005800
 80007d0:	10d19ce4 	.word	0x10d19ce4

080007d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b0ac      	sub	sp, #176	@ 0xb0
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2288      	movs	r2, #136	@ 0x88
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 fd8e 	bl	8006316 <memset>
  if(i2cHandle->Instance==I2C2)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a21      	ldr	r2, [pc, #132]	@ (8000884 <HAL_I2C_MspInit+0xb0>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d13b      	bne.n	800087c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000804:	2380      	movs	r3, #128	@ 0x80
 8000806:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000808:	2300      	movs	r3, #0
 800080a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4618      	mov	r0, r3
 8000812:	f002 fa1f 	bl	8002c54 <HAL_RCCEx_PeriphCLKConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800081c:	f000 f943 	bl	8000aa6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <HAL_I2C_MspInit+0xb4>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000824:	4a18      	ldr	r2, [pc, #96]	@ (8000888 <HAL_I2C_MspInit+0xb4>)
 8000826:	f043 0302 	orr.w	r3, r3, #2
 800082a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <HAL_I2C_MspInit+0xb4>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000830:	f003 0302 	and.w	r3, r3, #2
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000838:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800083c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000840:	2312      	movs	r3, #18
 8000842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000852:	2304      	movs	r3, #4
 8000854:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800085c:	4619      	mov	r1, r3
 800085e:	480b      	ldr	r0, [pc, #44]	@ (800088c <HAL_I2C_MspInit+0xb8>)
 8000860:	f001 f886 	bl	8001970 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000864:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <HAL_I2C_MspInit+0xb4>)
 8000866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000868:	4a07      	ldr	r2, [pc, #28]	@ (8000888 <HAL_I2C_MspInit+0xb4>)
 800086a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800086e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <HAL_I2C_MspInit+0xb4>)
 8000872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000874:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800087c:	bf00      	nop
 800087e:	37b0      	adds	r7, #176	@ 0xb0
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40005800 	.word	0x40005800
 8000888:	40021000 	.word	0x40021000
 800088c:	48000400 	.word	0x48000400

08000890 <__io_putchar>:
/* USER CODE BEGIN 0 */

// minicom -D /dev/ttyACM-1
// ctrl+a puis q

int __io_putchar(int ch) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000898:	1d39      	adds	r1, r7, #4
 800089a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800089e:	2201      	movs	r2, #1
 80008a0:	4803      	ldr	r0, [pc, #12]	@ (80008b0 <__io_putchar+0x20>)
 80008a2:	f004 fec3 	bl	800562c <HAL_UART_Transmit>
	return ch;
 80008a6:	687b      	ldr	r3, [r7, #4]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200002dc 	.word	0x200002dc

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f000 fcc1 	bl	8001240 <HAL_Init>

  /* USER CODE BEGIN Init */

  __HAL_SAI_ENABLE(&hsai_BlockB2);
 80008be:	4b38      	ldr	r3, [pc, #224]	@ (80009a0 <main+0xec>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b36      	ldr	r3, [pc, #216]	@ (80009a0 <main+0xec>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80008cc:	601a      	str	r2, [r3, #0]
  __HAL_SAI_ENABLE(&hsai_BlockA2);
 80008ce:	4b35      	ldr	r3, [pc, #212]	@ (80009a4 <main+0xf0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b33      	ldr	r3, [pc, #204]	@ (80009a4 <main+0xf0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80008dc:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 f867 	bl	80009b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008e2:	f000 f8b6 	bl	8000a52 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e6:	f7ff feb9 	bl	800065c <MX_GPIO_Init>
  MX_DMA_Init();
 80008ea:	f7ff fe57 	bl	800059c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008ee:	f000 fbf1 	bl	80010d4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80008f2:	f000 fa23 	bl	8000d3c <MX_SPI3_Init>
  MX_I2C2_Init();
 80008f6:	f7ff ff2d 	bl	8000754 <MX_I2C2_Init>
  MX_SAI2_Init();
 80008fa:	f000 f8db 	bl	8000ab4 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(VU_nRST_GPIO_Port, VU_nRST_Pin, SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2101      	movs	r1, #1
 8000902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000906:	f001 f9dd 	bl	8001cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VU_ncs_GPIO_Port, VU_ncs_Pin, SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	4826      	ldr	r0, [pc, #152]	@ (80009a8 <main+0xf4>)
 8000910:	f001 f9d8 	bl	8001cc4 <HAL_GPIO_WritePin>
  MCP23S17_WriteRegister(0x00,  0x00);
 8000914:	2100      	movs	r1, #0
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff fe7c 	bl	8000614 <MCP23S17_WriteRegister>
  MCP23S17_WriteRegister(0x01,  0x00);
 800091c:	2100      	movs	r1, #0
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff fe78 	bl	8000614 <MCP23S17_WriteRegister>
  int val = 255;
 8000924:	23ff      	movs	r3, #255	@ 0xff
 8000926:	607b      	str	r3, [r7, #4]


  while (1)
  {
	     /* Faire clignoter la LED de la NUCLEO */
	      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000928:	2120      	movs	r1, #32
 800092a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092e:	f001 f9e1 	bl	8001cf4 <HAL_GPIO_TogglePin>
	      HAL_Delay(500);
 8000932:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000936:	f000 fcff 	bl	8001338 <HAL_Delay>

	      /* Mettre GPA0 à 1 */
	      for(int i=1; i<=8;i++)
 800093a:	2301      	movs	r3, #1
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	e02a      	b.n	8000996 <main+0xe2>
	      {
	    	  val = val<<1;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	607b      	str	r3, [r7, #4]
	    	  printf("val = %d", val);
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	4818      	ldr	r0, [pc, #96]	@ (80009ac <main+0xf8>)
 800094a:	f005 fc8f 	bl	800626c <iprintf>
	    	  MCP23S17_WriteRegister(0x12, val);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4619      	mov	r1, r3
 8000954:	2012      	movs	r0, #18
 8000956:	f7ff fe5d 	bl	8000614 <MCP23S17_WriteRegister>
	    	  MCP23S17_WriteRegister(0x13, val);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4619      	mov	r1, r3
 8000960:	2013      	movs	r0, #19
 8000962:	f7ff fe57 	bl	8000614 <MCP23S17_WriteRegister>
	    	  HAL_Delay(500);
 8000966:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800096a:	f000 fce5 	bl	8001338 <HAL_Delay>
	    	  if (i==8)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2b08      	cmp	r3, #8
 8000972:	d10d      	bne.n	8000990 <main+0xdc>
	    	 	    	  {
	    	 	    	  	/* Mettre GPA0 à 0 */
	 	    	  	val=0xFF;
 8000974:	23ff      	movs	r3, #255	@ 0xff
 8000976:	607b      	str	r3, [r7, #4]
	    	 	    	  	MCP23S17_WriteRegister(0x12, val);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4619      	mov	r1, r3
 800097e:	2012      	movs	r0, #18
 8000980:	f7ff fe48 	bl	8000614 <MCP23S17_WriteRegister>
	    	 	    	  	MCP23S17_WriteRegister(0x13, val);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	4619      	mov	r1, r3
 800098a:	2013      	movs	r0, #19
 800098c:	f7ff fe42 	bl	8000614 <MCP23S17_WriteRegister>
	      for(int i=1; i<=8;i++)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	2b08      	cmp	r3, #8
 800099a:	ddd1      	ble.n	8000940 <main+0x8c>
	      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800099c:	e7c4      	b.n	8000928 <main+0x74>
 800099e:	bf00      	nop
 80009a0:	2000015c 	.word	0x2000015c
 80009a4:	200000d8 	.word	0x200000d8
 80009a8:	48000400 	.word	0x48000400
 80009ac:	08006f5c 	.word	0x08006f5c

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b096      	sub	sp, #88	@ 0x58
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2244      	movs	r2, #68	@ 0x44
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f005 fca9 	bl	8006316 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009d6:	f001 fae7 	bl	8001fa8 <HAL_PWREx_ControlVoltageScaling>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009e0:	f000 f861 	bl	8000aa6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e4:	2302      	movs	r3, #2
 80009e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ee:	2310      	movs	r3, #16
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	2302      	movs	r3, #2
 80009f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f6:	2302      	movs	r3, #2
 80009f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009fe:	230a      	movs	r3, #10
 8000a00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a02:	2307      	movs	r3, #7
 8000a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 fb1e 	bl	8002054 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a1e:	f000 f842 	bl	8000aa6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2303      	movs	r3, #3
 8000a28:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 fee6 	bl	800280c <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a46:	f000 f82e 	bl	8000aa6 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3758      	adds	r7, #88	@ 0x58
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b0a2      	sub	sp, #136	@ 0x88
 8000a56:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2288      	movs	r2, #136	@ 0x88
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f005 fc59 	bl	8006316 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a68:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000a76:	230d      	movs	r3, #13
 8000a78:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000a7a:	2311      	movs	r3, #17
 8000a7c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000a86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a8a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 f8e0 	bl	8002c54 <HAL_RCCEx_PeriphCLKConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000a9a:	f000 f804 	bl	8000aa6 <Error_Handler>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3788      	adds	r7, #136	@ 0x88
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aaa:	b672      	cpsid	i
}
 8000aac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aae:	bf00      	nop
 8000ab0:	e7fd      	b.n	8000aae <Error_Handler+0x8>
	...

08000ab4 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_b;
DMA_HandleTypeDef hdma_sai2_a;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b64 <MX_SAI2_Init+0xb0>)
 8000aba:	4a2b      	ldr	r2, [pc, #172]	@ (8000b68 <MX_SAI2_Init+0xb4>)
 8000abc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000abe:	4b29      	ldr	r3, [pc, #164]	@ (8000b64 <MX_SAI2_Init+0xb0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ac4:	4b27      	ldr	r3, [pc, #156]	@ (8000b64 <MX_SAI2_Init+0xb0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000aca:	4b26      	ldr	r3, [pc, #152]	@ (8000b64 <MX_SAI2_Init+0xb0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ad0:	4b24      	ldr	r3, [pc, #144]	@ (8000b64 <MX_SAI2_Init+0xb0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ad6:	4b23      	ldr	r3, [pc, #140]	@ (8000b64 <MX_SAI2_Init+0xb0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000adc:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <MX_SAI2_Init+0xb0>)
 8000ade:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000ae2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <MX_SAI2_Init+0xb0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000aea:	4b1e      	ldr	r3, [pc, #120]	@ (8000b64 <MX_SAI2_Init+0xb0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000af0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <MX_SAI2_Init+0xb0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <MX_SAI2_Init+0xb0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000afc:	2302      	movs	r3, #2
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	4818      	ldr	r0, [pc, #96]	@ (8000b64 <MX_SAI2_Init+0xb0>)
 8000b04:	f003 fbc0 	bl	8004288 <HAL_SAI_InitProtocol>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000b0e:	f7ff ffca 	bl	8000aa6 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <MX_SAI2_Init+0xb8>)
 8000b14:	4a16      	ldr	r2, [pc, #88]	@ (8000b70 <MX_SAI2_Init+0xbc>)
 8000b16:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_SAI2_Init+0xb8>)
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <MX_SAI2_Init+0xb8>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_SAI2_Init+0xb8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <MX_SAI2_Init+0xb8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_SAI2_Init+0xb8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <MX_SAI2_Init+0xb8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <MX_SAI2_Init+0xb8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <MX_SAI2_Init+0xb8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000b48:	2302      	movs	r3, #2
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <MX_SAI2_Init+0xb8>)
 8000b50:	f003 fb9a 	bl	8004288 <HAL_SAI_InitProtocol>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000b5a:	f7ff ffa4 	bl	8000aa6 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000d8 	.word	0x200000d8
 8000b68:	40015804 	.word	0x40015804
 8000b6c:	2000015c 	.word	0x2000015c
 8000b70:	40015824 	.word	0x40015824

08000b74 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	@ 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a64      	ldr	r2, [pc, #400]	@ (8000d14 <HAL_SAI_MspInit+0x1a0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d15e      	bne.n	8000c44 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000b86:	4b64      	ldr	r3, [pc, #400]	@ (8000d18 <HAL_SAI_MspInit+0x1a4>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d113      	bne.n	8000bb6 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000b8e:	4b63      	ldr	r3, [pc, #396]	@ (8000d1c <HAL_SAI_MspInit+0x1a8>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b92:	4a62      	ldr	r2, [pc, #392]	@ (8000d1c <HAL_SAI_MspInit+0x1a8>)
 8000b94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b9a:	4b60      	ldr	r3, [pc, #384]	@ (8000d1c <HAL_SAI_MspInit+0x1a8>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	204b      	movs	r0, #75	@ 0x4b
 8000bac:	f000 fcc3 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000bb0:	204b      	movs	r0, #75	@ 0x4b
 8000bb2:	f000 fcdc 	bl	800156e <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000bb6:	4b58      	ldr	r3, [pc, #352]	@ (8000d18 <HAL_SAI_MspInit+0x1a4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a56      	ldr	r2, [pc, #344]	@ (8000d18 <HAL_SAI_MspInit+0x1a4>)
 8000bbe:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = I2S_LRCLK_Pin|I2S_SCLK_Pin|SYS_MCLK_Pin|I2S_DIN_Pin;
 8000bc0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000bd2:	230d      	movs	r3, #13
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4850      	ldr	r0, [pc, #320]	@ (8000d20 <HAL_SAI_MspInit+0x1ac>)
 8000bde:	f000 fec7 	bl	8001970 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000be2:	4b50      	ldr	r3, [pc, #320]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000be4:	4a50      	ldr	r2, [pc, #320]	@ (8000d28 <HAL_SAI_MspInit+0x1b4>)
 8000be6:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000be8:	4b4e      	ldr	r3, [pc, #312]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bee:	4b4d      	ldr	r3, [pc, #308]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000bf0:	2210      	movs	r2, #16
 8000bf2:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000bfc:	2280      	movs	r2, #128	@ 0x80
 8000bfe:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c00:	4b48      	ldr	r3, [pc, #288]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c06:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c08:	4b46      	ldr	r3, [pc, #280]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000c0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c0e:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000c10:	4b44      	ldr	r3, [pc, #272]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000c12:	2220      	movs	r2, #32
 8000c14:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000c16:	4b43      	ldr	r3, [pc, #268]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000c1c:	4841      	ldr	r0, [pc, #260]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000c1e:	f000 fcc1 	bl	80015a4 <HAL_DMA_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000c28:	f7ff ff3d 	bl	8000aa6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000c30:	671a      	str	r2, [r3, #112]	@ 0x70
 8000c32:	4a3c      	ldr	r2, [pc, #240]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a3a      	ldr	r2, [pc, #232]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000c3c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000c3e:	4a39      	ldr	r2, [pc, #228]	@ (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a38      	ldr	r2, [pc, #224]	@ (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d15e      	bne.n	8000d0c <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000c4e:	4b32      	ldr	r3, [pc, #200]	@ (8000d18 <HAL_SAI_MspInit+0x1a4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d113      	bne.n	8000c7e <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000c56:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <HAL_SAI_MspInit+0x1a8>)
 8000c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c5a:	4a30      	ldr	r2, [pc, #192]	@ (8000d1c <HAL_SAI_MspInit+0x1a8>)
 8000c5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c62:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <HAL_SAI_MspInit+0x1a8>)
 8000c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	204b      	movs	r0, #75	@ 0x4b
 8000c74:	f000 fc5f 	bl	8001536 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000c78:	204b      	movs	r0, #75	@ 0x4b
 8000c7a:	f000 fc78 	bl	800156e <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000c7e:	4b26      	ldr	r3, [pc, #152]	@ (8000d18 <HAL_SAI_MspInit+0x1a4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	4a24      	ldr	r2, [pc, #144]	@ (8000d18 <HAL_SAI_MspInit+0x1a4>)
 8000c86:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = I2S_DOUT_Pin;
 8000c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000c9a:	230d      	movs	r3, #13
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2S_DOUT_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4822      	ldr	r0, [pc, #136]	@ (8000d30 <HAL_SAI_MspInit+0x1bc>)
 8000ca6:	f000 fe63 	bl	8001970 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000caa:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000cac:	4a22      	ldr	r2, [pc, #136]	@ (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000cae:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000cb0:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000cc4:	2280      	movs	r2, #128	@ 0x80
 8000cc6:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cce:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000cd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cd6:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000cda:	2220      	movs	r2, #32
 8000cdc:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000ce4:	4813      	ldr	r0, [pc, #76]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000ce6:	f000 fc5d 	bl	80015a4 <HAL_DMA_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000cf0:	f7ff fed9 	bl	8000aa6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000cf8:	671a      	str	r2, [r3, #112]	@ 0x70
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a0c      	ldr	r2, [pc, #48]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000d04:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000d06:	4a0b      	ldr	r2, [pc, #44]	@ (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	@ 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40015804 	.word	0x40015804
 8000d18:	20000270 	.word	0x20000270
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48000400 	.word	0x48000400
 8000d24:	20000228 	.word	0x20000228
 8000d28:	4002006c 	.word	0x4002006c
 8000d2c:	40015824 	.word	0x40015824
 8000d30:	48000800 	.word	0x48000800
 8000d34:	200001e0 	.word	0x200001e0
 8000d38:	40020080 	.word	0x40020080

08000d3c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d42:	4a1c      	ldr	r2, [pc, #112]	@ (8000db4 <MX_SPI3_Init+0x78>)
 8000d44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d56:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d5a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d62:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d6e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d88:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d96:	2208      	movs	r2, #8
 8000d98:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_SPI3_Init+0x74>)
 8000d9c:	f003 ffd1 	bl	8004d42 <HAL_SPI_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000da6:	f7ff fe7e 	bl	8000aa6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000274 	.word	0x20000274
 8000db4:	40003c00 	.word	0x40003c00

08000db8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a25      	ldr	r2, [pc, #148]	@ (8000e6c <HAL_SPI_MspInit+0xb4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d144      	bne.n	8000e64 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dda:	4b25      	ldr	r3, [pc, #148]	@ (8000e70 <HAL_SPI_MspInit+0xb8>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dde:	4a24      	ldr	r2, [pc, #144]	@ (8000e70 <HAL_SPI_MspInit+0xb8>)
 8000de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000de4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000de6:	4b22      	ldr	r3, [pc, #136]	@ (8000e70 <HAL_SPI_MspInit+0xb8>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <HAL_SPI_MspInit+0xb8>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e70 <HAL_SPI_MspInit+0xb8>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <HAL_SPI_MspInit+0xb8>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <HAL_SPI_MspInit+0xb8>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	4a18      	ldr	r2, [pc, #96]	@ (8000e70 <HAL_SPI_MspInit+0xb8>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e16:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <HAL_SPI_MspInit+0xb8>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e22:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e34:	2306      	movs	r3, #6
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <HAL_SPI_MspInit+0xbc>)
 8000e40:	f000 fd96 	bl	8001970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e44:	2320      	movs	r3, #32
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e54:	2306      	movs	r3, #6
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <HAL_SPI_MspInit+0xc0>)
 8000e60:	f000 fd86 	bl	8001970 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	@ 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40003c00 	.word	0x40003c00
 8000e70:	40021000 	.word	0x40021000
 8000e74:	48000800 	.word	0x48000800
 8000e78:	48000400 	.word	0x48000400

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9e:	4a08      	ldr	r2, [pc, #32]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <NMI_Handler+0x4>

08000ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <MemManage_Handler+0x4>

08000edc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1a:	f000 f9ed 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <DMA1_Channel6_IRQHandler+0x10>)
 8000f2a:	f000 fc72 	bl	8001812 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000228 	.word	0x20000228

08000f38 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <DMA1_Channel7_IRQHandler+0x10>)
 8000f3e:	f000 fc68 	bl	8001812 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200001e0 	.word	0x200001e0

08000f4c <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8000f50:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <SAI2_IRQHandler+0x14>)
 8000f52:	f003 fba3 	bl	800469c <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8000f56:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <SAI2_IRQHandler+0x18>)
 8000f58:	f003 fba0 	bl	800469c <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200000d8 	.word	0x200000d8
 8000f64:	2000015c 	.word	0x2000015c

08000f68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e00a      	b.n	8000f90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f7a:	f3af 8000 	nop.w
 8000f7e:	4601      	mov	r1, r0
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	b2ca      	uxtb	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbf0      	blt.n	8000f7a <_read+0x12>
  }

  return len;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	e009      	b.n	8000fc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	60ba      	str	r2, [r7, #8]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fc67 	bl	8000890 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf1      	blt.n	8000fb4 <_write+0x12>
  }
  return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_close>:

int _close(int file)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001002:	605a      	str	r2, [r3, #4]
  return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_isatty>:

int _isatty(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f005 f99e 	bl	80063b4 <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20018000 	.word	0x20018000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	200002d8 	.word	0x200002d8
 80010ac:	200004b8 	.word	0x200004b8

080010b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_USART2_UART_Init+0x58>)
 80010da:	4a15      	ldr	r2, [pc, #84]	@ (8001130 <MX_USART2_UART_Init+0x5c>)
 80010dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010de:	4b13      	ldr	r3, [pc, #76]	@ (800112c <MX_USART2_UART_Init+0x58>)
 80010e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_USART2_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_USART2_UART_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_USART2_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_USART2_UART_Init+0x58>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <MX_USART2_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_USART2_UART_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <MX_USART2_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_USART2_UART_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_USART2_UART_Init+0x58>)
 8001118:	f004 fa3a 	bl	8005590 <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001122:	f7ff fcc0 	bl	8000aa6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200002dc 	.word	0x200002dc
 8001130:	40004400 	.word	0x40004400

08001134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0ac      	sub	sp, #176	@ 0xb0
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2288      	movs	r2, #136	@ 0x88
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f005 f8de 	bl	8006316 <memset>
  if(uartHandle->Instance==USART2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a21      	ldr	r2, [pc, #132]	@ (80011e4 <HAL_UART_MspInit+0xb0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d13b      	bne.n	80011dc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001164:	2302      	movs	r3, #2
 8001166:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001168:	2300      	movs	r3, #0
 800116a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fd6f 	bl	8002c54 <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800117c:	f7ff fc93 	bl	8000aa6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001180:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <HAL_UART_MspInit+0xb4>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001184:	4a18      	ldr	r2, [pc, #96]	@ (80011e8 <HAL_UART_MspInit+0xb4>)
 8001186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118a:	6593      	str	r3, [r2, #88]	@ 0x58
 800118c:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <HAL_UART_MspInit+0xb4>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <HAL_UART_MspInit+0xb4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <HAL_UART_MspInit+0xb4>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a4:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <HAL_UART_MspInit+0xb4>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011b0:	230c      	movs	r3, #12
 80011b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c8:	2307      	movs	r3, #7
 80011ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d8:	f000 fbca 	bl	8001970 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011dc:	bf00      	nop
 80011de:	37b0      	adds	r7, #176	@ 0xb0
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40004400 	.word	0x40004400
 80011e8:	40021000 	.word	0x40021000

080011ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001224 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f0:	f7ff ff5e 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	@ (800122c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <LoopForever+0xe>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	@ (8001238 <LoopForever+0x16>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f005 f8d1 	bl	80063c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121e:	f7ff fb49 	bl	80008b4 <main>

08001222 <LoopForever>:

LoopForever:
    b LoopForever
 8001222:	e7fe      	b.n	8001222 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001224:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001230:	08006ff4 	.word	0x08006ff4
  ldr r2, =_sbss
 8001234:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001238:	200004b4 	.word	0x200004b4

0800123c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_2_IRQHandler>
	...

08001240 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124a:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <HAL_Init+0x3c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a0b      	ldr	r2, [pc, #44]	@ (800127c <HAL_Init+0x3c>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001254:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001256:	2003      	movs	r0, #3
 8001258:	f000 f962 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f80f 	bl	8001280 <HAL_InitTick>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	e001      	b.n	8001272 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800126e:	f7ff fe05 	bl	8000e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001272:	79fb      	ldrb	r3, [r7, #7]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40022000 	.word	0x40022000

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800128c:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <HAL_InitTick+0x6c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d023      	beq.n	80012dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <HAL_InitTick+0x70>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <HAL_InitTick+0x6c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f96d 	bl	800158a <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10f      	bne.n	80012d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d809      	bhi.n	80012d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c4:	f000 f937 	bl	8001536 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c8:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <HAL_InitTick+0x74>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e007      	b.n	80012e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e004      	b.n	80012e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e001      	b.n	80012e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008
 800131c:	20000364 	.word	0x20000364

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000364 	.word	0x20000364

08001338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff ffee 	bl	8001320 <HAL_GetTick>
 8001344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001350:	d005      	beq.n	800135e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_Delay+0x44>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135e:	bf00      	nop
 8001360:	f7ff ffde 	bl	8001320 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d8f7      	bhi.n	8001360 <HAL_Delay+0x28>
  {
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000008 	.word	0x20000008

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	@ (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db0b      	blt.n	800140e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	4907      	ldr	r1, [pc, #28]	@ (800141c <__NVIC_EnableIRQ+0x38>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000e100 	.word	0xe000e100

08001420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	db0a      	blt.n	800144a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	490c      	ldr	r1, [pc, #48]	@ (800146c <__NVIC_SetPriority+0x4c>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	0112      	lsls	r2, r2, #4
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	440b      	add	r3, r1
 8001444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001448:	e00a      	b.n	8001460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4908      	ldr	r1, [pc, #32]	@ (8001470 <__NVIC_SetPriority+0x50>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	3b04      	subs	r3, #4
 8001458:	0112      	lsls	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	440b      	add	r3, r1
 800145e:	761a      	strb	r2, [r3, #24]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	@ 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f1c3 0307 	rsb	r3, r3, #7
 800148e:	2b04      	cmp	r3, #4
 8001490:	bf28      	it	cs
 8001492:	2304      	movcs	r3, #4
 8001494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3304      	adds	r3, #4
 800149a:	2b06      	cmp	r3, #6
 800149c:	d902      	bls.n	80014a4 <NVIC_EncodePriority+0x30>
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3b03      	subs	r3, #3
 80014a2:	e000      	b.n	80014a6 <NVIC_EncodePriority+0x32>
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43d9      	mvns	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	4313      	orrs	r3, r2
         );
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	@ 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014ec:	d301      	bcc.n	80014f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00f      	b.n	8001512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <SysTick_Config+0x40>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fa:	210f      	movs	r1, #15
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001500:	f7ff ff8e 	bl	8001420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	4b05      	ldr	r3, [pc, #20]	@ (800151c <SysTick_Config+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	4b04      	ldr	r3, [pc, #16]	@ (800151c <SysTick_Config+0x40>)
 800150c:	2207      	movs	r2, #7
 800150e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff29 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff3e 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff8e 	bl	8001474 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5d 	bl	8001420 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff31 	bl	80013e4 <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffa2 	bl	80014dc <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e098      	b.n	80016e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b4d      	ldr	r3, [pc, #308]	@ (80016f4 <HAL_DMA_Init+0x150>)
 80015be:	429a      	cmp	r2, r3
 80015c0:	d80f      	bhi.n	80015e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b4b      	ldr	r3, [pc, #300]	@ (80016f8 <HAL_DMA_Init+0x154>)
 80015ca:	4413      	add	r3, r2
 80015cc:	4a4b      	ldr	r2, [pc, #300]	@ (80016fc <HAL_DMA_Init+0x158>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	009a      	lsls	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a48      	ldr	r2, [pc, #288]	@ (8001700 <HAL_DMA_Init+0x15c>)
 80015de:	641a      	str	r2, [r3, #64]	@ 0x40
 80015e0:	e00e      	b.n	8001600 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b46      	ldr	r3, [pc, #280]	@ (8001704 <HAL_DMA_Init+0x160>)
 80015ea:	4413      	add	r3, r2
 80015ec:	4a43      	ldr	r2, [pc, #268]	@ (80016fc <HAL_DMA_Init+0x158>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	009a      	lsls	r2, r3, #2
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a42      	ldr	r2, [pc, #264]	@ (8001708 <HAL_DMA_Init+0x164>)
 80015fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800161a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800163c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800165a:	d039      	beq.n	80016d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	4a27      	ldr	r2, [pc, #156]	@ (8001700 <HAL_DMA_Init+0x15c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d11a      	bne.n	800169c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001666:	4b29      	ldr	r3, [pc, #164]	@ (800170c <HAL_DMA_Init+0x168>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	f003 031c 	and.w	r3, r3, #28
 8001672:	210f      	movs	r1, #15
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	4924      	ldr	r1, [pc, #144]	@ (800170c <HAL_DMA_Init+0x168>)
 800167c:	4013      	ands	r3, r2
 800167e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <HAL_DMA_Init+0x168>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6859      	ldr	r1, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168c:	f003 031c 	and.w	r3, r3, #28
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	491d      	ldr	r1, [pc, #116]	@ (800170c <HAL_DMA_Init+0x168>)
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
 800169a:	e019      	b.n	80016d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800169c:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <HAL_DMA_Init+0x16c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a4:	f003 031c 	and.w	r3, r3, #28
 80016a8:	210f      	movs	r1, #15
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	4917      	ldr	r1, [pc, #92]	@ (8001710 <HAL_DMA_Init+0x16c>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016b6:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <HAL_DMA_Init+0x16c>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6859      	ldr	r1, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	f003 031c 	and.w	r3, r3, #28
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	4911      	ldr	r1, [pc, #68]	@ (8001710 <HAL_DMA_Init+0x16c>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40020407 	.word	0x40020407
 80016f8:	bffdfff8 	.word	0xbffdfff8
 80016fc:	cccccccd 	.word	0xcccccccd
 8001700:	40020000 	.word	0x40020000
 8001704:	bffdfbf8 	.word	0xbffdfbf8
 8001708:	40020400 	.word	0x40020400
 800170c:	400200a8 	.word	0x400200a8
 8001710:	400204a8 	.word	0x400204a8

08001714 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d008      	beq.n	800173e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2204      	movs	r2, #4
 8001730:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e022      	b.n	8001784 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 020e 	bic.w	r2, r2, #14
 800174c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0201 	bic.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f003 021c 	and.w	r2, r3, #28
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	2101      	movs	r1, #1
 800176c:	fa01 f202 	lsl.w	r2, r1, r2
 8001770:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d005      	beq.n	80017b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2204      	movs	r2, #4
 80017ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	e029      	b.n	8001808 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 020e 	bic.w	r2, r2, #14
 80017c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0201 	bic.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d8:	f003 021c 	and.w	r2, r3, #28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4798      	blx	r3
    }
  }
  return status;
 8001808:	7bfb      	ldrb	r3, [r7, #15]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	f003 031c 	and.w	r3, r3, #28
 8001832:	2204      	movs	r2, #4
 8001834:	409a      	lsls	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d026      	beq.n	800188c <HAL_DMA_IRQHandler+0x7a>
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d021      	beq.n	800188c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	2b00      	cmp	r3, #0
 8001854:	d107      	bne.n	8001866 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0204 	bic.w	r2, r2, #4
 8001864:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	f003 021c 	and.w	r2, r3, #28
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	2104      	movs	r1, #4
 8001874:	fa01 f202 	lsl.w	r2, r1, r2
 8001878:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	2b00      	cmp	r3, #0
 8001880:	d071      	beq.n	8001966 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800188a:	e06c      	b.n	8001966 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001890:	f003 031c 	and.w	r3, r3, #28
 8001894:	2202      	movs	r2, #2
 8001896:	409a      	lsls	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d02e      	beq.n	80018fe <HAL_DMA_IRQHandler+0xec>
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d029      	beq.n	80018fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0320 	and.w	r3, r3, #32
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10b      	bne.n	80018d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 020a 	bic.w	r2, r2, #10
 80018c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d4:	f003 021c 	and.w	r2, r3, #28
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	2102      	movs	r1, #2
 80018de:	fa01 f202 	lsl.w	r2, r1, r2
 80018e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d038      	beq.n	8001966 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80018fc:	e033      	b.n	8001966 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	f003 031c 	and.w	r3, r3, #28
 8001906:	2208      	movs	r2, #8
 8001908:	409a      	lsls	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d02a      	beq.n	8001968 <HAL_DMA_IRQHandler+0x156>
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d025      	beq.n	8001968 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 020e 	bic.w	r2, r2, #14
 800192a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001930:	f003 021c 	and.w	r2, r3, #28
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001966:	bf00      	nop
 8001968:	bf00      	nop
}
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197e:	e17f      	b.n	8001c80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8171 	beq.w	8001c7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d005      	beq.n	80019b0 <HAL_GPIO_Init+0x40>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d130      	bne.n	8001a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019e6:	2201      	movs	r2, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	f003 0201 	and.w	r2, r3, #1
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d118      	bne.n	8001a50 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a24:	2201      	movs	r2, #1
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	08db      	lsrs	r3, r3, #3
 8001a3a:	f003 0201 	and.w	r2, r3, #1
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d017      	beq.n	8001a8c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d123      	bne.n	8001ae0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	08da      	lsrs	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3208      	adds	r2, #8
 8001aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	6939      	ldr	r1, [r7, #16]
 8001adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0203 	and.w	r2, r3, #3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80ac 	beq.w	8001c7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	4b5f      	ldr	r3, [pc, #380]	@ (8001ca0 <HAL_GPIO_Init+0x330>)
 8001b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b26:	4a5e      	ldr	r2, [pc, #376]	@ (8001ca0 <HAL_GPIO_Init+0x330>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ca0 <HAL_GPIO_Init+0x330>)
 8001b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b3a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca4 <HAL_GPIO_Init+0x334>)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	220f      	movs	r2, #15
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b64:	d025      	beq.n	8001bb2 <HAL_GPIO_Init+0x242>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4f      	ldr	r2, [pc, #316]	@ (8001ca8 <HAL_GPIO_Init+0x338>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01f      	beq.n	8001bae <HAL_GPIO_Init+0x23e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4e      	ldr	r2, [pc, #312]	@ (8001cac <HAL_GPIO_Init+0x33c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d019      	beq.n	8001baa <HAL_GPIO_Init+0x23a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4d      	ldr	r2, [pc, #308]	@ (8001cb0 <HAL_GPIO_Init+0x340>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_GPIO_Init+0x236>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4c      	ldr	r2, [pc, #304]	@ (8001cb4 <HAL_GPIO_Init+0x344>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00d      	beq.n	8001ba2 <HAL_GPIO_Init+0x232>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb8 <HAL_GPIO_Init+0x348>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x22e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4a      	ldr	r2, [pc, #296]	@ (8001cbc <HAL_GPIO_Init+0x34c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_GPIO_Init+0x22a>
 8001b96:	2306      	movs	r3, #6
 8001b98:	e00c      	b.n	8001bb4 <HAL_GPIO_Init+0x244>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e00a      	b.n	8001bb4 <HAL_GPIO_Init+0x244>
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	e008      	b.n	8001bb4 <HAL_GPIO_Init+0x244>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x244>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x244>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x244>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x244>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bc4:	4937      	ldr	r1, [pc, #220]	@ (8001ca4 <HAL_GPIO_Init+0x334>)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc0 <HAL_GPIO_Init+0x350>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bf6:	4a32      	ldr	r2, [pc, #200]	@ (8001cc0 <HAL_GPIO_Init+0x350>)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bfc:	4b30      	ldr	r3, [pc, #192]	@ (8001cc0 <HAL_GPIO_Init+0x350>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c20:	4a27      	ldr	r2, [pc, #156]	@ (8001cc0 <HAL_GPIO_Init+0x350>)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c26:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <HAL_GPIO_Init+0x350>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc0 <HAL_GPIO_Init+0x350>)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <HAL_GPIO_Init+0x350>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c74:	4a12      	ldr	r2, [pc, #72]	@ (8001cc0 <HAL_GPIO_Init+0x350>)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f47f ae78 	bne.w	8001980 <HAL_GPIO_Init+0x10>
  }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	48000400 	.word	0x48000400
 8001cac:	48000800 	.word	0x48000800
 8001cb0:	48000c00 	.word	0x48000c00
 8001cb4:	48001000 	.word	0x48001000
 8001cb8:	48001400 	.word	0x48001400
 8001cbc:	48001800 	.word	0x48001800
 8001cc0:	40010400 	.word	0x40010400

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	041a      	lsls	r2, r3, #16
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	43d9      	mvns	r1, r3
 8001d12:	887b      	ldrh	r3, [r7, #2]
 8001d14:	400b      	ands	r3, r1
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e08d      	b.n	8001e56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fd40 	bl	80007d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2224      	movs	r2, #36	@ 0x24
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d107      	bne.n	8001da2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	e006      	b.n	8001db0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001dae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d108      	bne.n	8001dca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	e007      	b.n	8001dda <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001de8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69d9      	ldr	r1, [r3, #28]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1a      	ldr	r2, [r3, #32]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b20      	cmp	r3, #32
 8001e72:	d138      	bne.n	8001ee6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e032      	b.n	8001ee8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2224      	movs	r2, #36	@ 0x24
 8001e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001eb0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ee6:	2302      	movs	r3, #2
  }
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	d139      	bne.n	8001f7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e033      	b.n	8001f80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2224      	movs	r2, #36	@ 0x24
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f7e:	2302      	movs	r3, #2
  }
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40007000 	.word	0x40007000

08001fa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fb6:	d130      	bne.n	800201a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb8:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fc4:	d038      	beq.n	8002038 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc6:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fce:	4a1e      	ldr	r2, [pc, #120]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800204c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2232      	movs	r2, #50	@ 0x32
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0c9b      	lsrs	r3, r3, #18
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fec:	e002      	b.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff4:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002000:	d102      	bne.n	8002008 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f2      	bne.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002008:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002014:	d110      	bne.n	8002038 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e00f      	b.n	800203a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800201a:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002026:	d007      	beq.n	8002038 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002028:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002030:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002032:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002036:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40007000 	.word	0x40007000
 800204c:	20000000 	.word	0x20000000
 8002050:	431bde83 	.word	0x431bde83

08002054 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e3ca      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002066:	4b97      	ldr	r3, [pc, #604]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002070:	4b94      	ldr	r3, [pc, #592]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80e4 	beq.w	8002250 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <HAL_RCC_OscConfig+0x4a>
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b0c      	cmp	r3, #12
 8002092:	f040 808b 	bne.w	80021ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b01      	cmp	r3, #1
 800209a:	f040 8087 	bne.w	80021ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800209e:	4b89      	ldr	r3, [pc, #548]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_RCC_OscConfig+0x62>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e3a2      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1a      	ldr	r2, [r3, #32]
 80020ba:	4b82      	ldr	r3, [pc, #520]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <HAL_RCC_OscConfig+0x7c>
 80020c6:	4b7f      	ldr	r3, [pc, #508]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020ce:	e005      	b.n	80020dc <HAL_RCC_OscConfig+0x88>
 80020d0:	4b7c      	ldr	r3, [pc, #496]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80020d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020dc:	4293      	cmp	r3, r2
 80020de:	d223      	bcs.n	8002128 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fd55 	bl	8002b94 <RCC_SetFlashLatencyFromMSIRange>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e383      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f4:	4b73      	ldr	r3, [pc, #460]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a72      	ldr	r2, [pc, #456]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80020fa:	f043 0308 	orr.w	r3, r3, #8
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b70      	ldr	r3, [pc, #448]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	496d      	ldr	r1, [pc, #436]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002112:	4b6c      	ldr	r3, [pc, #432]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	4968      	ldr	r1, [pc, #416]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
 8002126:	e025      	b.n	8002174 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002128:	4b66      	ldr	r3, [pc, #408]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a65      	ldr	r2, [pc, #404]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 800212e:	f043 0308 	orr.w	r3, r3, #8
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b63      	ldr	r3, [pc, #396]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4960      	ldr	r1, [pc, #384]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002146:	4b5f      	ldr	r3, [pc, #380]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	495b      	ldr	r1, [pc, #364]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fd15 	bl	8002b94 <RCC_SetFlashLatencyFromMSIRange>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e343      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002174:	f000 fc4a 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b52      	ldr	r3, [pc, #328]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	4950      	ldr	r1, [pc, #320]	@ (80022c8 <HAL_RCC_OscConfig+0x274>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	4a4e      	ldr	r2, [pc, #312]	@ (80022cc <HAL_RCC_OscConfig+0x278>)
 8002192:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002194:	4b4e      	ldr	r3, [pc, #312]	@ (80022d0 <HAL_RCC_OscConfig+0x27c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff f871 	bl	8001280 <HAL_InitTick>
 800219e:	4603      	mov	r3, r0
 80021a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d052      	beq.n	800224e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	e327      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d032      	beq.n	800221a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021b4:	4b43      	ldr	r3, [pc, #268]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a42      	ldr	r2, [pc, #264]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c0:	f7ff f8ae 	bl	8001320 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021c8:	f7ff f8aa 	bl	8001320 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e310      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021da:	4b3a      	ldr	r3, [pc, #232]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e6:	4b37      	ldr	r3, [pc, #220]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a36      	ldr	r2, [pc, #216]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b34      	ldr	r3, [pc, #208]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4931      	ldr	r1, [pc, #196]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002204:	4b2f      	ldr	r3, [pc, #188]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	492c      	ldr	r1, [pc, #176]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
 8002218:	e01a      	b.n	8002250 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800221a:	4b2a      	ldr	r3, [pc, #168]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a29      	ldr	r2, [pc, #164]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002220:	f023 0301 	bic.w	r3, r3, #1
 8002224:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002226:	f7ff f87b 	bl	8001320 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800222e:	f7ff f877 	bl	8001320 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e2dd      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002240:	4b20      	ldr	r3, [pc, #128]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x1da>
 800224c:	e000      	b.n	8002250 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800224e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d074      	beq.n	8002346 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b08      	cmp	r3, #8
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x21a>
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	2b0c      	cmp	r3, #12
 8002266:	d10e      	bne.n	8002286 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d10b      	bne.n	8002286 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d064      	beq.n	8002344 <HAL_RCC_OscConfig+0x2f0>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d160      	bne.n	8002344 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e2ba      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x24a>
 8002290:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0b      	ldr	r2, [pc, #44]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	e026      	b.n	80022ec <HAL_RCC_OscConfig+0x298>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022a6:	d115      	bne.n	80022d4 <HAL_RCC_OscConfig+0x280>
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a05      	ldr	r2, [pc, #20]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80022ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b03      	ldr	r3, [pc, #12]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a02      	ldr	r2, [pc, #8]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80022ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	e014      	b.n	80022ec <HAL_RCC_OscConfig+0x298>
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	08006f68 	.word	0x08006f68
 80022cc:	20000000 	.word	0x20000000
 80022d0:	20000004 	.word	0x20000004
 80022d4:	4ba0      	ldr	r3, [pc, #640]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a9f      	ldr	r2, [pc, #636]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80022da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b9d      	ldr	r3, [pc, #628]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a9c      	ldr	r2, [pc, #624]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80022e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7ff f814 	bl	8001320 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fc:	f7ff f810 	bl	8001320 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	@ 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e276      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230e:	4b92      	ldr	r3, [pc, #584]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x2a8>
 800231a:	e014      	b.n	8002346 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7ff f800 	bl	8001320 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7fe fffc 	bl	8001320 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	@ 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e262      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002336:	4b88      	ldr	r3, [pc, #544]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x2d0>
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d060      	beq.n	8002414 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b04      	cmp	r3, #4
 8002356:	d005      	beq.n	8002364 <HAL_RCC_OscConfig+0x310>
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d119      	bne.n	8002392 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d116      	bne.n	8002392 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002364:	4b7c      	ldr	r3, [pc, #496]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_OscConfig+0x328>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e23f      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b76      	ldr	r3, [pc, #472]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	4973      	ldr	r1, [pc, #460]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002390:	e040      	b.n	8002414 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d023      	beq.n	80023e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800239a:	4b6f      	ldr	r3, [pc, #444]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6e      	ldr	r2, [pc, #440]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe ffbb 	bl	8001320 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ae:	f7fe ffb7 	bl	8001320 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e21d      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c0:	4b65      	ldr	r3, [pc, #404]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b62      	ldr	r3, [pc, #392]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	495f      	ldr	r1, [pc, #380]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
 80023e0:	e018      	b.n	8002414 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80023e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7fe ff97 	bl	8001320 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f6:	f7fe ff93 	bl	8001320 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1f9      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002408:	4b53      	ldr	r3, [pc, #332]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b00      	cmp	r3, #0
 800241e:	d03c      	beq.n	800249a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01c      	beq.n	8002462 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002428:	4b4b      	ldr	r3, [pc, #300]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 800242a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800242e:	4a4a      	ldr	r2, [pc, #296]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7fe ff72 	bl	8001320 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002440:	f7fe ff6e 	bl	8001320 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1d4      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002452:	4b41      	ldr	r3, [pc, #260]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 8002454:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ef      	beq.n	8002440 <HAL_RCC_OscConfig+0x3ec>
 8002460:	e01b      	b.n	800249a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002462:	4b3d      	ldr	r3, [pc, #244]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 8002464:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002468:	4a3b      	ldr	r2, [pc, #236]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 800246a:	f023 0301 	bic.w	r3, r3, #1
 800246e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7fe ff55 	bl	8001320 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247a:	f7fe ff51 	bl	8001320 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e1b7      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800248c:	4b32      	ldr	r3, [pc, #200]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 800248e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ef      	bne.n	800247a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80a6 	beq.w	80025f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10d      	bne.n	80024d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b8:	4b27      	ldr	r3, [pc, #156]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	4a26      	ldr	r2, [pc, #152]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80024be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80024c4:	4b24      	ldr	r3, [pc, #144]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d0:	2301      	movs	r3, #1
 80024d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d4:	4b21      	ldr	r3, [pc, #132]	@ (800255c <HAL_RCC_OscConfig+0x508>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d118      	bne.n	8002512 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e0:	4b1e      	ldr	r3, [pc, #120]	@ (800255c <HAL_RCC_OscConfig+0x508>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1d      	ldr	r2, [pc, #116]	@ (800255c <HAL_RCC_OscConfig+0x508>)
 80024e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ec:	f7fe ff18 	bl	8001320 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f4:	f7fe ff14 	bl	8001320 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e17a      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002506:	4b15      	ldr	r3, [pc, #84]	@ (800255c <HAL_RCC_OscConfig+0x508>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d108      	bne.n	800252c <HAL_RCC_OscConfig+0x4d8>
 800251a:	4b0f      	ldr	r3, [pc, #60]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002520:	4a0d      	ldr	r2, [pc, #52]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800252a:	e029      	b.n	8002580 <HAL_RCC_OscConfig+0x52c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b05      	cmp	r3, #5
 8002532:	d115      	bne.n	8002560 <HAL_RCC_OscConfig+0x50c>
 8002534:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253a:	4a07      	ldr	r2, [pc, #28]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002544:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254a:	4a03      	ldr	r2, [pc, #12]	@ (8002558 <HAL_RCC_OscConfig+0x504>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002554:	e014      	b.n	8002580 <HAL_RCC_OscConfig+0x52c>
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	40007000 	.word	0x40007000
 8002560:	4b9c      	ldr	r3, [pc, #624]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002566:	4a9b      	ldr	r2, [pc, #620]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002570:	4b98      	ldr	r3, [pc, #608]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002576:	4a97      	ldr	r2, [pc, #604]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d016      	beq.n	80025b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7fe feca 	bl	8001320 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7fe fec6 	bl	8001320 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e12a      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a6:	4b8b      	ldr	r3, [pc, #556]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ed      	beq.n	8002590 <HAL_RCC_OscConfig+0x53c>
 80025b4:	e015      	b.n	80025e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b6:	f7fe feb3 	bl	8001320 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025be:	f7fe feaf 	bl	8001320 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e113      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025d4:	4b7f      	ldr	r3, [pc, #508]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1ed      	bne.n	80025be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025e2:	7ffb      	ldrb	r3, [r7, #31]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e8:	4b7a      	ldr	r3, [pc, #488]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ec:	4a79      	ldr	r2, [pc, #484]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 80025ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80fe 	beq.w	80027fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002602:	2b02      	cmp	r3, #2
 8002604:	f040 80d0 	bne.w	80027a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002608:	4b72      	ldr	r3, [pc, #456]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f003 0203 	and.w	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	429a      	cmp	r2, r3
 800261a:	d130      	bne.n	800267e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	3b01      	subs	r3, #1
 8002628:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d127      	bne.n	800267e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002638:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d11f      	bne.n	800267e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002648:	2a07      	cmp	r2, #7
 800264a:	bf14      	ite	ne
 800264c:	2201      	movne	r2, #1
 800264e:	2200      	moveq	r2, #0
 8002650:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002652:	4293      	cmp	r3, r2
 8002654:	d113      	bne.n	800267e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	3b01      	subs	r3, #1
 8002664:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d109      	bne.n	800267e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	085b      	lsrs	r3, r3, #1
 8002676:	3b01      	subs	r3, #1
 8002678:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d06e      	beq.n	800275c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b0c      	cmp	r3, #12
 8002682:	d069      	beq.n	8002758 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002684:	4b53      	ldr	r3, [pc, #332]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d105      	bne.n	800269c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002690:	4b50      	ldr	r3, [pc, #320]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0ad      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026a0:	4b4c      	ldr	r3, [pc, #304]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a4b      	ldr	r2, [pc, #300]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 80026a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026ac:	f7fe fe38 	bl	8001320 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe fe34 	bl	8001320 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e09a      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c6:	4b43      	ldr	r3, [pc, #268]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d2:	4b40      	ldr	r3, [pc, #256]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	4b40      	ldr	r3, [pc, #256]	@ (80027d8 <HAL_RCC_OscConfig+0x784>)
 80026d8:	4013      	ands	r3, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026e2:	3a01      	subs	r2, #1
 80026e4:	0112      	lsls	r2, r2, #4
 80026e6:	4311      	orrs	r1, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026ec:	0212      	lsls	r2, r2, #8
 80026ee:	4311      	orrs	r1, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026f4:	0852      	lsrs	r2, r2, #1
 80026f6:	3a01      	subs	r2, #1
 80026f8:	0552      	lsls	r2, r2, #21
 80026fa:	4311      	orrs	r1, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002700:	0852      	lsrs	r2, r2, #1
 8002702:	3a01      	subs	r2, #1
 8002704:	0652      	lsls	r2, r2, #25
 8002706:	4311      	orrs	r1, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800270c:	0912      	lsrs	r2, r2, #4
 800270e:	0452      	lsls	r2, r2, #17
 8002710:	430a      	orrs	r2, r1
 8002712:	4930      	ldr	r1, [pc, #192]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 8002714:	4313      	orrs	r3, r2
 8002716:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002718:	4b2e      	ldr	r3, [pc, #184]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2d      	ldr	r2, [pc, #180]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 800271e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002722:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002724:	4b2b      	ldr	r3, [pc, #172]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a2a      	ldr	r2, [pc, #168]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 800272a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800272e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002730:	f7fe fdf6 	bl	8001320 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fdf2 	bl	8001320 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e058      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274a:	4b22      	ldr	r3, [pc, #136]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002756:	e050      	b.n	80027fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e04f      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275c:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d148      	bne.n	80027fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002768:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a19      	ldr	r2, [pc, #100]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 800276e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002772:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002774:	4b17      	ldr	r3, [pc, #92]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a16      	ldr	r2, [pc, #88]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 800277a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800277e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002780:	f7fe fdce 	bl	8001320 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fdca 	bl	8001320 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e030      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279a:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x734>
 80027a6:	e028      	b.n	80027fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2b0c      	cmp	r3, #12
 80027ac:	d023      	beq.n	80027f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ae:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a08      	ldr	r2, [pc, #32]	@ (80027d4 <HAL_RCC_OscConfig+0x780>)
 80027b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fe fdb1 	bl	8001320 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c0:	e00c      	b.n	80027dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c2:	f7fe fdad 	bl	8001320 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d905      	bls.n	80027dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e013      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
 80027d4:	40021000 	.word	0x40021000
 80027d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027dc:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_RCC_OscConfig+0x7b0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ec      	bne.n	80027c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_RCC_OscConfig+0x7b0>)
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	4905      	ldr	r1, [pc, #20]	@ (8002804 <HAL_RCC_OscConfig+0x7b0>)
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_RCC_OscConfig+0x7b4>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	60cb      	str	r3, [r1, #12]
 80027f4:	e001      	b.n	80027fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	feeefffc 	.word	0xfeeefffc

0800280c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0e7      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002820:	4b75      	ldr	r3, [pc, #468]	@ (80029f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d910      	bls.n	8002850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b72      	ldr	r3, [pc, #456]	@ (80029f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 0207 	bic.w	r2, r3, #7
 8002836:	4970      	ldr	r1, [pc, #448]	@ (80029f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b6e      	ldr	r3, [pc, #440]	@ (80029f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0cf      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d010      	beq.n	800287e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	4b66      	ldr	r3, [pc, #408]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002868:	429a      	cmp	r2, r3
 800286a:	d908      	bls.n	800287e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800286c:	4b63      	ldr	r3, [pc, #396]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4960      	ldr	r1, [pc, #384]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d04c      	beq.n	8002924 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002892:	4b5a      	ldr	r3, [pc, #360]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d121      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0a6      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028aa:	4b54      	ldr	r3, [pc, #336]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d115      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e09a      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028c2:	4b4e      	ldr	r3, [pc, #312]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e08e      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d2:	4b4a      	ldr	r3, [pc, #296]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e086      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028e2:	4b46      	ldr	r3, [pc, #280]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f023 0203 	bic.w	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4943      	ldr	r1, [pc, #268]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f4:	f7fe fd14 	bl	8001320 <HAL_GetTick>
 80028f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fc:	f7fe fd10 	bl	8001320 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e06e      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	4b3a      	ldr	r3, [pc, #232]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 020c 	and.w	r2, r3, #12
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	429a      	cmp	r2, r3
 8002922:	d1eb      	bne.n	80028fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d010      	beq.n	8002952 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	4b31      	ldr	r3, [pc, #196]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800293c:	429a      	cmp	r2, r3
 800293e:	d208      	bcs.n	8002952 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002940:	4b2e      	ldr	r3, [pc, #184]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	492b      	ldr	r1, [pc, #172]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002952:	4b29      	ldr	r3, [pc, #164]	@ (80029f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d210      	bcs.n	8002982 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002960:	4b25      	ldr	r3, [pc, #148]	@ (80029f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 0207 	bic.w	r2, r3, #7
 8002968:	4923      	ldr	r1, [pc, #140]	@ (80029f8 <HAL_RCC_ClockConfig+0x1ec>)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002970:	4b21      	ldr	r3, [pc, #132]	@ (80029f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e036      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800298e:	4b1b      	ldr	r3, [pc, #108]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4918      	ldr	r1, [pc, #96]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 800299c:	4313      	orrs	r3, r2
 800299e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d009      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ac:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4910      	ldr	r1, [pc, #64]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029c0:	f000 f824 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	490b      	ldr	r1, [pc, #44]	@ (8002a00 <HAL_RCC_ClockConfig+0x1f4>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
 80029dc:	4a09      	ldr	r2, [pc, #36]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f8>)
 80029de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029e0:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <HAL_RCC_ClockConfig+0x1fc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fc4b 	bl	8001280 <HAL_InitTick>
 80029ea:	4603      	mov	r3, r0
 80029ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80029ee:	7afb      	ldrb	r3, [r7, #11]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40022000 	.word	0x40022000
 80029fc:	40021000 	.word	0x40021000
 8002a00:	08006f68 	.word	0x08006f68
 8002a04:	20000000 	.word	0x20000000
 8002a08:	20000004 	.word	0x20000004

08002a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	@ 0x24
 8002a10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a24:	4b3b      	ldr	r3, [pc, #236]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x34>
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b0c      	cmp	r3, #12
 8002a38:	d121      	bne.n	8002a7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d11e      	bne.n	8002a7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a40:	4b34      	ldr	r3, [pc, #208]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a4c:	4b31      	ldr	r3, [pc, #196]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	e005      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a68:	4a2b      	ldr	r2, [pc, #172]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10d      	bne.n	8002a94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d102      	bne.n	8002a8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a84:	4b25      	ldr	r3, [pc, #148]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x110>)
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	e004      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a90:	4b23      	ldr	r3, [pc, #140]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d134      	bne.n	8002b04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d003      	beq.n	8002ab2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d003      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ab0:	e005      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ab4:	617b      	str	r3, [r7, #20]
      break;
 8002ab6:	e005      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ab8:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aba:	617b      	str	r3, [r7, #20]
      break;
 8002abc:	e002      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	617b      	str	r3, [r7, #20]
      break;
 8002ac2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ac4:	4b13      	ldr	r3, [pc, #76]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	3301      	adds	r3, #1
 8002ad0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ad2:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	fb03 f202 	mul.w	r2, r3, r2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002aea:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	0e5b      	lsrs	r3, r3, #25
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	3301      	adds	r3, #1
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b04:	69bb      	ldr	r3, [r7, #24]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3724      	adds	r7, #36	@ 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	08006f80 	.word	0x08006f80
 8002b1c:	00f42400 	.word	0x00f42400
 8002b20:	007a1200 	.word	0x007a1200

08002b24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b28:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000000 	.word	0x20000000

08002b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b40:	f7ff fff0 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4904      	ldr	r1, [pc, #16]	@ (8002b64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08006f78 	.word	0x08006f78

08002b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b6c:	f7ff ffda 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0adb      	lsrs	r3, r3, #11
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4904      	ldr	r1, [pc, #16]	@ (8002b90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08006f78 	.word	0x08006f78

08002b94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bac:	f7ff f9ee 	bl	8001f8c <HAL_PWREx_GetVoltageRange>
 8002bb0:	6178      	str	r0, [r7, #20]
 8002bb2:	e014      	b.n	8002bde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb4:	4b25      	ldr	r3, [pc, #148]	@ (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb8:	4a24      	ldr	r2, [pc, #144]	@ (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bc0:	4b22      	ldr	r3, [pc, #136]	@ (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bcc:	f7ff f9de 	bl	8001f8c <HAL_PWREx_GetVoltageRange>
 8002bd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002be4:	d10b      	bne.n	8002bfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b80      	cmp	r3, #128	@ 0x80
 8002bea:	d919      	bls.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2ba0      	cmp	r3, #160	@ 0xa0
 8002bf0:	d902      	bls.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	e013      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	e010      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b80      	cmp	r3, #128	@ 0x80
 8002c02:	d902      	bls.n	8002c0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c04:	2303      	movs	r3, #3
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	e00a      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b80      	cmp	r3, #128	@ 0x80
 8002c0e:	d102      	bne.n	8002c16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c10:	2302      	movs	r3, #2
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	e004      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b70      	cmp	r3, #112	@ 0x70
 8002c1a:	d101      	bne.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 0207 	bic.w	r2, r3, #7
 8002c28:	4909      	ldr	r1, [pc, #36]	@ (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c30:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d001      	beq.n	8002c42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40022000 	.word	0x40022000

08002c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c60:	2300      	movs	r3, #0
 8002c62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d041      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c78:	d02a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c7e:	d824      	bhi.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c84:	d008      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c8a:	d81e      	bhi.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c94:	d010      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c96:	e018      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c98:	4b86      	ldr	r3, [pc, #536]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a85      	ldr	r2, [pc, #532]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ca4:	e015      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f001 f829 	bl	8003d04 <RCCEx_PLLSAI1_Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cb6:	e00c      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3320      	adds	r3, #32
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f001 f914 	bl	8003eec <RCCEx_PLLSAI2_Config>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cc8:	e003      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	74fb      	strb	r3, [r7, #19]
      break;
 8002cce:	e000      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cd8:	4b76      	ldr	r3, [pc, #472]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cde:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ce6:	4973      	ldr	r1, [pc, #460]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002cee:	e001      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d041      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d08:	d02a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d0e:	d824      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d14:	d008      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d1a:	d81e      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d24:	d010      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d26:	e018      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d28:	4b62      	ldr	r3, [pc, #392]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a61      	ldr	r2, [pc, #388]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d34:	e015      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 ffe1 	bl	8003d04 <RCCEx_PLLSAI1_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d46:	e00c      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3320      	adds	r3, #32
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f001 f8cc 	bl	8003eec <RCCEx_PLLSAI2_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d58:	e003      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d5e:	e000      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d68:	4b52      	ldr	r3, [pc, #328]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d76:	494f      	ldr	r1, [pc, #316]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d7e:	e001      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80a0 	beq.w	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d96:	4b47      	ldr	r3, [pc, #284]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dac:	4b41      	ldr	r3, [pc, #260]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db0:	4a40      	ldr	r2, [pc, #256]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db8:	4b3e      	ldr	r3, [pc, #248]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a3a      	ldr	r2, [pc, #232]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dd4:	f7fe faa4 	bl	8001320 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dda:	e009      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ddc:	f7fe faa0 	bl	8001320 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d902      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	74fb      	strb	r3, [r7, #19]
        break;
 8002dee:	e005      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002df0:	4b31      	ldr	r3, [pc, #196]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ef      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d15c      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e02:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01f      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d019      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e20:	4b24      	ldr	r3, [pc, #144]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e2c:	4b21      	ldr	r3, [pc, #132]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e32:	4a20      	ldr	r2, [pc, #128]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e42:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e4c:	4a19      	ldr	r2, [pc, #100]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7fe fa5f 	bl	8001320 <HAL_GetTick>
 8002e62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e64:	e00b      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7fe fa5b 	bl	8001320 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d902      	bls.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	74fb      	strb	r3, [r7, #19]
            break;
 8002e7c:	e006      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ec      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10c      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e92:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ea2:	4904      	ldr	r1, [pc, #16]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002eaa:	e009      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eac:	7cfb      	ldrb	r3, [r7, #19]
 8002eae:	74bb      	strb	r3, [r7, #18]
 8002eb0:	e006      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebc:	7cfb      	ldrb	r3, [r7, #19]
 8002ebe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec0:	7c7b      	ldrb	r3, [r7, #17]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d105      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec6:	4b9e      	ldr	r3, [pc, #632]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eca:	4a9d      	ldr	r2, [pc, #628]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ede:	4b98      	ldr	r3, [pc, #608]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	f023 0203 	bic.w	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eec:	4994      	ldr	r1, [pc, #592]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f00:	4b8f      	ldr	r3, [pc, #572]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f06:	f023 020c 	bic.w	r2, r3, #12
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0e:	498c      	ldr	r1, [pc, #560]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f22:	4b87      	ldr	r3, [pc, #540]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	4983      	ldr	r1, [pc, #524]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f44:	4b7e      	ldr	r3, [pc, #504]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f52:	497b      	ldr	r1, [pc, #492]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f66:	4b76      	ldr	r3, [pc, #472]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f74:	4972      	ldr	r1, [pc, #456]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f88:	4b6d      	ldr	r3, [pc, #436]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f96:	496a      	ldr	r1, [pc, #424]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002faa:	4b65      	ldr	r3, [pc, #404]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	4961      	ldr	r1, [pc, #388]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fcc:	4b5c      	ldr	r3, [pc, #368]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fda:	4959      	ldr	r1, [pc, #356]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fee:	4b54      	ldr	r3, [pc, #336]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ffc:	4950      	ldr	r1, [pc, #320]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003010:	4b4b      	ldr	r3, [pc, #300]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003016:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301e:	4948      	ldr	r1, [pc, #288]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003032:	4b43      	ldr	r3, [pc, #268]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003038:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003040:	493f      	ldr	r1, [pc, #252]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d028      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003054:	4b3a      	ldr	r3, [pc, #232]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003062:	4937      	ldr	r1, [pc, #220]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800306e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003072:	d106      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003074:	4b32      	ldr	r3, [pc, #200]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a31      	ldr	r2, [pc, #196]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800307e:	60d3      	str	r3, [r2, #12]
 8003080:	e011      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003086:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800308a:	d10c      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	2101      	movs	r1, #1
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fe36 	bl	8003d04 <RCCEx_PLLSAI1_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800309c:	7cfb      	ldrb	r3, [r7, #19]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80030a2:	7cfb      	ldrb	r3, [r7, #19]
 80030a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d028      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030b2:	4b23      	ldr	r3, [pc, #140]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c0:	491f      	ldr	r1, [pc, #124]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030d0:	d106      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030dc:	60d3      	str	r3, [r2, #12]
 80030de:	e011      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2101      	movs	r1, #1
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fe07 	bl	8003d04 <RCCEx_PLLSAI1_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d02b      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003116:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800311e:	4908      	ldr	r1, [pc, #32]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800312e:	d109      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003130:	4b03      	ldr	r3, [pc, #12]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a02      	ldr	r2, [pc, #8]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800313a:	60d3      	str	r3, [r2, #12]
 800313c:	e014      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003148:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800314c:	d10c      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3304      	adds	r3, #4
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fdd5 	bl	8003d04 <RCCEx_PLLSAI1_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d02f      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003174:	4b2b      	ldr	r3, [pc, #172]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003182:	4928      	ldr	r1, [pc, #160]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800318e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003192:	d10d      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	2102      	movs	r1, #2
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fdb2 	bl	8003d04 <RCCEx_PLLSAI1_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d014      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	74bb      	strb	r3, [r7, #18]
 80031ae:	e011      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3320      	adds	r3, #32
 80031be:	2102      	movs	r1, #2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fe93 	bl	8003eec <RCCEx_PLLSAI2_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ca:	7cfb      	ldrb	r3, [r7, #19]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031e0:	4b10      	ldr	r3, [pc, #64]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ee:	490d      	ldr	r1, [pc, #52]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003202:	4b08      	ldr	r3, [pc, #32]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003208:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003212:	4904      	ldr	r1, [pc, #16]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800321a:	7cbb      	ldrb	r3, [r7, #18]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000

08003228 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800323a:	d13e      	bne.n	80032ba <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800323c:	4bb2      	ldr	r3, [pc, #712]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003246:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800324e:	d028      	beq.n	80032a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003256:	f200 8542 	bhi.w	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003260:	d005      	beq.n	800326e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003268:	d00e      	beq.n	8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800326a:	f000 bd38 	b.w	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800326e:	4ba6      	ldr	r3, [pc, #664]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b02      	cmp	r3, #2
 800327a:	f040 8532 	bne.w	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800327e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003282:	61fb      	str	r3, [r7, #28]
      break;
 8003284:	f000 bd2d 	b.w	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003288:	4b9f      	ldr	r3, [pc, #636]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800328a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b02      	cmp	r3, #2
 8003294:	f040 8527 	bne.w	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003298:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800329c:	61fb      	str	r3, [r7, #28]
      break;
 800329e:	f000 bd22 	b.w	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80032a2:	4b99      	ldr	r3, [pc, #612]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032ae:	f040 851c 	bne.w	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80032b2:	4b96      	ldr	r3, [pc, #600]	@ (800350c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80032b4:	61fb      	str	r3, [r7, #28]
      break;
 80032b6:	f000 bd18 	b.w	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ba:	4b93      	ldr	r3, [pc, #588]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d036      	beq.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d840      	bhi.n	8003352 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d003      	beq.n	80032de <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d020      	beq.n	800331e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80032dc:	e039      	b.n	8003352 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80032de:	4b8a      	ldr	r3, [pc, #552]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d116      	bne.n	8003318 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80032ea:	4b87      	ldr	r3, [pc, #540]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80032f6:	4b84      	ldr	r3, [pc, #528]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	e005      	b.n	800330e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003302:	4b81      	ldr	r3, [pc, #516]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003304:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	4a80      	ldr	r2, [pc, #512]	@ (8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003314:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003316:	e01f      	b.n	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
      break;
 800331c:	e01c      	b.n	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800331e:	4b7a      	ldr	r3, [pc, #488]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800332a:	d102      	bne.n	8003332 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800332c:	4b79      	ldr	r3, [pc, #484]	@ (8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800332e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003330:	e012      	b.n	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
      break;
 8003336:	e00f      	b.n	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003338:	4b73      	ldr	r3, [pc, #460]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003344:	d102      	bne.n	800334c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003346:	4b74      	ldr	r3, [pc, #464]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003348:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800334a:	e005      	b.n	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	61bb      	str	r3, [r7, #24]
      break;
 8003350:	e002      	b.n	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
      break;
 8003356:	bf00      	nop
    }

    switch(PeriphClk)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800335e:	f000 80dd 	beq.w	800351c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003368:	f200 84c1 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003372:	f000 80d3 	beq.w	800351c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800337c:	f200 84b7 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003386:	f000 835f 	beq.w	8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003390:	f200 84ad 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800339a:	f000 847e 	beq.w	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a4:	f200 84a3 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ae:	f000 82cd 	beq.w	800394c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033b8:	f200 8499 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033c2:	f000 80ab 	beq.w	800351c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033cc:	f200 848f 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033d6:	f000 8090 	beq.w	80034fa <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033e0:	f200 8485 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033ea:	d07f      	beq.n	80034ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033f2:	f200 847c 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033fc:	f000 8403 	beq.w	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003406:	f200 8472 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003410:	f000 83af 	beq.w	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800341a:	f200 8468 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003424:	f000 8379 	beq.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800342e:	f200 845e 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b80      	cmp	r3, #128	@ 0x80
 8003436:	f000 8344 	beq.w	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b80      	cmp	r3, #128	@ 0x80
 800343e:	f200 8456 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b20      	cmp	r3, #32
 8003446:	d84b      	bhi.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 844f 	beq.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	2b1f      	cmp	r3, #31
 8003456:	f200 844a 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800345a:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 800345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003460:	08003649 	.word	0x08003649
 8003464:	080036b7 	.word	0x080036b7
 8003468:	08003cef 	.word	0x08003cef
 800346c:	0800374b 	.word	0x0800374b
 8003470:	08003cef 	.word	0x08003cef
 8003474:	08003cef 	.word	0x08003cef
 8003478:	08003cef 	.word	0x08003cef
 800347c:	080037d1 	.word	0x080037d1
 8003480:	08003cef 	.word	0x08003cef
 8003484:	08003cef 	.word	0x08003cef
 8003488:	08003cef 	.word	0x08003cef
 800348c:	08003cef 	.word	0x08003cef
 8003490:	08003cef 	.word	0x08003cef
 8003494:	08003cef 	.word	0x08003cef
 8003498:	08003cef 	.word	0x08003cef
 800349c:	08003849 	.word	0x08003849
 80034a0:	08003cef 	.word	0x08003cef
 80034a4:	08003cef 	.word	0x08003cef
 80034a8:	08003cef 	.word	0x08003cef
 80034ac:	08003cef 	.word	0x08003cef
 80034b0:	08003cef 	.word	0x08003cef
 80034b4:	08003cef 	.word	0x08003cef
 80034b8:	08003cef 	.word	0x08003cef
 80034bc:	08003cef 	.word	0x08003cef
 80034c0:	08003cef 	.word	0x08003cef
 80034c4:	08003cef 	.word	0x08003cef
 80034c8:	08003cef 	.word	0x08003cef
 80034cc:	08003cef 	.word	0x08003cef
 80034d0:	08003cef 	.word	0x08003cef
 80034d4:	08003cef 	.word	0x08003cef
 80034d8:	08003cef 	.word	0x08003cef
 80034dc:	080038cb 	.word	0x080038cb
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b40      	cmp	r3, #64	@ 0x40
 80034e4:	f000 82c1 	beq.w	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80034e8:	f000 bc01 	b.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80034ec:	69b9      	ldr	r1, [r7, #24]
 80034ee:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80034f2:	f000 fdd9 	bl	80040a8 <RCCEx_GetSAIxPeriphCLKFreq>
 80034f6:	61f8      	str	r0, [r7, #28]
      break;
 80034f8:	e3fa      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80034fa:	69b9      	ldr	r1, [r7, #24]
 80034fc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003500:	f000 fdd2 	bl	80040a8 <RCCEx_GetSAIxPeriphCLKFreq>
 8003504:	61f8      	str	r0, [r7, #28]
      break;
 8003506:	e3f3      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003508:	40021000 	.word	0x40021000
 800350c:	0003d090 	.word	0x0003d090
 8003510:	08006f80 	.word	0x08006f80
 8003514:	00f42400 	.word	0x00f42400
 8003518:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800351c:	4ba9      	ldr	r3, [pc, #676]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003526:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800352e:	d00c      	beq.n	800354a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003536:	d87f      	bhi.n	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800353e:	d04e      	beq.n	80035de <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003546:	d01d      	beq.n	8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003548:	e076      	b.n	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800354a:	4b9e      	ldr	r3, [pc, #632]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d172      	bne.n	800363c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003556:	4b9b      	ldr	r3, [pc, #620]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8003562:	4b98      	ldr	r3, [pc, #608]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	e005      	b.n	800357a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800356e:	4b95      	ldr	r3, [pc, #596]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	4a93      	ldr	r2, [pc, #588]	@ (80037c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800357c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003580:	61fb      	str	r3, [r7, #28]
          break;
 8003582:	e05b      	b.n	800363c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003584:	4b8f      	ldr	r3, [pc, #572]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003590:	d156      	bne.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003592:	4b8c      	ldr	r3, [pc, #560]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800359a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800359e:	d14f      	bne.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80035a0:	4b88      	ldr	r3, [pc, #544]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035aa:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	fb03 f202 	mul.w	r2, r3, r2
 80035b4:	4b83      	ldr	r3, [pc, #524]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	3301      	adds	r3, #1
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80035c6:	4b7f      	ldr	r3, [pc, #508]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	0d5b      	lsrs	r3, r3, #21
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	3301      	adds	r3, #1
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	61fb      	str	r3, [r7, #28]
          break;
 80035dc:	e030      	b.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80035de:	4b79      	ldr	r3, [pc, #484]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035ea:	d12b      	bne.n	8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80035ec:	4b75      	ldr	r3, [pc, #468]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035f8:	d124      	bne.n	8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80035fa:	4b72      	ldr	r3, [pc, #456]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003604:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	fb03 f202 	mul.w	r2, r3, r2
 800360e:	4b6d      	ldr	r3, [pc, #436]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	3301      	adds	r3, #1
 800361a:	fbb2 f3f3 	udiv	r3, r2, r3
 800361e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003620:	4b68      	ldr	r3, [pc, #416]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	0d5b      	lsrs	r3, r3, #21
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	3301      	adds	r3, #1
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	fbb2 f3f3 	udiv	r3, r2, r3
 8003634:	61fb      	str	r3, [r7, #28]
          break;
 8003636:	e005      	b.n	8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8003638:	bf00      	nop
 800363a:	e359      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800363c:	bf00      	nop
 800363e:	e357      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003640:	bf00      	nop
 8003642:	e355      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003644:	bf00      	nop
        break;
 8003646:	e353      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003648:	4b5e      	ldr	r3, [pc, #376]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d827      	bhi.n	80036aa <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800365a:	a201      	add	r2, pc, #4	@ (adr r2, 8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	08003671 	.word	0x08003671
 8003664:	08003679 	.word	0x08003679
 8003668:	08003681 	.word	0x08003681
 800366c:	08003695 	.word	0x08003695
          frequency = HAL_RCC_GetPCLK2Freq();
 8003670:	f7ff fa7a 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 8003674:	61f8      	str	r0, [r7, #28]
          break;
 8003676:	e01d      	b.n	80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003678:	f7ff f9c8 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 800367c:	61f8      	str	r0, [r7, #28]
          break;
 800367e:	e019      	b.n	80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003680:	4b50      	ldr	r3, [pc, #320]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368c:	d10f      	bne.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800368e:	4b4f      	ldr	r3, [pc, #316]	@ (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003690:	61fb      	str	r3, [r7, #28]
          break;
 8003692:	e00c      	b.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003694:	4b4b      	ldr	r3, [pc, #300]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d107      	bne.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80036a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036a6:	61fb      	str	r3, [r7, #28]
          break;
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80036aa:	bf00      	nop
 80036ac:	e320      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80036ae:	bf00      	nop
 80036b0:	e31e      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80036b2:	bf00      	nop
        break;
 80036b4:	e31c      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80036b6:	4b43      	ldr	r3, [pc, #268]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b0c      	cmp	r3, #12
 80036c6:	d83a      	bhi.n	800373e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80036c8:	a201      	add	r2, pc, #4	@ (adr r2, 80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	08003705 	.word	0x08003705
 80036d4:	0800373f 	.word	0x0800373f
 80036d8:	0800373f 	.word	0x0800373f
 80036dc:	0800373f 	.word	0x0800373f
 80036e0:	0800370d 	.word	0x0800370d
 80036e4:	0800373f 	.word	0x0800373f
 80036e8:	0800373f 	.word	0x0800373f
 80036ec:	0800373f 	.word	0x0800373f
 80036f0:	08003715 	.word	0x08003715
 80036f4:	0800373f 	.word	0x0800373f
 80036f8:	0800373f 	.word	0x0800373f
 80036fc:	0800373f 	.word	0x0800373f
 8003700:	08003729 	.word	0x08003729
          frequency = HAL_RCC_GetPCLK1Freq();
 8003704:	f7ff fa1a 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8003708:	61f8      	str	r0, [r7, #28]
          break;
 800370a:	e01d      	b.n	8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 800370c:	f7ff f97e 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8003710:	61f8      	str	r0, [r7, #28]
          break;
 8003712:	e019      	b.n	8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003714:	4b2b      	ldr	r3, [pc, #172]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003720:	d10f      	bne.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8003722:	4b2a      	ldr	r3, [pc, #168]	@ (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003724:	61fb      	str	r3, [r7, #28]
          break;
 8003726:	e00c      	b.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003728:	4b26      	ldr	r3, [pc, #152]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b02      	cmp	r3, #2
 8003734:	d107      	bne.n	8003746 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8003736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800373a:	61fb      	str	r3, [r7, #28]
          break;
 800373c:	e003      	b.n	8003746 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800373e:	bf00      	nop
 8003740:	e2d6      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003742:	bf00      	nop
 8003744:	e2d4      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003746:	bf00      	nop
        break;
 8003748:	e2d2      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800374a:	4b1e      	ldr	r3, [pc, #120]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003750:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003754:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b30      	cmp	r3, #48	@ 0x30
 800375a:	d021      	beq.n	80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b30      	cmp	r3, #48	@ 0x30
 8003760:	d829      	bhi.n	80037b6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2b20      	cmp	r3, #32
 8003766:	d011      	beq.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b20      	cmp	r3, #32
 800376c:	d823      	bhi.n	80037b6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b10      	cmp	r3, #16
 8003778:	d004      	beq.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800377a:	e01c      	b.n	80037b6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800377c:	f7ff f9de 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8003780:	61f8      	str	r0, [r7, #28]
          break;
 8003782:	e01d      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8003784:	f7ff f942 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8003788:	61f8      	str	r0, [r7, #28]
          break;
 800378a:	e019      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800378c:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003798:	d10f      	bne.n	80037ba <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800379a:	4b0c      	ldr	r3, [pc, #48]	@ (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800379c:	61fb      	str	r3, [r7, #28]
          break;
 800379e:	e00c      	b.n	80037ba <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80037a0:	4b08      	ldr	r3, [pc, #32]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d107      	bne.n	80037be <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80037ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037b2:	61fb      	str	r3, [r7, #28]
          break;
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80037b6:	bf00      	nop
 80037b8:	e29a      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037ba:	bf00      	nop
 80037bc:	e298      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037be:	bf00      	nop
        break;
 80037c0:	e296      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000
 80037c8:	08006f80 	.word	0x08006f80
 80037cc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80037d0:	4b9b      	ldr	r3, [pc, #620]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037da:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2bc0      	cmp	r3, #192	@ 0xc0
 80037e0:	d021      	beq.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80037e6:	d829      	bhi.n	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b80      	cmp	r3, #128	@ 0x80
 80037ec:	d011      	beq.n	8003812 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b80      	cmp	r3, #128	@ 0x80
 80037f2:	d823      	bhi.n	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b40      	cmp	r3, #64	@ 0x40
 80037fe:	d004      	beq.n	800380a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003800:	e01c      	b.n	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003802:	f7ff f99b 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8003806:	61f8      	str	r0, [r7, #28]
          break;
 8003808:	e01d      	b.n	8003846 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800380a:	f7ff f8ff 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 800380e:	61f8      	str	r0, [r7, #28]
          break;
 8003810:	e019      	b.n	8003846 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003812:	4b8b      	ldr	r3, [pc, #556]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800381e:	d10f      	bne.n	8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8003820:	4b88      	ldr	r3, [pc, #544]	@ (8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003822:	61fb      	str	r3, [r7, #28]
          break;
 8003824:	e00c      	b.n	8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003826:	4b86      	ldr	r3, [pc, #536]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b02      	cmp	r3, #2
 8003832:	d107      	bne.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8003834:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003838:	61fb      	str	r3, [r7, #28]
          break;
 800383a:	e003      	b.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 800383c:	bf00      	nop
 800383e:	e257      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003840:	bf00      	nop
 8003842:	e255      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003844:	bf00      	nop
        break;
 8003846:	e253      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003848:	4b7d      	ldr	r3, [pc, #500]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003852:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800385a:	d025      	beq.n	80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003862:	d82c      	bhi.n	80038be <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800386a:	d013      	beq.n	8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003872:	d824      	bhi.n	80038be <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003880:	d004      	beq.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8003882:	e01c      	b.n	80038be <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003884:	f7ff f95a 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8003888:	61f8      	str	r0, [r7, #28]
          break;
 800388a:	e01d      	b.n	80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800388c:	f7ff f8be 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8003890:	61f8      	str	r0, [r7, #28]
          break;
 8003892:	e019      	b.n	80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003894:	4b6a      	ldr	r3, [pc, #424]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a0:	d10f      	bne.n	80038c2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80038a2:	4b68      	ldr	r3, [pc, #416]	@ (8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80038a4:	61fb      	str	r3, [r7, #28]
          break;
 80038a6:	e00c      	b.n	80038c2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80038a8:	4b65      	ldr	r3, [pc, #404]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d107      	bne.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80038b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ba:	61fb      	str	r3, [r7, #28]
          break;
 80038bc:	e003      	b.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 80038be:	bf00      	nop
 80038c0:	e216      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80038c2:	bf00      	nop
 80038c4:	e214      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80038c6:	bf00      	nop
        break;
 80038c8:	e212      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80038ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038d4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038dc:	d025      	beq.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038e4:	d82c      	bhi.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ec:	d013      	beq.n	8003916 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038f4:	d824      	bhi.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003902:	d004      	beq.n	800390e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003904:	e01c      	b.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003906:	f7ff f919 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 800390a:	61f8      	str	r0, [r7, #28]
          break;
 800390c:	e01d      	b.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800390e:	f7ff f87d 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8003912:	61f8      	str	r0, [r7, #28]
          break;
 8003914:	e019      	b.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003916:	4b4a      	ldr	r3, [pc, #296]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003922:	d10f      	bne.n	8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8003924:	4b47      	ldr	r3, [pc, #284]	@ (8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003926:	61fb      	str	r3, [r7, #28]
          break;
 8003928:	e00c      	b.n	8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800392a:	4b45      	ldr	r3, [pc, #276]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b02      	cmp	r3, #2
 8003936:	d107      	bne.n	8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8003938:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800393c:	61fb      	str	r3, [r7, #28]
          break;
 800393e:	e003      	b.n	8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8003940:	bf00      	nop
 8003942:	e1d5      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003944:	bf00      	nop
 8003946:	e1d3      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003948:	bf00      	nop
        break;
 800394a:	e1d1      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800394c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003952:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003956:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800395e:	d00c      	beq.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003966:	d864      	bhi.n	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800396e:	d008      	beq.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003976:	d030      	beq.n	80039da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8003978:	e05b      	b.n	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800397a:	f7ff f847 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 800397e:	61f8      	str	r0, [r7, #28]
          break;
 8003980:	e05c      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003982:	4b2f      	ldr	r3, [pc, #188]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800398a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800398e:	d152      	bne.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8003990:	4b2b      	ldr	r3, [pc, #172]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d04c      	beq.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800399c:	4b28      	ldr	r3, [pc, #160]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	0a1b      	lsrs	r3, r3, #8
 80039a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039a6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	fb03 f202 	mul.w	r2, r3, r2
 80039b0:	4b23      	ldr	r3, [pc, #140]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	3301      	adds	r3, #1
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80039c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	0e5b      	lsrs	r3, r3, #25
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	3301      	adds	r3, #1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	61fb      	str	r3, [r7, #28]
          break;
 80039d8:	e02d      	b.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80039da:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039e6:	d128      	bne.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80039e8:	4b15      	ldr	r3, [pc, #84]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d022      	beq.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80039f4:	4b12      	ldr	r3, [pc, #72]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039fe:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	fb03 f202 	mul.w	r2, r3, r2
 8003a08:	4b0d      	ldr	r3, [pc, #52]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	3301      	adds	r3, #1
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003a1a:	4b09      	ldr	r3, [pc, #36]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	0e5b      	lsrs	r3, r3, #25
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	3301      	adds	r3, #1
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	61fb      	str	r3, [r7, #28]
          break;
 8003a30:	e003      	b.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8003a32:	bf00      	nop
 8003a34:	e15c      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a36:	bf00      	nop
 8003a38:	e15a      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a3a:	bf00      	nop
        break;
 8003a3c:	e158      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003a48:	4b9d      	ldr	r3, [pc, #628]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a52:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003a5a:	f7ff f885 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 8003a5e:	61f8      	str	r0, [r7, #28]
        break;
 8003a60:	e146      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8003a62:	f7fe ffd3 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8003a66:	61f8      	str	r0, [r7, #28]
        break;
 8003a68:	e142      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003a6a:	4b95      	ldr	r3, [pc, #596]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a70:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003a74:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a7c:	d013      	beq.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a84:	d819      	bhi.n	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a92:	d004      	beq.n	8003a9e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8003a94:	e011      	b.n	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a96:	f7ff f851 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8003a9a:	61f8      	str	r0, [r7, #28]
          break;
 8003a9c:	e010      	b.n	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8003a9e:	f7fe ffb5 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8003aa2:	61f8      	str	r0, [r7, #28]
          break;
 8003aa4:	e00c      	b.n	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003aa6:	4b86      	ldr	r3, [pc, #536]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab2:	d104      	bne.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8003ab4:	4b83      	ldr	r3, [pc, #524]	@ (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003ab6:	61fb      	str	r3, [r7, #28]
          break;
 8003ab8:	e001      	b.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8003aba:	bf00      	nop
 8003abc:	e118      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003abe:	bf00      	nop
        break;
 8003ac0:	e116      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003acc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad4:	d013      	beq.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003adc:	d819      	bhi.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d004      	beq.n	8003aee <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003aea:	d004      	beq.n	8003af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8003aec:	e011      	b.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003aee:	f7ff f825 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8003af2:	61f8      	str	r0, [r7, #28]
          break;
 8003af4:	e010      	b.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003af6:	f7fe ff89 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8003afa:	61f8      	str	r0, [r7, #28]
          break;
 8003afc:	e00c      	b.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003afe:	4b70      	ldr	r3, [pc, #448]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b0a:	d104      	bne.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8003b0c:	4b6d      	ldr	r3, [pc, #436]	@ (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003b0e:	61fb      	str	r3, [r7, #28]
          break;
 8003b10:	e001      	b.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8003b12:	bf00      	nop
 8003b14:	e0ec      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b16:	bf00      	nop
        break;
 8003b18:	e0ea      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003b1a:	4b69      	ldr	r3, [pc, #420]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b24:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b2c:	d013      	beq.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b34:	d819      	bhi.n	8003b6a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d004      	beq.n	8003b46 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b42:	d004      	beq.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8003b44:	e011      	b.n	8003b6a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003b46:	f7fe fff9 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8003b4a:	61f8      	str	r0, [r7, #28]
          break;
 8003b4c:	e010      	b.n	8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8003b4e:	f7fe ff5d 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8003b52:	61f8      	str	r0, [r7, #28]
          break;
 8003b54:	e00c      	b.n	8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b56:	4b5a      	ldr	r3, [pc, #360]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b62:	d104      	bne.n	8003b6e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8003b64:	4b57      	ldr	r3, [pc, #348]	@ (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003b66:	61fb      	str	r3, [r7, #28]
          break;
 8003b68:	e001      	b.n	8003b6e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8003b6a:	bf00      	nop
 8003b6c:	e0c0      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b6e:	bf00      	nop
        break;
 8003b70:	e0be      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003b72:	4b53      	ldr	r3, [pc, #332]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b78:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003b7c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b84:	d02c      	beq.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b8c:	d833      	bhi.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b94:	d01a      	beq.n	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b9c:	d82b      	bhi.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d004      	beq.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003baa:	d004      	beq.n	8003bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8003bac:	e023      	b.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003bae:	f7fe ffc5 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8003bb2:	61f8      	str	r0, [r7, #28]
          break;
 8003bb4:	e026      	b.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003bb6:	4b42      	ldr	r3, [pc, #264]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d11a      	bne.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8003bc4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003bc8:	61fb      	str	r3, [r7, #28]
          break;
 8003bca:	e016      	b.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003bcc:	4b3c      	ldr	r3, [pc, #240]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd8:	d111      	bne.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8003bda:	4b3a      	ldr	r3, [pc, #232]	@ (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003bdc:	61fb      	str	r3, [r7, #28]
          break;
 8003bde:	e00e      	b.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003be0:	4b37      	ldr	r3, [pc, #220]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d109      	bne.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8003bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bf2:	61fb      	str	r3, [r7, #28]
          break;
 8003bf4:	e005      	b.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8003bf6:	bf00      	nop
 8003bf8:	e07a      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003bfa:	bf00      	nop
 8003bfc:	e078      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003bfe:	bf00      	nop
 8003c00:	e076      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c02:	bf00      	nop
        break;
 8003c04:	e074      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003c06:	4b2e      	ldr	r3, [pc, #184]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003c10:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c18:	d02c      	beq.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c20:	d833      	bhi.n	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c28:	d01a      	beq.n	8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c30:	d82b      	bhi.n	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d004      	beq.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c3e:	d004      	beq.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8003c40:	e023      	b.n	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c42:	f7fe ff7b 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8003c46:	61f8      	str	r0, [r7, #28]
          break;
 8003c48:	e026      	b.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d11a      	bne.n	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8003c58:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003c5c:	61fb      	str	r3, [r7, #28]
          break;
 8003c5e:	e016      	b.n	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c60:	4b17      	ldr	r3, [pc, #92]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c6c:	d111      	bne.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8003c6e:	4b15      	ldr	r3, [pc, #84]	@ (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003c70:	61fb      	str	r3, [r7, #28]
          break;
 8003c72:	e00e      	b.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003c74:	4b12      	ldr	r3, [pc, #72]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d109      	bne.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8003c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c86:	61fb      	str	r3, [r7, #28]
          break;
 8003c88:	e005      	b.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8003c8a:	bf00      	nop
 8003c8c:	e030      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c8e:	bf00      	nop
 8003c90:	e02e      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c92:	bf00      	nop
 8003c94:	e02c      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c96:	bf00      	nop
        break;
 8003c98:	e02a      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003c9a:	4b09      	ldr	r3, [pc, #36]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ca4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d004      	beq.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb2:	d009      	beq.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8003cb4:	e012      	b.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003cb6:	f7fe ff41 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8003cba:	61f8      	str	r0, [r7, #28]
          break;
 8003cbc:	e00e      	b.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd4:	d101      	bne.n	8003cda <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8003cd8:	61fb      	str	r3, [r7, #28]
          break;
 8003cda:	bf00      	nop
        break;
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e004      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003cee:	bf00      	nop
    }
  }

  return(frequency);
 8003cf0:	69fb      	ldr	r3, [r7, #28]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	00f42400 	.word	0x00f42400

08003d04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d12:	4b75      	ldr	r3, [pc, #468]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d018      	beq.n	8003d50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d1e:	4b72      	ldr	r3, [pc, #456]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0203 	and.w	r2, r3, #3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d10d      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
       ||
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d36:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	091b      	lsrs	r3, r3, #4
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
       ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d047      	beq.n	8003dda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
 8003d4e:	e044      	b.n	8003dda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d018      	beq.n	8003d8a <RCCEx_PLLSAI1_Config+0x86>
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d825      	bhi.n	8003da8 <RCCEx_PLLSAI1_Config+0xa4>
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d002      	beq.n	8003d66 <RCCEx_PLLSAI1_Config+0x62>
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d009      	beq.n	8003d78 <RCCEx_PLLSAI1_Config+0x74>
 8003d64:	e020      	b.n	8003da8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d66:	4b60      	ldr	r3, [pc, #384]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d11d      	bne.n	8003dae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d76:	e01a      	b.n	8003dae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d78:	4b5b      	ldr	r3, [pc, #364]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d116      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d88:	e013      	b.n	8003db2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d8a:	4b57      	ldr	r3, [pc, #348]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10f      	bne.n	8003db6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d96:	4b54      	ldr	r3, [pc, #336]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003da6:	e006      	b.n	8003db6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dac:	e004      	b.n	8003db8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dae:	bf00      	nop
 8003db0:	e002      	b.n	8003db8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003db2:	bf00      	nop
 8003db4:	e000      	b.n	8003db8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003db6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10d      	bne.n	8003dda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	4944      	ldr	r1, [pc, #272]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d17d      	bne.n	8003edc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003de0:	4b41      	ldr	r3, [pc, #260]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a40      	ldr	r2, [pc, #256]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dec:	f7fd fa98 	bl	8001320 <HAL_GetTick>
 8003df0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003df2:	e009      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003df4:	f7fd fa94 	bl	8001320 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d902      	bls.n	8003e08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	73fb      	strb	r3, [r7, #15]
        break;
 8003e06:	e005      	b.n	8003e14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e08:	4b37      	ldr	r3, [pc, #220]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1ef      	bne.n	8003df4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d160      	bne.n	8003edc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d111      	bne.n	8003e44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e20:	4b31      	ldr	r3, [pc, #196]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6892      	ldr	r2, [r2, #8]
 8003e30:	0211      	lsls	r1, r2, #8
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68d2      	ldr	r2, [r2, #12]
 8003e36:	0912      	lsrs	r2, r2, #4
 8003e38:	0452      	lsls	r2, r2, #17
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	492a      	ldr	r1, [pc, #168]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	610b      	str	r3, [r1, #16]
 8003e42:	e027      	b.n	8003e94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d112      	bne.n	8003e70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003e52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6892      	ldr	r2, [r2, #8]
 8003e5a:	0211      	lsls	r1, r2, #8
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6912      	ldr	r2, [r2, #16]
 8003e60:	0852      	lsrs	r2, r2, #1
 8003e62:	3a01      	subs	r2, #1
 8003e64:	0552      	lsls	r2, r2, #21
 8003e66:	430a      	orrs	r2, r1
 8003e68:	491f      	ldr	r1, [pc, #124]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	610b      	str	r3, [r1, #16]
 8003e6e:	e011      	b.n	8003e94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e70:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6892      	ldr	r2, [r2, #8]
 8003e80:	0211      	lsls	r1, r2, #8
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6952      	ldr	r2, [r2, #20]
 8003e86:	0852      	lsrs	r2, r2, #1
 8003e88:	3a01      	subs	r2, #1
 8003e8a:	0652      	lsls	r2, r2, #25
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	4916      	ldr	r1, [pc, #88]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e94:	4b14      	ldr	r3, [pc, #80]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a13      	ldr	r2, [pc, #76]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fd fa3e 	bl	8001320 <HAL_GetTick>
 8003ea4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ea6:	e009      	b.n	8003ebc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ea8:	f7fd fa3a 	bl	8001320 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d902      	bls.n	8003ebc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	73fb      	strb	r3, [r7, #15]
          break;
 8003eba:	e005      	b.n	8003ec8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0ef      	beq.n	8003ea8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ece:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	4904      	ldr	r1, [pc, #16]	@ (8003ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000

08003eec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003efa:	4b6a      	ldr	r3, [pc, #424]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d018      	beq.n	8003f38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f06:	4b67      	ldr	r3, [pc, #412]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0203 	and.w	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d10d      	bne.n	8003f32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
       ||
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f1e:	4b61      	ldr	r3, [pc, #388]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	091b      	lsrs	r3, r3, #4
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d047      	beq.n	8003fc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
 8003f36:	e044      	b.n	8003fc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d018      	beq.n	8003f72 <RCCEx_PLLSAI2_Config+0x86>
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d825      	bhi.n	8003f90 <RCCEx_PLLSAI2_Config+0xa4>
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d002      	beq.n	8003f4e <RCCEx_PLLSAI2_Config+0x62>
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d009      	beq.n	8003f60 <RCCEx_PLLSAI2_Config+0x74>
 8003f4c:	e020      	b.n	8003f90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f4e:	4b55      	ldr	r3, [pc, #340]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d11d      	bne.n	8003f96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f5e:	e01a      	b.n	8003f96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f60:	4b50      	ldr	r3, [pc, #320]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d116      	bne.n	8003f9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f70:	e013      	b.n	8003f9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f72:	4b4c      	ldr	r3, [pc, #304]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10f      	bne.n	8003f9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f7e:	4b49      	ldr	r3, [pc, #292]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f8e:	e006      	b.n	8003f9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
      break;
 8003f94:	e004      	b.n	8003fa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f96:	bf00      	nop
 8003f98:	e002      	b.n	8003fa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e000      	b.n	8003fa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10d      	bne.n	8003fc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6819      	ldr	r1, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	4939      	ldr	r1, [pc, #228]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d167      	bne.n	8004098 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003fc8:	4b36      	ldr	r3, [pc, #216]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a35      	ldr	r2, [pc, #212]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd4:	f7fd f9a4 	bl	8001320 <HAL_GetTick>
 8003fd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fda:	e009      	b.n	8003ff0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fdc:	f7fd f9a0 	bl	8001320 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d902      	bls.n	8003ff0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	73fb      	strb	r3, [r7, #15]
        break;
 8003fee:	e005      	b.n	8003ffc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ef      	bne.n	8003fdc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d14a      	bne.n	8004098 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d111      	bne.n	800402c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004008:	4b26      	ldr	r3, [pc, #152]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004010:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6892      	ldr	r2, [r2, #8]
 8004018:	0211      	lsls	r1, r2, #8
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68d2      	ldr	r2, [r2, #12]
 800401e:	0912      	lsrs	r2, r2, #4
 8004020:	0452      	lsls	r2, r2, #17
 8004022:	430a      	orrs	r2, r1
 8004024:	491f      	ldr	r1, [pc, #124]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004026:	4313      	orrs	r3, r2
 8004028:	614b      	str	r3, [r1, #20]
 800402a:	e011      	b.n	8004050 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800402c:	4b1d      	ldr	r3, [pc, #116]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004034:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6892      	ldr	r2, [r2, #8]
 800403c:	0211      	lsls	r1, r2, #8
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6912      	ldr	r2, [r2, #16]
 8004042:	0852      	lsrs	r2, r2, #1
 8004044:	3a01      	subs	r2, #1
 8004046:	0652      	lsls	r2, r2, #25
 8004048:	430a      	orrs	r2, r1
 800404a:	4916      	ldr	r1, [pc, #88]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800404c:	4313      	orrs	r3, r2
 800404e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004050:	4b14      	ldr	r3, [pc, #80]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a13      	ldr	r2, [pc, #76]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800405a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7fd f960 	bl	8001320 <HAL_GetTick>
 8004060:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004062:	e009      	b.n	8004078 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004064:	f7fd f95c 	bl	8001320 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d902      	bls.n	8004078 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	73fb      	strb	r3, [r7, #15]
          break;
 8004076:	e005      	b.n	8004084 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004078:	4b0a      	ldr	r3, [pc, #40]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0ef      	beq.n	8004064 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800408a:	4b06      	ldr	r3, [pc, #24]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	4904      	ldr	r1, [pc, #16]	@ (80040a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004094:	4313      	orrs	r3, r2
 8004096:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004098:	7bfb      	ldrb	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000

080040a8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b089      	sub	sp, #36	@ 0x24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040c4:	d10c      	bne.n	80040e0 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80040c6:	4b6e      	ldr	r3, [pc, #440]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040cc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80040d0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040d8:	d112      	bne.n	8004100 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80040da:	4b6a      	ldr	r3, [pc, #424]	@ (8004284 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	e00f      	b.n	8004100 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e6:	d10b      	bne.n	8004100 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80040e8:	4b65      	ldr	r3, [pc, #404]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80040f2:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040fa:	d101      	bne.n	8004100 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80040fc:	4b61      	ldr	r3, [pc, #388]	@ (8004284 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80040fe:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b00      	cmp	r3, #0
 8004104:	f040 80b4 	bne.w	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004112:	d003      	beq.n	800411c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800411a:	d135      	bne.n	8004188 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800411c:	4b58      	ldr	r3, [pc, #352]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004124:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004128:	f040 80a1 	bne.w	800426e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800412c:	4b54      	ldr	r3, [pc, #336]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 809a 	beq.w	800426e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800413a:	4b51      	ldr	r3, [pc, #324]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	3301      	adds	r3, #1
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800414e:	4b4c      	ldr	r3, [pc, #304]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004158:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004160:	4b47      	ldr	r3, [pc, #284]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800416c:	2311      	movs	r3, #17
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	e001      	b.n	8004176 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004172:	2307      	movs	r3, #7
 8004174:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	fb03 f202 	mul.w	r2, r3, r2
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004186:	e072      	b.n	800426e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d133      	bne.n	80041f6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800418e:	4b3c      	ldr	r3, [pc, #240]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004196:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800419a:	d169      	bne.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800419c:	4b38      	ldr	r3, [pc, #224]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d063      	beq.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80041a8:	4b35      	ldr	r3, [pc, #212]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	3301      	adds	r3, #1
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ba:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80041bc:	4b30      	ldr	r3, [pc, #192]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	0a1b      	lsrs	r3, r3, #8
 80041c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041c6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80041ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80041da:	2311      	movs	r3, #17
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e001      	b.n	80041e4 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80041e0:	2307      	movs	r3, #7
 80041e2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	fb03 f202 	mul.w	r2, r3, r2
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	e03c      	b.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041fc:	d003      	beq.n	8004206 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004204:	d134      	bne.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004206:	4b1e      	ldr	r3, [pc, #120]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800420e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004212:	d12d      	bne.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004214:	4b1a      	ldr	r3, [pc, #104]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d027      	beq.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004220:	4b17      	ldr	r3, [pc, #92]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	3301      	adds	r3, #1
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004232:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004234:	4b12      	ldr	r3, [pc, #72]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800423e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004246:	4b0e      	ldr	r3, [pc, #56]	@ (8004280 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004252:	2311      	movs	r3, #17
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	e001      	b.n	800425c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004258:	2307      	movs	r3, #7
 800425a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	fb03 f202 	mul.w	r2, r3, r2
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	e000      	b.n	8004270 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800426e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004270:	69fb      	ldr	r3, [r7, #28]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3724      	adds	r7, #36	@ 0x24
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000
 8004284:	001fff68 	.word	0x001fff68

08004288 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d904      	bls.n	80042a6 <HAL_SAI_InitProtocol+0x1e>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	3b03      	subs	r3, #3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d812      	bhi.n	80042ca <HAL_SAI_InitProtocol+0x42>
 80042a4:	e008      	b.n	80042b8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fba3 	bl	80049f8 <SAI_InitI2S>
 80042b2:	4603      	mov	r3, r0
 80042b4:	75fb      	strb	r3, [r7, #23]
      break;
 80042b6:	e00b      	b.n	80042d0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 fc4c 	bl	8004b5c <SAI_InitPCM>
 80042c4:	4603      	mov	r3, r0
 80042c6:	75fb      	strb	r3, [r7, #23]
      break;
 80042c8:	e002      	b.n	80042d0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	75fb      	strb	r3, [r7, #23]
      break;
 80042ce:	bf00      	nop
  }

  if (status == HAL_OK)
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d104      	bne.n	80042e0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f808 	bl	80042ec <HAL_SAI_Init>
 80042dc:	4603      	mov	r3, r0
 80042de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e155      	b.n	80045aa <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fc fc2e 	bl	8000b74 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fca1 	bl	8004c60 <SAI_Disable>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e140      	b.n	80045aa <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d00c      	beq.n	8004352 <HAL_SAI_Init+0x66>
 8004338:	2b02      	cmp	r3, #2
 800433a:	d80d      	bhi.n	8004358 <HAL_SAI_Init+0x6c>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <HAL_SAI_Init+0x5a>
 8004340:	2b01      	cmp	r3, #1
 8004342:	d003      	beq.n	800434c <HAL_SAI_Init+0x60>
 8004344:	e008      	b.n	8004358 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	61fb      	str	r3, [r7, #28]
      break;
 800434a:	e008      	b.n	800435e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800434c:	2310      	movs	r3, #16
 800434e:	61fb      	str	r3, [r7, #28]
      break;
 8004350:	e005      	b.n	800435e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004352:	2320      	movs	r3, #32
 8004354:	61fb      	str	r3, [r7, #28]
      break;
 8004356:	e002      	b.n	800435e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
      break;
 800435c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b03      	cmp	r3, #3
 8004364:	d81d      	bhi.n	80043a2 <HAL_SAI_Init+0xb6>
 8004366:	a201      	add	r2, pc, #4	@ (adr r2, 800436c <HAL_SAI_Init+0x80>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	0800437d 	.word	0x0800437d
 8004370:	08004383 	.word	0x08004383
 8004374:	0800438b 	.word	0x0800438b
 8004378:	08004393 	.word	0x08004393
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
      break;
 8004380:	e012      	b.n	80043a8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004382:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004386:	617b      	str	r3, [r7, #20]
      break;
 8004388:	e00e      	b.n	80043a8 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800438a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800438e:	617b      	str	r3, [r7, #20]
      break;
 8004390:	e00a      	b.n	80043a8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004392:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004396:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	61fb      	str	r3, [r7, #28]
      break;
 80043a0:	e002      	b.n	80043a8 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
      break;
 80043a6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a81      	ldr	r2, [pc, #516]	@ (80045b4 <HAL_SAI_Init+0x2c8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_SAI_Init+0xd0>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a80      	ldr	r2, [pc, #512]	@ (80045b8 <HAL_SAI_Init+0x2cc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d103      	bne.n	80043c4 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 80043bc:	4a7f      	ldr	r2, [pc, #508]	@ (80045bc <HAL_SAI_Init+0x2d0>)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e002      	b.n	80043ca <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80043c4:	4a7e      	ldr	r2, [pc, #504]	@ (80045c0 <HAL_SAI_Init+0x2d4>)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d041      	beq.n	8004456 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a77      	ldr	r2, [pc, #476]	@ (80045b4 <HAL_SAI_Init+0x2c8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_SAI_Init+0xfa>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a75      	ldr	r2, [pc, #468]	@ (80045b8 <HAL_SAI_Init+0x2cc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d105      	bne.n	80043f2 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80043e6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80043ea:	f7fe ff1d 	bl	8003228 <HAL_RCCEx_GetPeriphCLKFreq>
 80043ee:	6138      	str	r0, [r7, #16]
 80043f0:	e004      	b.n	80043fc <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80043f2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80043f6:	f7fe ff17 	bl	8003228 <HAL_RCCEx_GetPeriphCLKFreq>
 80043fa:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	461a      	mov	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	025b      	lsls	r3, r3, #9
 800440e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004412:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a6b      	ldr	r2, [pc, #428]	@ (80045c4 <HAL_SAI_Init+0x2d8>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	08da      	lsrs	r2, r3, #3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004422:	68f9      	ldr	r1, [r7, #12]
 8004424:	4b67      	ldr	r3, [pc, #412]	@ (80045c4 <HAL_SAI_Init+0x2d8>)
 8004426:	fba3 2301 	umull	r2, r3, r3, r1
 800442a:	08da      	lsrs	r2, r3, #3
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	1aca      	subs	r2, r1, r3
 8004436:	2a08      	cmp	r2, #8
 8004438:	d904      	bls.n	8004444 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004448:	2b04      	cmp	r3, #4
 800444a:	d104      	bne.n	8004456 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	085a      	lsrs	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_SAI_Init+0x17a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d109      	bne.n	800447a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_SAI_Init+0x186>
 800446e:	2300      	movs	r3, #0
 8004470:	e001      	b.n	8004476 <HAL_SAI_Init+0x18a>
 8004472:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	e008      	b.n	800448c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447e:	2b01      	cmp	r3, #1
 8004480:	d102      	bne.n	8004488 <HAL_SAI_Init+0x19c>
 8004482:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004486:	e000      	b.n	800448a <HAL_SAI_Init+0x19e>
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6819      	ldr	r1, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b4c      	ldr	r3, [pc, #304]	@ (80045c8 <HAL_SAI_Init+0x2dc>)
 8004498:	400b      	ands	r3, r1
 800449a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6819      	ldr	r1, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80044b0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b6:	431a      	orrs	r2, r3
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 80044c4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80044d0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	051b      	lsls	r3, r3, #20
 80044d8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80044f0:	f023 030f 	bic.w	r3, r3, #15
 80044f4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6859      	ldr	r1, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699a      	ldr	r2, [r3, #24]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6899      	ldr	r1, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b2b      	ldr	r3, [pc, #172]	@ (80045cc <HAL_SAI_Init+0x2e0>)
 8004520:	400b      	ands	r3, r1
 8004522:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6899      	ldr	r1, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004534:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800453a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004540:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004546:	3b01      	subs	r3, #1
 8004548:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800454a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68d9      	ldr	r1, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8004562:	400b      	ands	r3, r1
 8004564:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68d9      	ldr	r1, [r3, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004574:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800457c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004582:	3b01      	subs	r3, #1
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40015404 	.word	0x40015404
 80045b8:	40015424 	.word	0x40015424
 80045bc:	40015400 	.word	0x40015400
 80045c0:	40015800 	.word	0x40015800
 80045c4:	cccccccd 	.word	0xcccccccd
 80045c8:	ff05c010 	.word	0xff05c010
 80045cc:	fff88000 	.word	0xfff88000

080045d0 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_SAI_Abort+0x1a>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e053      	b.n	8004692 <HAL_SAI_Abort+0xc2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fb34 	bl	8004c60 <SAI_Disable>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004610:	d125      	bne.n	800465e <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004620:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b12      	cmp	r3, #18
 800462c:	d108      	bne.n	8004640 <HAL_SAI_Abort+0x70>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d004      	beq.n	8004640 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800463a:	4618      	mov	r0, r3
 800463c:	f7fd f86a 	bl	8001714 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b22      	cmp	r3, #34	@ 0x22
 800464a:	d108      	bne.n	800465e <HAL_SAI_Abort+0x8e>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004650:	2b00      	cmp	r3, #0
 8004652:	d004      	beq.n	800465e <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004658:	4618      	mov	r0, r3
 800465a:	f7fd f85b 	bl	8001714 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2200      	movs	r2, #0
 8004664:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800466e:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0208 	orr.w	r2, r2, #8
 800467e:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8004690:	7bfb      	ldrb	r3, [r7, #15]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8192 	beq.w	80049d6 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <HAL_SAI_IRQHandler+0x4c>
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
 80046e6:	e176      	b.n	80049d6 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01e      	beq.n	8004730 <HAL_SAI_IRQHandler+0x94>
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d019      	beq.n	8004730 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2201      	movs	r2, #1
 8004702:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b22      	cmp	r3, #34	@ 0x22
 800470e:	d101      	bne.n	8004714 <HAL_SAI_IRQHandler+0x78>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <HAL_SAI_IRQHandler+0x7a>
 8004714:	2302      	movs	r3, #2
 8004716:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f95b 	bl	80049e4 <HAL_SAI_ErrorCallback>
 800472e:	e152      	b.n	80049d6 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d011      	beq.n	800475e <HAL_SAI_IRQHandler+0xc2>
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00c      	beq.n	800475e <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2202      	movs	r2, #2
 800474a:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8140 	beq.w	80049d6 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800475a:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800475c:	e13b      	b.n	80049d6 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d055      	beq.n	8004814 <HAL_SAI_IRQHandler+0x178>
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d050      	beq.n	8004814 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2220      	movs	r2, #32
 8004778:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004780:	f043 0204 	orr.w	r2, r3, #4
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d038      	beq.n	8004806 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d016      	beq.n	80047ca <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047a0:	4a8f      	ldr	r2, [pc, #572]	@ (80049e0 <HAL_SAI_IRQHandler+0x344>)
 80047a2:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fc fff1 	bl	8001790 <HAL_DMA_Abort_IT>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f90d 	bl	80049e4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 80fc 	beq.w	80049cc <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d8:	4a81      	ldr	r2, [pc, #516]	@ (80049e0 <HAL_SAI_IRQHandler+0x344>)
 80047da:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fc ffd5 	bl	8001790 <HAL_DMA_Abort_IT>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80ef 	beq.w	80049cc <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f8f0 	bl	80049e4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004804:	e0e2      	b.n	80049cc <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff fee2 	bl	80045d0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f8e9 	bl	80049e4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004812:	e0db      	b.n	80049cc <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d055      	beq.n	80048ca <HAL_SAI_IRQHandler+0x22e>
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	d050      	beq.n	80048ca <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2240      	movs	r2, #64	@ 0x40
 800482e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004836:	f043 0208 	orr.w	r2, r3, #8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d038      	beq.n	80048bc <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d016      	beq.n	8004880 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004856:	4a62      	ldr	r2, [pc, #392]	@ (80049e0 <HAL_SAI_IRQHandler+0x344>)
 8004858:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800485e:	4618      	mov	r0, r3
 8004860:	f7fc ff96 	bl	8001790 <HAL_DMA_Abort_IT>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004870:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f8b2 	bl	80049e4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80a3 	beq.w	80049d0 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488e:	4a54      	ldr	r2, [pc, #336]	@ (80049e0 <HAL_SAI_IRQHandler+0x344>)
 8004890:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004896:	4618      	mov	r0, r3
 8004898:	f7fc ff7a 	bl	8001790 <HAL_DMA_Abort_IT>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 8096 	beq.w	80049d0 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f895 	bl	80049e4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80048ba:	e089      	b.n	80049d0 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff fe87 	bl	80045d0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f88e 	bl	80049e4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80048c8:	e082      	b.n	80049d0 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d061      	beq.n	8004998 <HAL_SAI_IRQHandler+0x2fc>
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d05c      	beq.n	8004998 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2204      	movs	r2, #4
 80048e4:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048ec:	f043 0220 	orr.w	r2, r3, #32
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d036      	beq.n	800496e <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d016      	beq.n	8004936 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490c:	4a34      	ldr	r2, [pc, #208]	@ (80049e0 <HAL_SAI_IRQHandler+0x344>)
 800490e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004914:	4618      	mov	r0, r3
 8004916:	f7fc ff3b 	bl	8001790 <HAL_DMA_Abort_IT>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004926:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f857 	bl	80049e4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493a:	2b00      	cmp	r3, #0
 800493c:	d04a      	beq.n	80049d4 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004942:	4a27      	ldr	r2, [pc, #156]	@ (80049e0 <HAL_SAI_IRQHandler+0x344>)
 8004944:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494a:	4618      	mov	r0, r3
 800494c:	f7fc ff20 	bl	8001790 <HAL_DMA_Abort_IT>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d03e      	beq.n	80049d4 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800495c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f83c 	bl	80049e4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800496c:	e032      	b.n	80049d4 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2200      	movs	r2, #0
 8004974:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800497e:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f827 	bl	80049e4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004996:	e01d      	b.n	80049d4 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d019      	beq.n	80049d6 <HAL_SAI_IRQHandler+0x33a>
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d014      	beq.n	80049d6 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2210      	movs	r2, #16
 80049b2:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ba:	f043 0210 	orr.w	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f80d 	bl	80049e4 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80049ca:	e004      	b.n	80049d6 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80049cc:	bf00      	nop
 80049ce:	e002      	b.n	80049d6 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80049d4:	bf00      	nop
}
 80049d6:	bf00      	nop
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	08004cd5 	.word	0x08004cd5

080049e4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <SAI_InitI2S+0x2e>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d103      	bne.n	8004a2e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a2c:	e002      	b.n	8004a34 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004a3a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a42:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e077      	b.n	8004b4e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d107      	bne.n	8004a74 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004a70:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a72:	e006      	b.n	8004a82 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a7a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d84f      	bhi.n	8004b28 <SAI_InitI2S+0x130>
 8004a88:	a201      	add	r2, pc, #4	@ (adr r2, 8004a90 <SAI_InitI2S+0x98>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004aa1 	.word	0x08004aa1
 8004a94:	08004ac3 	.word	0x08004ac3
 8004a98:	08004ae5 	.word	0x08004ae5
 8004a9c:	08004b07 	.word	0x08004b07
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2280      	movs	r2, #128	@ 0x80
 8004aa4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	011a      	lsls	r2, r3, #4
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2240      	movs	r2, #64	@ 0x40
 8004abe:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004ac0:	e035      	b.n	8004b2e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2280      	movs	r2, #128	@ 0x80
 8004ac6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	019a      	lsls	r2, r3, #6
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	085b      	lsrs	r3, r3, #1
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2280      	movs	r2, #128	@ 0x80
 8004ae0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004ae2:	e024      	b.n	8004b2e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	22c0      	movs	r2, #192	@ 0xc0
 8004ae8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	019a      	lsls	r2, r3, #6
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	085b      	lsrs	r3, r3, #1
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2280      	movs	r2, #128	@ 0x80
 8004b02:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004b04:	e013      	b.n	8004b2e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	22e0      	movs	r2, #224	@ 0xe0
 8004b0a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	085b      	lsrs	r3, r3, #1
 8004b10:	019a      	lsls	r2, r3, #6
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	085b      	lsrs	r3, r3, #1
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2280      	movs	r2, #128	@ 0x80
 8004b24:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004b26:	e002      	b.n	8004b2e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b2c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d10b      	bne.n	8004b4c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d102      	bne.n	8004b40 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d102      	bne.n	8004b4c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2208      	movs	r2, #8
 8004b4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	371c      	adds	r7, #28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop

08004b5c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <SAI_InitPCM+0x2e>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d103      	bne.n	8004b92 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b90:	e002      	b.n	8004b98 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004ba4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004bac:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bc0:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d103      	bne.n	8004bd0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	645a      	str	r2, [r3, #68]	@ 0x44
 8004bce:	e002      	b.n	8004bd6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	220d      	movs	r2, #13
 8004bd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d837      	bhi.n	8004c4c <SAI_InitPCM+0xf0>
 8004bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004be4 <SAI_InitPCM+0x88>)
 8004bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004bf5 	.word	0x08004bf5
 8004be8:	08004c0b 	.word	0x08004c0b
 8004bec:	08004c21 	.word	0x08004c21
 8004bf0:	08004c37 	.word	0x08004c37
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2280      	movs	r2, #128	@ 0x80
 8004bf8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	011a      	lsls	r2, r3, #4
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2240      	movs	r2, #64	@ 0x40
 8004c06:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004c08:	e023      	b.n	8004c52 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2280      	movs	r2, #128	@ 0x80
 8004c0e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2280      	movs	r2, #128	@ 0x80
 8004c1c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004c1e:	e018      	b.n	8004c52 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	22c0      	movs	r2, #192	@ 0xc0
 8004c24:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2280      	movs	r2, #128	@ 0x80
 8004c32:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004c34:	e00d      	b.n	8004c52 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	22e0      	movs	r2, #224	@ 0xe0
 8004c3a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2280      	movs	r2, #128	@ 0x80
 8004c48:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004c4a:	e002      	b.n	8004c52 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c50:	bf00      	nop
  }

  return status;
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004c68:	4b18      	ldr	r3, [pc, #96]	@ (8004ccc <SAI_Disable+0x6c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a18      	ldr	r2, [pc, #96]	@ (8004cd0 <SAI_Disable+0x70>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	0b1b      	lsrs	r3, r3, #12
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004c8a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c98:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	72fb      	strb	r3, [r7, #11]
      break;
 8004ca6:	e009      	b.n	8004cbc <SAI_Disable+0x5c>
    }
    count--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e7      	bne.n	8004c8c <SAI_Disable+0x2c>

  return status;
 8004cbc:	7afb      	ldrb	r3, [r7, #11]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000000 	.word	0x20000000
 8004cd0:	95cbec1b 	.word	0x95cbec1b

08004cd4 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004cf0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d02:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d00a      	beq.n	8004d24 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff ffa6 	bl	8004c60 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0208 	orr.w	r2, r2, #8
 8004d22:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff fe55 	bl	80049e4 <HAL_SAI_ErrorCallback>
#endif
}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e095      	b.n	8004e80 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d108      	bne.n	8004d6e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d64:	d009      	beq.n	8004d7a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	61da      	str	r2, [r3, #28]
 8004d6c:	e005      	b.n	8004d7a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7fc f80f 	bl	8000db8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004db0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dba:	d902      	bls.n	8004dc2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e002      	b.n	8004dc8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dc6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004dd0:	d007      	beq.n	8004de2 <HAL_SPI_Init+0xa0>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dda:	d002      	beq.n	8004de2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e24:	ea42 0103 	orr.w	r1, r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	0c1b      	lsrs	r3, r3, #16
 8004e3e:	f003 0204 	and.w	r2, r3, #4
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004e5e:	ea42 0103 	orr.w	r1, r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	@ 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e96:	2301      	movs	r3, #1
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e9a:	f7fc fa41 	bl	8001320 <HAL_GetTick>
 8004e9e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ea6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004eae:	887b      	ldrh	r3, [r7, #2]
 8004eb0:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004eb2:	887b      	ldrh	r3, [r7, #2]
 8004eb4:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004eb6:	7ffb      	ldrb	r3, [r7, #31]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d00c      	beq.n	8004ed6 <HAL_SPI_TransmitReceive+0x4e>
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ec2:	d106      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d102      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x4a>
 8004ecc:	7ffb      	ldrb	r3, [r7, #31]
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d001      	beq.n	8004ed6 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e1f3      	b.n	80052be <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_SPI_TransmitReceive+0x60>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <HAL_SPI_TransmitReceive+0x60>
 8004ee2:	887b      	ldrh	r3, [r7, #2]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e1e8      	b.n	80052be <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_SPI_TransmitReceive+0x72>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e1e1      	b.n	80052be <HAL_SPI_TransmitReceive+0x436>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d003      	beq.n	8004f16 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2205      	movs	r2, #5
 8004f12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	887a      	ldrh	r2, [r7, #2]
 8004f26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	887a      	ldrh	r2, [r7, #2]
 8004f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	887a      	ldrh	r2, [r7, #2]
 8004f3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	887a      	ldrh	r2, [r7, #2]
 8004f42:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f58:	d802      	bhi.n	8004f60 <HAL_SPI_TransmitReceive+0xd8>
 8004f5a:	8abb      	ldrh	r3, [r7, #20]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d908      	bls.n	8004f72 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f6e:	605a      	str	r2, [r3, #4]
 8004f70:	e007      	b.n	8004f82 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f80:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8c:	2b40      	cmp	r3, #64	@ 0x40
 8004f8e:	d007      	beq.n	8004fa0 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fa8:	f240 8083 	bls.w	80050b2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <HAL_SPI_TransmitReceive+0x132>
 8004fb4:	8afb      	ldrh	r3, [r7, #22]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d16f      	bne.n	800509a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbe:	881a      	ldrh	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	1c9a      	adds	r2, r3, #2
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fde:	e05c      	b.n	800509a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d11b      	bne.n	8005026 <HAL_SPI_TransmitReceive+0x19e>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d016      	beq.n	8005026 <HAL_SPI_TransmitReceive+0x19e>
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d113      	bne.n	8005026 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005002:	881a      	ldrh	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	1c9a      	adds	r2, r3, #2
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b01      	cmp	r3, #1
 8005032:	d11c      	bne.n	800506e <HAL_SPI_TransmitReceive+0x1e6>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d016      	beq.n	800506e <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504a:	b292      	uxth	r2, r2
 800504c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005052:	1c9a      	adds	r2, r3, #2
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800506a:	2301      	movs	r3, #1
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800506e:	f7fc f957 	bl	8001320 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800507a:	429a      	cmp	r2, r3
 800507c:	d80d      	bhi.n	800509a <HAL_SPI_TransmitReceive+0x212>
 800507e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005084:	d009      	beq.n	800509a <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e111      	b.n	80052be <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d19d      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x158>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d197      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x158>
 80050b0:	e0e5      	b.n	800527e <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_SPI_TransmitReceive+0x23a>
 80050ba:	8afb      	ldrh	r3, [r7, #22]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	f040 80d1 	bne.w	8005264 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d912      	bls.n	80050f2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d0:	881a      	ldrh	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050dc:	1c9a      	adds	r2, r3, #2
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b02      	subs	r3, #2
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050f0:	e0b8      	b.n	8005264 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	330c      	adds	r3, #12
 80050fc:	7812      	ldrb	r2, [r2, #0]
 80050fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005118:	e0a4      	b.n	8005264 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b02      	cmp	r3, #2
 8005126:	d134      	bne.n	8005192 <HAL_SPI_TransmitReceive+0x30a>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d02f      	beq.n	8005192 <HAL_SPI_TransmitReceive+0x30a>
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	2b01      	cmp	r3, #1
 8005136:	d12c      	bne.n	8005192 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b01      	cmp	r3, #1
 8005140:	d912      	bls.n	8005168 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	881a      	ldrh	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005152:	1c9a      	adds	r2, r3, #2
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b02      	subs	r3, #2
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005166:	e012      	b.n	800518e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	7812      	ldrb	r2, [r2, #0]
 8005174:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b01      	cmp	r3, #1
 800519e:	d148      	bne.n	8005232 <HAL_SPI_TransmitReceive+0x3aa>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d042      	beq.n	8005232 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d923      	bls.n	8005200 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c2:	b292      	uxth	r2, r2
 80051c4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ca:	1c9a      	adds	r2, r3, #2
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b02      	subs	r3, #2
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d81f      	bhi.n	800522e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	e016      	b.n	800522e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f103 020c 	add.w	r2, r3, #12
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800522e:	2301      	movs	r3, #1
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005232:	f7fc f875 	bl	8001320 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800523e:	429a      	cmp	r2, r3
 8005240:	d803      	bhi.n	800524a <HAL_SPI_TransmitReceive+0x3c2>
 8005242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005248:	d102      	bne.n	8005250 <HAL_SPI_TransmitReceive+0x3c8>
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	2b00      	cmp	r3, #0
 800524e:	d109      	bne.n	8005264 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e02c      	b.n	80052be <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	f47f af55 	bne.w	800511a <HAL_SPI_TransmitReceive+0x292>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005276:	b29b      	uxth	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	f47f af4e 	bne.w	800511a <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800527e:	6a3a      	ldr	r2, [r7, #32]
 8005280:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f93e 	bl	8005504 <SPI_EndRxTxTransaction>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d008      	beq.n	80052a0 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e00e      	b.n	80052be <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80052bc:	2300      	movs	r3, #0
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3728      	adds	r7, #40	@ 0x28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052d8:	f7fc f822 	bl	8001320 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e0:	1a9b      	subs	r3, r3, r2
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	4413      	add	r3, r2
 80052e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052e8:	f7fc f81a 	bl	8001320 <HAL_GetTick>
 80052ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052ee:	4b39      	ldr	r3, [pc, #228]	@ (80053d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	015b      	lsls	r3, r3, #5
 80052f4:	0d1b      	lsrs	r3, r3, #20
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	fb02 f303 	mul.w	r3, r2, r3
 80052fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052fe:	e054      	b.n	80053aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005306:	d050      	beq.n	80053aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005308:	f7fc f80a 	bl	8001320 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	429a      	cmp	r2, r3
 8005316:	d902      	bls.n	800531e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d13d      	bne.n	800539a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800532c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005336:	d111      	bne.n	800535c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005340:	d004      	beq.n	800534c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800534a:	d107      	bne.n	800535c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800535a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005364:	d10f      	bne.n	8005386 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e017      	b.n	80053ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4013      	ands	r3, r2
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d19b      	bne.n	8005300 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3720      	adds	r7, #32
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000000 	.word	0x20000000

080053d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08a      	sub	sp, #40	@ 0x28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80053ea:	f7fb ff99 	bl	8001320 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	4413      	add	r3, r2
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80053fa:	f7fb ff91 	bl	8001320 <HAL_GetTick>
 80053fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005408:	4b3d      	ldr	r3, [pc, #244]	@ (8005500 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	00da      	lsls	r2, r3, #3
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	0d1b      	lsrs	r3, r3, #20
 8005418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800541a:	fb02 f303 	mul.w	r3, r2, r3
 800541e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005420:	e060      	b.n	80054e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005428:	d107      	bne.n	800543a <SPI_WaitFifoStateUntilTimeout+0x62>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005438:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005440:	d050      	beq.n	80054e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005442:	f7fb ff6d 	bl	8001320 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800544e:	429a      	cmp	r2, r3
 8005450:	d902      	bls.n	8005458 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d13d      	bne.n	80054d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005466:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005470:	d111      	bne.n	8005496 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800547a:	d004      	beq.n	8005486 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005484:	d107      	bne.n	8005496 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005494:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800549e:	d10f      	bne.n	80054c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e010      	b.n	80054f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4013      	ands	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d196      	bne.n	8005422 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3728      	adds	r7, #40	@ 0x28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000000 	.word	0x20000000

08005504 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2200      	movs	r2, #0
 8005518:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7ff ff5b 	bl	80053d8 <SPI_WaitFifoStateUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d007      	beq.n	8005538 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800552c:	f043 0220 	orr.w	r2, r3, #32
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e027      	b.n	8005588 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2200      	movs	r2, #0
 8005540:	2180      	movs	r1, #128	@ 0x80
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f7ff fec0 	bl	80052c8 <SPI_WaitFlagStateUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005552:	f043 0220 	orr.w	r2, r3, #32
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e014      	b.n	8005588 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2200      	movs	r2, #0
 8005566:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f7ff ff34 	bl	80053d8 <SPI_WaitFifoStateUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d007      	beq.n	8005586 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800557a:	f043 0220 	orr.w	r2, r3, #32
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e000      	b.n	8005588 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e040      	b.n	8005624 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fb fdbe 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2224      	movs	r2, #36	@ 0x24
 80055bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fb6a 	bl	8005cb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f8af 	bl	8005740 <UART_SetConfig>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e01b      	b.n	8005624 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800560a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fbe9 	bl	8005df4 <UART_CheckIdleState>
 8005622:	4603      	mov	r3, r0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	@ 0x28
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005640:	2b20      	cmp	r3, #32
 8005642:	d177      	bne.n	8005734 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_UART_Transmit+0x24>
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e070      	b.n	8005736 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2221      	movs	r2, #33	@ 0x21
 8005660:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005662:	f7fb fe5d 	bl	8001320 <HAL_GetTick>
 8005666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	88fa      	ldrh	r2, [r7, #6]
 800566c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005680:	d108      	bne.n	8005694 <HAL_UART_Transmit+0x68>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	e003      	b.n	800569c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800569c:	e02f      	b.n	80056fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2200      	movs	r2, #0
 80056a6:	2180      	movs	r1, #128	@ 0x80
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 fc4b 	bl	8005f44 <UART_WaitOnFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e03b      	b.n	8005736 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10b      	bne.n	80056dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	881a      	ldrh	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056d0:	b292      	uxth	r2, r2
 80056d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	3302      	adds	r3, #2
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e007      	b.n	80056ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3301      	adds	r3, #1
 80056ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1c9      	bne.n	800569e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2200      	movs	r2, #0
 8005712:	2140      	movs	r1, #64	@ 0x40
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fc15 	bl	8005f44 <UART_WaitOnFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e005      	b.n	8005736 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	e000      	b.n	8005736 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005734:	2302      	movs	r3, #2
  }
}
 8005736:	4618      	mov	r0, r3
 8005738:	3720      	adds	r7, #32
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005744:	b08a      	sub	sp, #40	@ 0x28
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	431a      	orrs	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	431a      	orrs	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	4313      	orrs	r3, r2
 8005766:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4ba4      	ldr	r3, [pc, #656]	@ (8005a00 <UART_SetConfig+0x2c0>)
 8005770:	4013      	ands	r3, r2
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	6812      	ldr	r2, [r2, #0]
 8005776:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005778:	430b      	orrs	r3, r1
 800577a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a99      	ldr	r2, [pc, #612]	@ (8005a04 <UART_SetConfig+0x2c4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d004      	beq.n	80057ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a8:	4313      	orrs	r3, r2
 80057aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057bc:	430a      	orrs	r2, r1
 80057be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a90      	ldr	r2, [pc, #576]	@ (8005a08 <UART_SetConfig+0x2c8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d126      	bne.n	8005818 <UART_SetConfig+0xd8>
 80057ca:	4b90      	ldr	r3, [pc, #576]	@ (8005a0c <UART_SetConfig+0x2cc>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d0:	f003 0303 	and.w	r3, r3, #3
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d81b      	bhi.n	8005810 <UART_SetConfig+0xd0>
 80057d8:	a201      	add	r2, pc, #4	@ (adr r2, 80057e0 <UART_SetConfig+0xa0>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	080057f1 	.word	0x080057f1
 80057e4:	08005801 	.word	0x08005801
 80057e8:	080057f9 	.word	0x080057f9
 80057ec:	08005809 	.word	0x08005809
 80057f0:	2301      	movs	r3, #1
 80057f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057f6:	e116      	b.n	8005a26 <UART_SetConfig+0x2e6>
 80057f8:	2302      	movs	r3, #2
 80057fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057fe:	e112      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005800:	2304      	movs	r3, #4
 8005802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005806:	e10e      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005808:	2308      	movs	r3, #8
 800580a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800580e:	e10a      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005810:	2310      	movs	r3, #16
 8005812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005816:	e106      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a7c      	ldr	r2, [pc, #496]	@ (8005a10 <UART_SetConfig+0x2d0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d138      	bne.n	8005894 <UART_SetConfig+0x154>
 8005822:	4b7a      	ldr	r3, [pc, #488]	@ (8005a0c <UART_SetConfig+0x2cc>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005828:	f003 030c 	and.w	r3, r3, #12
 800582c:	2b0c      	cmp	r3, #12
 800582e:	d82d      	bhi.n	800588c <UART_SetConfig+0x14c>
 8005830:	a201      	add	r2, pc, #4	@ (adr r2, 8005838 <UART_SetConfig+0xf8>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	0800586d 	.word	0x0800586d
 800583c:	0800588d 	.word	0x0800588d
 8005840:	0800588d 	.word	0x0800588d
 8005844:	0800588d 	.word	0x0800588d
 8005848:	0800587d 	.word	0x0800587d
 800584c:	0800588d 	.word	0x0800588d
 8005850:	0800588d 	.word	0x0800588d
 8005854:	0800588d 	.word	0x0800588d
 8005858:	08005875 	.word	0x08005875
 800585c:	0800588d 	.word	0x0800588d
 8005860:	0800588d 	.word	0x0800588d
 8005864:	0800588d 	.word	0x0800588d
 8005868:	08005885 	.word	0x08005885
 800586c:	2300      	movs	r3, #0
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005872:	e0d8      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005874:	2302      	movs	r3, #2
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800587a:	e0d4      	b.n	8005a26 <UART_SetConfig+0x2e6>
 800587c:	2304      	movs	r3, #4
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005882:	e0d0      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005884:	2308      	movs	r3, #8
 8005886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800588a:	e0cc      	b.n	8005a26 <UART_SetConfig+0x2e6>
 800588c:	2310      	movs	r3, #16
 800588e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005892:	e0c8      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a5e      	ldr	r2, [pc, #376]	@ (8005a14 <UART_SetConfig+0x2d4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d125      	bne.n	80058ea <UART_SetConfig+0x1aa>
 800589e:	4b5b      	ldr	r3, [pc, #364]	@ (8005a0c <UART_SetConfig+0x2cc>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80058a8:	2b30      	cmp	r3, #48	@ 0x30
 80058aa:	d016      	beq.n	80058da <UART_SetConfig+0x19a>
 80058ac:	2b30      	cmp	r3, #48	@ 0x30
 80058ae:	d818      	bhi.n	80058e2 <UART_SetConfig+0x1a2>
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d00a      	beq.n	80058ca <UART_SetConfig+0x18a>
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d814      	bhi.n	80058e2 <UART_SetConfig+0x1a2>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <UART_SetConfig+0x182>
 80058bc:	2b10      	cmp	r3, #16
 80058be:	d008      	beq.n	80058d2 <UART_SetConfig+0x192>
 80058c0:	e00f      	b.n	80058e2 <UART_SetConfig+0x1a2>
 80058c2:	2300      	movs	r3, #0
 80058c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058c8:	e0ad      	b.n	8005a26 <UART_SetConfig+0x2e6>
 80058ca:	2302      	movs	r3, #2
 80058cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d0:	e0a9      	b.n	8005a26 <UART_SetConfig+0x2e6>
 80058d2:	2304      	movs	r3, #4
 80058d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d8:	e0a5      	b.n	8005a26 <UART_SetConfig+0x2e6>
 80058da:	2308      	movs	r3, #8
 80058dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e0:	e0a1      	b.n	8005a26 <UART_SetConfig+0x2e6>
 80058e2:	2310      	movs	r3, #16
 80058e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e8:	e09d      	b.n	8005a26 <UART_SetConfig+0x2e6>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005a18 <UART_SetConfig+0x2d8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d125      	bne.n	8005940 <UART_SetConfig+0x200>
 80058f4:	4b45      	ldr	r3, [pc, #276]	@ (8005a0c <UART_SetConfig+0x2cc>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005900:	d016      	beq.n	8005930 <UART_SetConfig+0x1f0>
 8005902:	2bc0      	cmp	r3, #192	@ 0xc0
 8005904:	d818      	bhi.n	8005938 <UART_SetConfig+0x1f8>
 8005906:	2b80      	cmp	r3, #128	@ 0x80
 8005908:	d00a      	beq.n	8005920 <UART_SetConfig+0x1e0>
 800590a:	2b80      	cmp	r3, #128	@ 0x80
 800590c:	d814      	bhi.n	8005938 <UART_SetConfig+0x1f8>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <UART_SetConfig+0x1d8>
 8005912:	2b40      	cmp	r3, #64	@ 0x40
 8005914:	d008      	beq.n	8005928 <UART_SetConfig+0x1e8>
 8005916:	e00f      	b.n	8005938 <UART_SetConfig+0x1f8>
 8005918:	2300      	movs	r3, #0
 800591a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800591e:	e082      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005920:	2302      	movs	r3, #2
 8005922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005926:	e07e      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005928:	2304      	movs	r3, #4
 800592a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800592e:	e07a      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005930:	2308      	movs	r3, #8
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005936:	e076      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005938:	2310      	movs	r3, #16
 800593a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800593e:	e072      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a35      	ldr	r2, [pc, #212]	@ (8005a1c <UART_SetConfig+0x2dc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d12a      	bne.n	80059a0 <UART_SetConfig+0x260>
 800594a:	4b30      	ldr	r3, [pc, #192]	@ (8005a0c <UART_SetConfig+0x2cc>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005950:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005954:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005958:	d01a      	beq.n	8005990 <UART_SetConfig+0x250>
 800595a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800595e:	d81b      	bhi.n	8005998 <UART_SetConfig+0x258>
 8005960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005964:	d00c      	beq.n	8005980 <UART_SetConfig+0x240>
 8005966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800596a:	d815      	bhi.n	8005998 <UART_SetConfig+0x258>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <UART_SetConfig+0x238>
 8005970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005974:	d008      	beq.n	8005988 <UART_SetConfig+0x248>
 8005976:	e00f      	b.n	8005998 <UART_SetConfig+0x258>
 8005978:	2300      	movs	r3, #0
 800597a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800597e:	e052      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005980:	2302      	movs	r3, #2
 8005982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005986:	e04e      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005988:	2304      	movs	r3, #4
 800598a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800598e:	e04a      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005990:	2308      	movs	r3, #8
 8005992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005996:	e046      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005998:	2310      	movs	r3, #16
 800599a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800599e:	e042      	b.n	8005a26 <UART_SetConfig+0x2e6>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a17      	ldr	r2, [pc, #92]	@ (8005a04 <UART_SetConfig+0x2c4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d13a      	bne.n	8005a20 <UART_SetConfig+0x2e0>
 80059aa:	4b18      	ldr	r3, [pc, #96]	@ (8005a0c <UART_SetConfig+0x2cc>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80059b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059b8:	d01a      	beq.n	80059f0 <UART_SetConfig+0x2b0>
 80059ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059be:	d81b      	bhi.n	80059f8 <UART_SetConfig+0x2b8>
 80059c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059c4:	d00c      	beq.n	80059e0 <UART_SetConfig+0x2a0>
 80059c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ca:	d815      	bhi.n	80059f8 <UART_SetConfig+0x2b8>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <UART_SetConfig+0x298>
 80059d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059d4:	d008      	beq.n	80059e8 <UART_SetConfig+0x2a8>
 80059d6:	e00f      	b.n	80059f8 <UART_SetConfig+0x2b8>
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059de:	e022      	b.n	8005a26 <UART_SetConfig+0x2e6>
 80059e0:	2302      	movs	r3, #2
 80059e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059e6:	e01e      	b.n	8005a26 <UART_SetConfig+0x2e6>
 80059e8:	2304      	movs	r3, #4
 80059ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ee:	e01a      	b.n	8005a26 <UART_SetConfig+0x2e6>
 80059f0:	2308      	movs	r3, #8
 80059f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059f6:	e016      	b.n	8005a26 <UART_SetConfig+0x2e6>
 80059f8:	2310      	movs	r3, #16
 80059fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059fe:	e012      	b.n	8005a26 <UART_SetConfig+0x2e6>
 8005a00:	efff69f3 	.word	0xefff69f3
 8005a04:	40008000 	.word	0x40008000
 8005a08:	40013800 	.word	0x40013800
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40004400 	.word	0x40004400
 8005a14:	40004800 	.word	0x40004800
 8005a18:	40004c00 	.word	0x40004c00
 8005a1c:	40005000 	.word	0x40005000
 8005a20:	2310      	movs	r3, #16
 8005a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a9f      	ldr	r2, [pc, #636]	@ (8005ca8 <UART_SetConfig+0x568>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d17a      	bne.n	8005b26 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d824      	bhi.n	8005a82 <UART_SetConfig+0x342>
 8005a38:	a201      	add	r2, pc, #4	@ (adr r2, 8005a40 <UART_SetConfig+0x300>)
 8005a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3e:	bf00      	nop
 8005a40:	08005a65 	.word	0x08005a65
 8005a44:	08005a83 	.word	0x08005a83
 8005a48:	08005a6d 	.word	0x08005a6d
 8005a4c:	08005a83 	.word	0x08005a83
 8005a50:	08005a73 	.word	0x08005a73
 8005a54:	08005a83 	.word	0x08005a83
 8005a58:	08005a83 	.word	0x08005a83
 8005a5c:	08005a83 	.word	0x08005a83
 8005a60:	08005a7b 	.word	0x08005a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a64:	f7fd f86a 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8005a68:	61f8      	str	r0, [r7, #28]
        break;
 8005a6a:	e010      	b.n	8005a8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a6c:	4b8f      	ldr	r3, [pc, #572]	@ (8005cac <UART_SetConfig+0x56c>)
 8005a6e:	61fb      	str	r3, [r7, #28]
        break;
 8005a70:	e00d      	b.n	8005a8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a72:	f7fc ffcb 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8005a76:	61f8      	str	r0, [r7, #28]
        break;
 8005a78:	e009      	b.n	8005a8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a7e:	61fb      	str	r3, [r7, #28]
        break;
 8005a80:	e005      	b.n	8005a8e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 80fb 	beq.w	8005c8c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	4413      	add	r3, r2
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d305      	bcc.n	8005ab2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d903      	bls.n	8005aba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ab8:	e0e8      	b.n	8005c8c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	2200      	movs	r2, #0
 8005abe:	461c      	mov	r4, r3
 8005ac0:	4615      	mov	r5, r2
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	022b      	lsls	r3, r5, #8
 8005acc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ad0:	0222      	lsls	r2, r4, #8
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	6849      	ldr	r1, [r1, #4]
 8005ad6:	0849      	lsrs	r1, r1, #1
 8005ad8:	2000      	movs	r0, #0
 8005ada:	4688      	mov	r8, r1
 8005adc:	4681      	mov	r9, r0
 8005ade:	eb12 0a08 	adds.w	sl, r2, r8
 8005ae2:	eb43 0b09 	adc.w	fp, r3, r9
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005af4:	4650      	mov	r0, sl
 8005af6:	4659      	mov	r1, fp
 8005af8:	f7fa fbba 	bl	8000270 <__aeabi_uldivmod>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4613      	mov	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b0a:	d308      	bcc.n	8005b1e <UART_SetConfig+0x3de>
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b12:	d204      	bcs.n	8005b1e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	60da      	str	r2, [r3, #12]
 8005b1c:	e0b6      	b.n	8005c8c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b24:	e0b2      	b.n	8005c8c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b2e:	d15e      	bne.n	8005bee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005b30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d828      	bhi.n	8005b8a <UART_SetConfig+0x44a>
 8005b38:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <UART_SetConfig+0x400>)
 8005b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3e:	bf00      	nop
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005b6d 	.word	0x08005b6d
 8005b48:	08005b75 	.word	0x08005b75
 8005b4c:	08005b8b 	.word	0x08005b8b
 8005b50:	08005b7b 	.word	0x08005b7b
 8005b54:	08005b8b 	.word	0x08005b8b
 8005b58:	08005b8b 	.word	0x08005b8b
 8005b5c:	08005b8b 	.word	0x08005b8b
 8005b60:	08005b83 	.word	0x08005b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b64:	f7fc ffea 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8005b68:	61f8      	str	r0, [r7, #28]
        break;
 8005b6a:	e014      	b.n	8005b96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b6c:	f7fc fffc 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 8005b70:	61f8      	str	r0, [r7, #28]
        break;
 8005b72:	e010      	b.n	8005b96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b74:	4b4d      	ldr	r3, [pc, #308]	@ (8005cac <UART_SetConfig+0x56c>)
 8005b76:	61fb      	str	r3, [r7, #28]
        break;
 8005b78:	e00d      	b.n	8005b96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7a:	f7fc ff47 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8005b7e:	61f8      	str	r0, [r7, #28]
        break;
 8005b80:	e009      	b.n	8005b96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b86:	61fb      	str	r3, [r7, #28]
        break;
 8005b88:	e005      	b.n	8005b96 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d077      	beq.n	8005c8c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	005a      	lsls	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	441a      	add	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	2b0f      	cmp	r3, #15
 8005bb6:	d916      	bls.n	8005be6 <UART_SetConfig+0x4a6>
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bbe:	d212      	bcs.n	8005be6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f023 030f 	bic.w	r3, r3, #15
 8005bc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	8afb      	ldrh	r3, [r7, #22]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	8afa      	ldrh	r2, [r7, #22]
 8005be2:	60da      	str	r2, [r3, #12]
 8005be4:	e052      	b.n	8005c8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005bec:	e04e      	b.n	8005c8c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d827      	bhi.n	8005c46 <UART_SetConfig+0x506>
 8005bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bfc <UART_SetConfig+0x4bc>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c21 	.word	0x08005c21
 8005c00:	08005c29 	.word	0x08005c29
 8005c04:	08005c31 	.word	0x08005c31
 8005c08:	08005c47 	.word	0x08005c47
 8005c0c:	08005c37 	.word	0x08005c37
 8005c10:	08005c47 	.word	0x08005c47
 8005c14:	08005c47 	.word	0x08005c47
 8005c18:	08005c47 	.word	0x08005c47
 8005c1c:	08005c3f 	.word	0x08005c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c20:	f7fc ff8c 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8005c24:	61f8      	str	r0, [r7, #28]
        break;
 8005c26:	e014      	b.n	8005c52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c28:	f7fc ff9e 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 8005c2c:	61f8      	str	r0, [r7, #28]
        break;
 8005c2e:	e010      	b.n	8005c52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c30:	4b1e      	ldr	r3, [pc, #120]	@ (8005cac <UART_SetConfig+0x56c>)
 8005c32:	61fb      	str	r3, [r7, #28]
        break;
 8005c34:	e00d      	b.n	8005c52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c36:	f7fc fee9 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 8005c3a:	61f8      	str	r0, [r7, #28]
        break;
 8005c3c:	e009      	b.n	8005c52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c42:	61fb      	str	r3, [r7, #28]
        break;
 8005c44:	e005      	b.n	8005c52 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c50:	bf00      	nop
    }

    if (pclk != 0U)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d019      	beq.n	8005c8c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	085a      	lsrs	r2, r3, #1
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	441a      	add	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	2b0f      	cmp	r3, #15
 8005c70:	d909      	bls.n	8005c86 <UART_SetConfig+0x546>
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c78:	d205      	bcs.n	8005c86 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60da      	str	r2, [r3, #12]
 8005c84:	e002      	b.n	8005c8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c98:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3728      	adds	r7, #40	@ 0x28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40008000 	.word	0x40008000
 8005cac:	00f42400 	.word	0x00f42400

08005cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d66:	f003 0320 	and.w	r3, r3, #32
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01a      	beq.n	8005dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dae:	d10a      	bne.n	8005dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	605a      	str	r2, [r3, #4]
  }
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b098      	sub	sp, #96	@ 0x60
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e04:	f7fb fa8c 	bl	8001320 <HAL_GetTick>
 8005e08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d12e      	bne.n	8005e76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e20:	2200      	movs	r2, #0
 8005e22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f88c 	bl	8005f44 <UART_WaitOnFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d021      	beq.n	8005e76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e46:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e6      	bne.n	8005e32 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e062      	b.n	8005f3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d149      	bne.n	8005f18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f856 	bl	8005f44 <UART_WaitOnFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d03c      	beq.n	8005f18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	623b      	str	r3, [r7, #32]
   return(result);
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ebc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ebe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e6      	bne.n	8005e9e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	e853 3f00 	ldrex	r3, [r3]
 8005ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 0301 	bic.w	r3, r3, #1
 8005ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3308      	adds	r3, #8
 8005eee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ef0:	61fa      	str	r2, [r7, #28]
 8005ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	69b9      	ldr	r1, [r7, #24]
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	e841 2300 	strex	r3, r2, [r1]
 8005efc:	617b      	str	r3, [r7, #20]
   return(result);
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e5      	bne.n	8005ed0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e011      	b.n	8005f3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3758      	adds	r7, #88	@ 0x58
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	4613      	mov	r3, r2
 8005f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f54:	e04f      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f5c:	d04b      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f5e:	f7fb f9df 	bl	8001320 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d302      	bcc.n	8005f74 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e04e      	b.n	8006016 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d037      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b80      	cmp	r3, #128	@ 0x80
 8005f8a:	d034      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b40      	cmp	r3, #64	@ 0x40
 8005f90:	d031      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d110      	bne.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f838 	bl	800601e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e029      	b.n	8006016 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fd0:	d111      	bne.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f81e 	bl	800601e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e00f      	b.n	8006016 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69da      	ldr	r2, [r3, #28]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4013      	ands	r3, r2
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	429a      	cmp	r2, r3
 8006004:	bf0c      	ite	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	2300      	movne	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	461a      	mov	r2, r3
 800600e:	79fb      	ldrb	r3, [r7, #7]
 8006010:	429a      	cmp	r2, r3
 8006012:	d0a0      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800601e:	b480      	push	{r7}
 8006020:	b095      	sub	sp, #84	@ 0x54
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800603a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006044:	643b      	str	r3, [r7, #64]	@ 0x40
 8006046:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800604a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e6      	bne.n	8006026 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	61fb      	str	r3, [r7, #28]
   return(result);
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3308      	adds	r3, #8
 8006076:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006078:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800607a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800607e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e5      	bne.n	8006058 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006090:	2b01      	cmp	r3, #1
 8006092:	d118      	bne.n	80060c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f023 0310 	bic.w	r3, r3, #16
 80060a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060b2:	61bb      	str	r3, [r7, #24]
 80060b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6979      	ldr	r1, [r7, #20]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	613b      	str	r3, [r7, #16]
   return(result);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e6      	bne.n	8006094 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80060da:	bf00      	nop
 80060dc:	3754      	adds	r7, #84	@ 0x54
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <std>:
 80060e8:	2300      	movs	r3, #0
 80060ea:	b510      	push	{r4, lr}
 80060ec:	4604      	mov	r4, r0
 80060ee:	e9c0 3300 	strd	r3, r3, [r0]
 80060f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060f6:	6083      	str	r3, [r0, #8]
 80060f8:	8181      	strh	r1, [r0, #12]
 80060fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80060fc:	81c2      	strh	r2, [r0, #14]
 80060fe:	6183      	str	r3, [r0, #24]
 8006100:	4619      	mov	r1, r3
 8006102:	2208      	movs	r2, #8
 8006104:	305c      	adds	r0, #92	@ 0x5c
 8006106:	f000 f906 	bl	8006316 <memset>
 800610a:	4b0d      	ldr	r3, [pc, #52]	@ (8006140 <std+0x58>)
 800610c:	6263      	str	r3, [r4, #36]	@ 0x24
 800610e:	4b0d      	ldr	r3, [pc, #52]	@ (8006144 <std+0x5c>)
 8006110:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006112:	4b0d      	ldr	r3, [pc, #52]	@ (8006148 <std+0x60>)
 8006114:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006116:	4b0d      	ldr	r3, [pc, #52]	@ (800614c <std+0x64>)
 8006118:	6323      	str	r3, [r4, #48]	@ 0x30
 800611a:	4b0d      	ldr	r3, [pc, #52]	@ (8006150 <std+0x68>)
 800611c:	6224      	str	r4, [r4, #32]
 800611e:	429c      	cmp	r4, r3
 8006120:	d006      	beq.n	8006130 <std+0x48>
 8006122:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006126:	4294      	cmp	r4, r2
 8006128:	d002      	beq.n	8006130 <std+0x48>
 800612a:	33d0      	adds	r3, #208	@ 0xd0
 800612c:	429c      	cmp	r4, r3
 800612e:	d105      	bne.n	800613c <std+0x54>
 8006130:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006138:	f000 b966 	b.w	8006408 <__retarget_lock_init_recursive>
 800613c:	bd10      	pop	{r4, pc}
 800613e:	bf00      	nop
 8006140:	08006291 	.word	0x08006291
 8006144:	080062b3 	.word	0x080062b3
 8006148:	080062eb 	.word	0x080062eb
 800614c:	0800630f 	.word	0x0800630f
 8006150:	20000368 	.word	0x20000368

08006154 <stdio_exit_handler>:
 8006154:	4a02      	ldr	r2, [pc, #8]	@ (8006160 <stdio_exit_handler+0xc>)
 8006156:	4903      	ldr	r1, [pc, #12]	@ (8006164 <stdio_exit_handler+0x10>)
 8006158:	4803      	ldr	r0, [pc, #12]	@ (8006168 <stdio_exit_handler+0x14>)
 800615a:	f000 b869 	b.w	8006230 <_fwalk_sglue>
 800615e:	bf00      	nop
 8006160:	2000000c 	.word	0x2000000c
 8006164:	08006ca5 	.word	0x08006ca5
 8006168:	2000001c 	.word	0x2000001c

0800616c <cleanup_stdio>:
 800616c:	6841      	ldr	r1, [r0, #4]
 800616e:	4b0c      	ldr	r3, [pc, #48]	@ (80061a0 <cleanup_stdio+0x34>)
 8006170:	4299      	cmp	r1, r3
 8006172:	b510      	push	{r4, lr}
 8006174:	4604      	mov	r4, r0
 8006176:	d001      	beq.n	800617c <cleanup_stdio+0x10>
 8006178:	f000 fd94 	bl	8006ca4 <_fflush_r>
 800617c:	68a1      	ldr	r1, [r4, #8]
 800617e:	4b09      	ldr	r3, [pc, #36]	@ (80061a4 <cleanup_stdio+0x38>)
 8006180:	4299      	cmp	r1, r3
 8006182:	d002      	beq.n	800618a <cleanup_stdio+0x1e>
 8006184:	4620      	mov	r0, r4
 8006186:	f000 fd8d 	bl	8006ca4 <_fflush_r>
 800618a:	68e1      	ldr	r1, [r4, #12]
 800618c:	4b06      	ldr	r3, [pc, #24]	@ (80061a8 <cleanup_stdio+0x3c>)
 800618e:	4299      	cmp	r1, r3
 8006190:	d004      	beq.n	800619c <cleanup_stdio+0x30>
 8006192:	4620      	mov	r0, r4
 8006194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006198:	f000 bd84 	b.w	8006ca4 <_fflush_r>
 800619c:	bd10      	pop	{r4, pc}
 800619e:	bf00      	nop
 80061a0:	20000368 	.word	0x20000368
 80061a4:	200003d0 	.word	0x200003d0
 80061a8:	20000438 	.word	0x20000438

080061ac <global_stdio_init.part.0>:
 80061ac:	b510      	push	{r4, lr}
 80061ae:	4b0b      	ldr	r3, [pc, #44]	@ (80061dc <global_stdio_init.part.0+0x30>)
 80061b0:	4c0b      	ldr	r4, [pc, #44]	@ (80061e0 <global_stdio_init.part.0+0x34>)
 80061b2:	4a0c      	ldr	r2, [pc, #48]	@ (80061e4 <global_stdio_init.part.0+0x38>)
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	4620      	mov	r0, r4
 80061b8:	2200      	movs	r2, #0
 80061ba:	2104      	movs	r1, #4
 80061bc:	f7ff ff94 	bl	80060e8 <std>
 80061c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061c4:	2201      	movs	r2, #1
 80061c6:	2109      	movs	r1, #9
 80061c8:	f7ff ff8e 	bl	80060e8 <std>
 80061cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061d0:	2202      	movs	r2, #2
 80061d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d6:	2112      	movs	r1, #18
 80061d8:	f7ff bf86 	b.w	80060e8 <std>
 80061dc:	200004a0 	.word	0x200004a0
 80061e0:	20000368 	.word	0x20000368
 80061e4:	08006155 	.word	0x08006155

080061e8 <__sfp_lock_acquire>:
 80061e8:	4801      	ldr	r0, [pc, #4]	@ (80061f0 <__sfp_lock_acquire+0x8>)
 80061ea:	f000 b90e 	b.w	800640a <__retarget_lock_acquire_recursive>
 80061ee:	bf00      	nop
 80061f0:	200004a9 	.word	0x200004a9

080061f4 <__sfp_lock_release>:
 80061f4:	4801      	ldr	r0, [pc, #4]	@ (80061fc <__sfp_lock_release+0x8>)
 80061f6:	f000 b909 	b.w	800640c <__retarget_lock_release_recursive>
 80061fa:	bf00      	nop
 80061fc:	200004a9 	.word	0x200004a9

08006200 <__sinit>:
 8006200:	b510      	push	{r4, lr}
 8006202:	4604      	mov	r4, r0
 8006204:	f7ff fff0 	bl	80061e8 <__sfp_lock_acquire>
 8006208:	6a23      	ldr	r3, [r4, #32]
 800620a:	b11b      	cbz	r3, 8006214 <__sinit+0x14>
 800620c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006210:	f7ff bff0 	b.w	80061f4 <__sfp_lock_release>
 8006214:	4b04      	ldr	r3, [pc, #16]	@ (8006228 <__sinit+0x28>)
 8006216:	6223      	str	r3, [r4, #32]
 8006218:	4b04      	ldr	r3, [pc, #16]	@ (800622c <__sinit+0x2c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1f5      	bne.n	800620c <__sinit+0xc>
 8006220:	f7ff ffc4 	bl	80061ac <global_stdio_init.part.0>
 8006224:	e7f2      	b.n	800620c <__sinit+0xc>
 8006226:	bf00      	nop
 8006228:	0800616d 	.word	0x0800616d
 800622c:	200004a0 	.word	0x200004a0

08006230 <_fwalk_sglue>:
 8006230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006234:	4607      	mov	r7, r0
 8006236:	4688      	mov	r8, r1
 8006238:	4614      	mov	r4, r2
 800623a:	2600      	movs	r6, #0
 800623c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006240:	f1b9 0901 	subs.w	r9, r9, #1
 8006244:	d505      	bpl.n	8006252 <_fwalk_sglue+0x22>
 8006246:	6824      	ldr	r4, [r4, #0]
 8006248:	2c00      	cmp	r4, #0
 800624a:	d1f7      	bne.n	800623c <_fwalk_sglue+0xc>
 800624c:	4630      	mov	r0, r6
 800624e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006252:	89ab      	ldrh	r3, [r5, #12]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d907      	bls.n	8006268 <_fwalk_sglue+0x38>
 8006258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800625c:	3301      	adds	r3, #1
 800625e:	d003      	beq.n	8006268 <_fwalk_sglue+0x38>
 8006260:	4629      	mov	r1, r5
 8006262:	4638      	mov	r0, r7
 8006264:	47c0      	blx	r8
 8006266:	4306      	orrs	r6, r0
 8006268:	3568      	adds	r5, #104	@ 0x68
 800626a:	e7e9      	b.n	8006240 <_fwalk_sglue+0x10>

0800626c <iprintf>:
 800626c:	b40f      	push	{r0, r1, r2, r3}
 800626e:	b507      	push	{r0, r1, r2, lr}
 8006270:	4906      	ldr	r1, [pc, #24]	@ (800628c <iprintf+0x20>)
 8006272:	ab04      	add	r3, sp, #16
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	f853 2b04 	ldr.w	r2, [r3], #4
 800627a:	6881      	ldr	r1, [r0, #8]
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	f000 f9e9 	bl	8006654 <_vfiprintf_r>
 8006282:	b003      	add	sp, #12
 8006284:	f85d eb04 	ldr.w	lr, [sp], #4
 8006288:	b004      	add	sp, #16
 800628a:	4770      	bx	lr
 800628c:	20000018 	.word	0x20000018

08006290 <__sread>:
 8006290:	b510      	push	{r4, lr}
 8006292:	460c      	mov	r4, r1
 8006294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006298:	f000 f868 	bl	800636c <_read_r>
 800629c:	2800      	cmp	r0, #0
 800629e:	bfab      	itete	ge
 80062a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062a2:	89a3      	ldrhlt	r3, [r4, #12]
 80062a4:	181b      	addge	r3, r3, r0
 80062a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062aa:	bfac      	ite	ge
 80062ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062ae:	81a3      	strhlt	r3, [r4, #12]
 80062b0:	bd10      	pop	{r4, pc}

080062b2 <__swrite>:
 80062b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b6:	461f      	mov	r7, r3
 80062b8:	898b      	ldrh	r3, [r1, #12]
 80062ba:	05db      	lsls	r3, r3, #23
 80062bc:	4605      	mov	r5, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	4616      	mov	r6, r2
 80062c2:	d505      	bpl.n	80062d0 <__swrite+0x1e>
 80062c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c8:	2302      	movs	r3, #2
 80062ca:	2200      	movs	r2, #0
 80062cc:	f000 f83c 	bl	8006348 <_lseek_r>
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062da:	81a3      	strh	r3, [r4, #12]
 80062dc:	4632      	mov	r2, r6
 80062de:	463b      	mov	r3, r7
 80062e0:	4628      	mov	r0, r5
 80062e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062e6:	f000 b853 	b.w	8006390 <_write_r>

080062ea <__sseek>:
 80062ea:	b510      	push	{r4, lr}
 80062ec:	460c      	mov	r4, r1
 80062ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f2:	f000 f829 	bl	8006348 <_lseek_r>
 80062f6:	1c43      	adds	r3, r0, #1
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	bf15      	itete	ne
 80062fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006302:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006306:	81a3      	strheq	r3, [r4, #12]
 8006308:	bf18      	it	ne
 800630a:	81a3      	strhne	r3, [r4, #12]
 800630c:	bd10      	pop	{r4, pc}

0800630e <__sclose>:
 800630e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006312:	f000 b809 	b.w	8006328 <_close_r>

08006316 <memset>:
 8006316:	4402      	add	r2, r0
 8006318:	4603      	mov	r3, r0
 800631a:	4293      	cmp	r3, r2
 800631c:	d100      	bne.n	8006320 <memset+0xa>
 800631e:	4770      	bx	lr
 8006320:	f803 1b01 	strb.w	r1, [r3], #1
 8006324:	e7f9      	b.n	800631a <memset+0x4>
	...

08006328 <_close_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4d06      	ldr	r5, [pc, #24]	@ (8006344 <_close_r+0x1c>)
 800632c:	2300      	movs	r3, #0
 800632e:	4604      	mov	r4, r0
 8006330:	4608      	mov	r0, r1
 8006332:	602b      	str	r3, [r5, #0]
 8006334:	f7fa fe51 	bl	8000fda <_close>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d102      	bne.n	8006342 <_close_r+0x1a>
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	b103      	cbz	r3, 8006342 <_close_r+0x1a>
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	200004a4 	.word	0x200004a4

08006348 <_lseek_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4d07      	ldr	r5, [pc, #28]	@ (8006368 <_lseek_r+0x20>)
 800634c:	4604      	mov	r4, r0
 800634e:	4608      	mov	r0, r1
 8006350:	4611      	mov	r1, r2
 8006352:	2200      	movs	r2, #0
 8006354:	602a      	str	r2, [r5, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	f7fa fe66 	bl	8001028 <_lseek>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_lseek_r+0x1e>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_lseek_r+0x1e>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	200004a4 	.word	0x200004a4

0800636c <_read_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4d07      	ldr	r5, [pc, #28]	@ (800638c <_read_r+0x20>)
 8006370:	4604      	mov	r4, r0
 8006372:	4608      	mov	r0, r1
 8006374:	4611      	mov	r1, r2
 8006376:	2200      	movs	r2, #0
 8006378:	602a      	str	r2, [r5, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	f7fa fdf4 	bl	8000f68 <_read>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_read_r+0x1e>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_read_r+0x1e>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	200004a4 	.word	0x200004a4

08006390 <_write_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	@ (80063b0 <_write_r+0x20>)
 8006394:	4604      	mov	r4, r0
 8006396:	4608      	mov	r0, r1
 8006398:	4611      	mov	r1, r2
 800639a:	2200      	movs	r2, #0
 800639c:	602a      	str	r2, [r5, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	f7fa fdff 	bl	8000fa2 <_write>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_write_r+0x1e>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_write_r+0x1e>
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	200004a4 	.word	0x200004a4

080063b4 <__errno>:
 80063b4:	4b01      	ldr	r3, [pc, #4]	@ (80063bc <__errno+0x8>)
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20000018 	.word	0x20000018

080063c0 <__libc_init_array>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	4d0d      	ldr	r5, [pc, #52]	@ (80063f8 <__libc_init_array+0x38>)
 80063c4:	4c0d      	ldr	r4, [pc, #52]	@ (80063fc <__libc_init_array+0x3c>)
 80063c6:	1b64      	subs	r4, r4, r5
 80063c8:	10a4      	asrs	r4, r4, #2
 80063ca:	2600      	movs	r6, #0
 80063cc:	42a6      	cmp	r6, r4
 80063ce:	d109      	bne.n	80063e4 <__libc_init_array+0x24>
 80063d0:	4d0b      	ldr	r5, [pc, #44]	@ (8006400 <__libc_init_array+0x40>)
 80063d2:	4c0c      	ldr	r4, [pc, #48]	@ (8006404 <__libc_init_array+0x44>)
 80063d4:	f000 fdb6 	bl	8006f44 <_init>
 80063d8:	1b64      	subs	r4, r4, r5
 80063da:	10a4      	asrs	r4, r4, #2
 80063dc:	2600      	movs	r6, #0
 80063de:	42a6      	cmp	r6, r4
 80063e0:	d105      	bne.n	80063ee <__libc_init_array+0x2e>
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
 80063e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e8:	4798      	blx	r3
 80063ea:	3601      	adds	r6, #1
 80063ec:	e7ee      	b.n	80063cc <__libc_init_array+0xc>
 80063ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f2:	4798      	blx	r3
 80063f4:	3601      	adds	r6, #1
 80063f6:	e7f2      	b.n	80063de <__libc_init_array+0x1e>
 80063f8:	08006fec 	.word	0x08006fec
 80063fc:	08006fec 	.word	0x08006fec
 8006400:	08006fec 	.word	0x08006fec
 8006404:	08006ff0 	.word	0x08006ff0

08006408 <__retarget_lock_init_recursive>:
 8006408:	4770      	bx	lr

0800640a <__retarget_lock_acquire_recursive>:
 800640a:	4770      	bx	lr

0800640c <__retarget_lock_release_recursive>:
 800640c:	4770      	bx	lr
	...

08006410 <_free_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4605      	mov	r5, r0
 8006414:	2900      	cmp	r1, #0
 8006416:	d041      	beq.n	800649c <_free_r+0x8c>
 8006418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800641c:	1f0c      	subs	r4, r1, #4
 800641e:	2b00      	cmp	r3, #0
 8006420:	bfb8      	it	lt
 8006422:	18e4      	addlt	r4, r4, r3
 8006424:	f000 f8e0 	bl	80065e8 <__malloc_lock>
 8006428:	4a1d      	ldr	r2, [pc, #116]	@ (80064a0 <_free_r+0x90>)
 800642a:	6813      	ldr	r3, [r2, #0]
 800642c:	b933      	cbnz	r3, 800643c <_free_r+0x2c>
 800642e:	6063      	str	r3, [r4, #4]
 8006430:	6014      	str	r4, [r2, #0]
 8006432:	4628      	mov	r0, r5
 8006434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006438:	f000 b8dc 	b.w	80065f4 <__malloc_unlock>
 800643c:	42a3      	cmp	r3, r4
 800643e:	d908      	bls.n	8006452 <_free_r+0x42>
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	1821      	adds	r1, r4, r0
 8006444:	428b      	cmp	r3, r1
 8006446:	bf01      	itttt	eq
 8006448:	6819      	ldreq	r1, [r3, #0]
 800644a:	685b      	ldreq	r3, [r3, #4]
 800644c:	1809      	addeq	r1, r1, r0
 800644e:	6021      	streq	r1, [r4, #0]
 8006450:	e7ed      	b.n	800642e <_free_r+0x1e>
 8006452:	461a      	mov	r2, r3
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	b10b      	cbz	r3, 800645c <_free_r+0x4c>
 8006458:	42a3      	cmp	r3, r4
 800645a:	d9fa      	bls.n	8006452 <_free_r+0x42>
 800645c:	6811      	ldr	r1, [r2, #0]
 800645e:	1850      	adds	r0, r2, r1
 8006460:	42a0      	cmp	r0, r4
 8006462:	d10b      	bne.n	800647c <_free_r+0x6c>
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	4401      	add	r1, r0
 8006468:	1850      	adds	r0, r2, r1
 800646a:	4283      	cmp	r3, r0
 800646c:	6011      	str	r1, [r2, #0]
 800646e:	d1e0      	bne.n	8006432 <_free_r+0x22>
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	6053      	str	r3, [r2, #4]
 8006476:	4408      	add	r0, r1
 8006478:	6010      	str	r0, [r2, #0]
 800647a:	e7da      	b.n	8006432 <_free_r+0x22>
 800647c:	d902      	bls.n	8006484 <_free_r+0x74>
 800647e:	230c      	movs	r3, #12
 8006480:	602b      	str	r3, [r5, #0]
 8006482:	e7d6      	b.n	8006432 <_free_r+0x22>
 8006484:	6820      	ldr	r0, [r4, #0]
 8006486:	1821      	adds	r1, r4, r0
 8006488:	428b      	cmp	r3, r1
 800648a:	bf04      	itt	eq
 800648c:	6819      	ldreq	r1, [r3, #0]
 800648e:	685b      	ldreq	r3, [r3, #4]
 8006490:	6063      	str	r3, [r4, #4]
 8006492:	bf04      	itt	eq
 8006494:	1809      	addeq	r1, r1, r0
 8006496:	6021      	streq	r1, [r4, #0]
 8006498:	6054      	str	r4, [r2, #4]
 800649a:	e7ca      	b.n	8006432 <_free_r+0x22>
 800649c:	bd38      	pop	{r3, r4, r5, pc}
 800649e:	bf00      	nop
 80064a0:	200004b0 	.word	0x200004b0

080064a4 <sbrk_aligned>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	4e0f      	ldr	r6, [pc, #60]	@ (80064e4 <sbrk_aligned+0x40>)
 80064a8:	460c      	mov	r4, r1
 80064aa:	6831      	ldr	r1, [r6, #0]
 80064ac:	4605      	mov	r5, r0
 80064ae:	b911      	cbnz	r1, 80064b6 <sbrk_aligned+0x12>
 80064b0:	f000 fcb4 	bl	8006e1c <_sbrk_r>
 80064b4:	6030      	str	r0, [r6, #0]
 80064b6:	4621      	mov	r1, r4
 80064b8:	4628      	mov	r0, r5
 80064ba:	f000 fcaf 	bl	8006e1c <_sbrk_r>
 80064be:	1c43      	adds	r3, r0, #1
 80064c0:	d103      	bne.n	80064ca <sbrk_aligned+0x26>
 80064c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80064c6:	4620      	mov	r0, r4
 80064c8:	bd70      	pop	{r4, r5, r6, pc}
 80064ca:	1cc4      	adds	r4, r0, #3
 80064cc:	f024 0403 	bic.w	r4, r4, #3
 80064d0:	42a0      	cmp	r0, r4
 80064d2:	d0f8      	beq.n	80064c6 <sbrk_aligned+0x22>
 80064d4:	1a21      	subs	r1, r4, r0
 80064d6:	4628      	mov	r0, r5
 80064d8:	f000 fca0 	bl	8006e1c <_sbrk_r>
 80064dc:	3001      	adds	r0, #1
 80064de:	d1f2      	bne.n	80064c6 <sbrk_aligned+0x22>
 80064e0:	e7ef      	b.n	80064c2 <sbrk_aligned+0x1e>
 80064e2:	bf00      	nop
 80064e4:	200004ac 	.word	0x200004ac

080064e8 <_malloc_r>:
 80064e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ec:	1ccd      	adds	r5, r1, #3
 80064ee:	f025 0503 	bic.w	r5, r5, #3
 80064f2:	3508      	adds	r5, #8
 80064f4:	2d0c      	cmp	r5, #12
 80064f6:	bf38      	it	cc
 80064f8:	250c      	movcc	r5, #12
 80064fa:	2d00      	cmp	r5, #0
 80064fc:	4606      	mov	r6, r0
 80064fe:	db01      	blt.n	8006504 <_malloc_r+0x1c>
 8006500:	42a9      	cmp	r1, r5
 8006502:	d904      	bls.n	800650e <_malloc_r+0x26>
 8006504:	230c      	movs	r3, #12
 8006506:	6033      	str	r3, [r6, #0]
 8006508:	2000      	movs	r0, #0
 800650a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065e4 <_malloc_r+0xfc>
 8006512:	f000 f869 	bl	80065e8 <__malloc_lock>
 8006516:	f8d8 3000 	ldr.w	r3, [r8]
 800651a:	461c      	mov	r4, r3
 800651c:	bb44      	cbnz	r4, 8006570 <_malloc_r+0x88>
 800651e:	4629      	mov	r1, r5
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff ffbf 	bl	80064a4 <sbrk_aligned>
 8006526:	1c43      	adds	r3, r0, #1
 8006528:	4604      	mov	r4, r0
 800652a:	d158      	bne.n	80065de <_malloc_r+0xf6>
 800652c:	f8d8 4000 	ldr.w	r4, [r8]
 8006530:	4627      	mov	r7, r4
 8006532:	2f00      	cmp	r7, #0
 8006534:	d143      	bne.n	80065be <_malloc_r+0xd6>
 8006536:	2c00      	cmp	r4, #0
 8006538:	d04b      	beq.n	80065d2 <_malloc_r+0xea>
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	4639      	mov	r1, r7
 800653e:	4630      	mov	r0, r6
 8006540:	eb04 0903 	add.w	r9, r4, r3
 8006544:	f000 fc6a 	bl	8006e1c <_sbrk_r>
 8006548:	4581      	cmp	r9, r0
 800654a:	d142      	bne.n	80065d2 <_malloc_r+0xea>
 800654c:	6821      	ldr	r1, [r4, #0]
 800654e:	1a6d      	subs	r5, r5, r1
 8006550:	4629      	mov	r1, r5
 8006552:	4630      	mov	r0, r6
 8006554:	f7ff ffa6 	bl	80064a4 <sbrk_aligned>
 8006558:	3001      	adds	r0, #1
 800655a:	d03a      	beq.n	80065d2 <_malloc_r+0xea>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	442b      	add	r3, r5
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	f8d8 3000 	ldr.w	r3, [r8]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	bb62      	cbnz	r2, 80065c4 <_malloc_r+0xdc>
 800656a:	f8c8 7000 	str.w	r7, [r8]
 800656e:	e00f      	b.n	8006590 <_malloc_r+0xa8>
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	1b52      	subs	r2, r2, r5
 8006574:	d420      	bmi.n	80065b8 <_malloc_r+0xd0>
 8006576:	2a0b      	cmp	r2, #11
 8006578:	d917      	bls.n	80065aa <_malloc_r+0xc2>
 800657a:	1961      	adds	r1, r4, r5
 800657c:	42a3      	cmp	r3, r4
 800657e:	6025      	str	r5, [r4, #0]
 8006580:	bf18      	it	ne
 8006582:	6059      	strne	r1, [r3, #4]
 8006584:	6863      	ldr	r3, [r4, #4]
 8006586:	bf08      	it	eq
 8006588:	f8c8 1000 	streq.w	r1, [r8]
 800658c:	5162      	str	r2, [r4, r5]
 800658e:	604b      	str	r3, [r1, #4]
 8006590:	4630      	mov	r0, r6
 8006592:	f000 f82f 	bl	80065f4 <__malloc_unlock>
 8006596:	f104 000b 	add.w	r0, r4, #11
 800659a:	1d23      	adds	r3, r4, #4
 800659c:	f020 0007 	bic.w	r0, r0, #7
 80065a0:	1ac2      	subs	r2, r0, r3
 80065a2:	bf1c      	itt	ne
 80065a4:	1a1b      	subne	r3, r3, r0
 80065a6:	50a3      	strne	r3, [r4, r2]
 80065a8:	e7af      	b.n	800650a <_malloc_r+0x22>
 80065aa:	6862      	ldr	r2, [r4, #4]
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	bf0c      	ite	eq
 80065b0:	f8c8 2000 	streq.w	r2, [r8]
 80065b4:	605a      	strne	r2, [r3, #4]
 80065b6:	e7eb      	b.n	8006590 <_malloc_r+0xa8>
 80065b8:	4623      	mov	r3, r4
 80065ba:	6864      	ldr	r4, [r4, #4]
 80065bc:	e7ae      	b.n	800651c <_malloc_r+0x34>
 80065be:	463c      	mov	r4, r7
 80065c0:	687f      	ldr	r7, [r7, #4]
 80065c2:	e7b6      	b.n	8006532 <_malloc_r+0x4a>
 80065c4:	461a      	mov	r2, r3
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	42a3      	cmp	r3, r4
 80065ca:	d1fb      	bne.n	80065c4 <_malloc_r+0xdc>
 80065cc:	2300      	movs	r3, #0
 80065ce:	6053      	str	r3, [r2, #4]
 80065d0:	e7de      	b.n	8006590 <_malloc_r+0xa8>
 80065d2:	230c      	movs	r3, #12
 80065d4:	6033      	str	r3, [r6, #0]
 80065d6:	4630      	mov	r0, r6
 80065d8:	f000 f80c 	bl	80065f4 <__malloc_unlock>
 80065dc:	e794      	b.n	8006508 <_malloc_r+0x20>
 80065de:	6005      	str	r5, [r0, #0]
 80065e0:	e7d6      	b.n	8006590 <_malloc_r+0xa8>
 80065e2:	bf00      	nop
 80065e4:	200004b0 	.word	0x200004b0

080065e8 <__malloc_lock>:
 80065e8:	4801      	ldr	r0, [pc, #4]	@ (80065f0 <__malloc_lock+0x8>)
 80065ea:	f7ff bf0e 	b.w	800640a <__retarget_lock_acquire_recursive>
 80065ee:	bf00      	nop
 80065f0:	200004a8 	.word	0x200004a8

080065f4 <__malloc_unlock>:
 80065f4:	4801      	ldr	r0, [pc, #4]	@ (80065fc <__malloc_unlock+0x8>)
 80065f6:	f7ff bf09 	b.w	800640c <__retarget_lock_release_recursive>
 80065fa:	bf00      	nop
 80065fc:	200004a8 	.word	0x200004a8

08006600 <__sfputc_r>:
 8006600:	6893      	ldr	r3, [r2, #8]
 8006602:	3b01      	subs	r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	b410      	push	{r4}
 8006608:	6093      	str	r3, [r2, #8]
 800660a:	da08      	bge.n	800661e <__sfputc_r+0x1e>
 800660c:	6994      	ldr	r4, [r2, #24]
 800660e:	42a3      	cmp	r3, r4
 8006610:	db01      	blt.n	8006616 <__sfputc_r+0x16>
 8006612:	290a      	cmp	r1, #10
 8006614:	d103      	bne.n	800661e <__sfputc_r+0x1e>
 8006616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800661a:	f000 bb6b 	b.w	8006cf4 <__swbuf_r>
 800661e:	6813      	ldr	r3, [r2, #0]
 8006620:	1c58      	adds	r0, r3, #1
 8006622:	6010      	str	r0, [r2, #0]
 8006624:	7019      	strb	r1, [r3, #0]
 8006626:	4608      	mov	r0, r1
 8006628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800662c:	4770      	bx	lr

0800662e <__sfputs_r>:
 800662e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006630:	4606      	mov	r6, r0
 8006632:	460f      	mov	r7, r1
 8006634:	4614      	mov	r4, r2
 8006636:	18d5      	adds	r5, r2, r3
 8006638:	42ac      	cmp	r4, r5
 800663a:	d101      	bne.n	8006640 <__sfputs_r+0x12>
 800663c:	2000      	movs	r0, #0
 800663e:	e007      	b.n	8006650 <__sfputs_r+0x22>
 8006640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006644:	463a      	mov	r2, r7
 8006646:	4630      	mov	r0, r6
 8006648:	f7ff ffda 	bl	8006600 <__sfputc_r>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d1f3      	bne.n	8006638 <__sfputs_r+0xa>
 8006650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006654 <_vfiprintf_r>:
 8006654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006658:	460d      	mov	r5, r1
 800665a:	b09d      	sub	sp, #116	@ 0x74
 800665c:	4614      	mov	r4, r2
 800665e:	4698      	mov	r8, r3
 8006660:	4606      	mov	r6, r0
 8006662:	b118      	cbz	r0, 800666c <_vfiprintf_r+0x18>
 8006664:	6a03      	ldr	r3, [r0, #32]
 8006666:	b90b      	cbnz	r3, 800666c <_vfiprintf_r+0x18>
 8006668:	f7ff fdca 	bl	8006200 <__sinit>
 800666c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800666e:	07d9      	lsls	r1, r3, #31
 8006670:	d405      	bmi.n	800667e <_vfiprintf_r+0x2a>
 8006672:	89ab      	ldrh	r3, [r5, #12]
 8006674:	059a      	lsls	r2, r3, #22
 8006676:	d402      	bmi.n	800667e <_vfiprintf_r+0x2a>
 8006678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800667a:	f7ff fec6 	bl	800640a <__retarget_lock_acquire_recursive>
 800667e:	89ab      	ldrh	r3, [r5, #12]
 8006680:	071b      	lsls	r3, r3, #28
 8006682:	d501      	bpl.n	8006688 <_vfiprintf_r+0x34>
 8006684:	692b      	ldr	r3, [r5, #16]
 8006686:	b99b      	cbnz	r3, 80066b0 <_vfiprintf_r+0x5c>
 8006688:	4629      	mov	r1, r5
 800668a:	4630      	mov	r0, r6
 800668c:	f000 fb70 	bl	8006d70 <__swsetup_r>
 8006690:	b170      	cbz	r0, 80066b0 <_vfiprintf_r+0x5c>
 8006692:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006694:	07dc      	lsls	r4, r3, #31
 8006696:	d504      	bpl.n	80066a2 <_vfiprintf_r+0x4e>
 8006698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800669c:	b01d      	add	sp, #116	@ 0x74
 800669e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	0598      	lsls	r0, r3, #22
 80066a6:	d4f7      	bmi.n	8006698 <_vfiprintf_r+0x44>
 80066a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066aa:	f7ff feaf 	bl	800640c <__retarget_lock_release_recursive>
 80066ae:	e7f3      	b.n	8006698 <_vfiprintf_r+0x44>
 80066b0:	2300      	movs	r3, #0
 80066b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80066b4:	2320      	movs	r3, #32
 80066b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80066be:	2330      	movs	r3, #48	@ 0x30
 80066c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006870 <_vfiprintf_r+0x21c>
 80066c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066c8:	f04f 0901 	mov.w	r9, #1
 80066cc:	4623      	mov	r3, r4
 80066ce:	469a      	mov	sl, r3
 80066d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066d4:	b10a      	cbz	r2, 80066da <_vfiprintf_r+0x86>
 80066d6:	2a25      	cmp	r2, #37	@ 0x25
 80066d8:	d1f9      	bne.n	80066ce <_vfiprintf_r+0x7a>
 80066da:	ebba 0b04 	subs.w	fp, sl, r4
 80066de:	d00b      	beq.n	80066f8 <_vfiprintf_r+0xa4>
 80066e0:	465b      	mov	r3, fp
 80066e2:	4622      	mov	r2, r4
 80066e4:	4629      	mov	r1, r5
 80066e6:	4630      	mov	r0, r6
 80066e8:	f7ff ffa1 	bl	800662e <__sfputs_r>
 80066ec:	3001      	adds	r0, #1
 80066ee:	f000 80a7 	beq.w	8006840 <_vfiprintf_r+0x1ec>
 80066f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066f4:	445a      	add	r2, fp
 80066f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80066f8:	f89a 3000 	ldrb.w	r3, [sl]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 809f 	beq.w	8006840 <_vfiprintf_r+0x1ec>
 8006702:	2300      	movs	r3, #0
 8006704:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800670c:	f10a 0a01 	add.w	sl, sl, #1
 8006710:	9304      	str	r3, [sp, #16]
 8006712:	9307      	str	r3, [sp, #28]
 8006714:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006718:	931a      	str	r3, [sp, #104]	@ 0x68
 800671a:	4654      	mov	r4, sl
 800671c:	2205      	movs	r2, #5
 800671e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006722:	4853      	ldr	r0, [pc, #332]	@ (8006870 <_vfiprintf_r+0x21c>)
 8006724:	f7f9 fd54 	bl	80001d0 <memchr>
 8006728:	9a04      	ldr	r2, [sp, #16]
 800672a:	b9d8      	cbnz	r0, 8006764 <_vfiprintf_r+0x110>
 800672c:	06d1      	lsls	r1, r2, #27
 800672e:	bf44      	itt	mi
 8006730:	2320      	movmi	r3, #32
 8006732:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006736:	0713      	lsls	r3, r2, #28
 8006738:	bf44      	itt	mi
 800673a:	232b      	movmi	r3, #43	@ 0x2b
 800673c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006740:	f89a 3000 	ldrb.w	r3, [sl]
 8006744:	2b2a      	cmp	r3, #42	@ 0x2a
 8006746:	d015      	beq.n	8006774 <_vfiprintf_r+0x120>
 8006748:	9a07      	ldr	r2, [sp, #28]
 800674a:	4654      	mov	r4, sl
 800674c:	2000      	movs	r0, #0
 800674e:	f04f 0c0a 	mov.w	ip, #10
 8006752:	4621      	mov	r1, r4
 8006754:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006758:	3b30      	subs	r3, #48	@ 0x30
 800675a:	2b09      	cmp	r3, #9
 800675c:	d94b      	bls.n	80067f6 <_vfiprintf_r+0x1a2>
 800675e:	b1b0      	cbz	r0, 800678e <_vfiprintf_r+0x13a>
 8006760:	9207      	str	r2, [sp, #28]
 8006762:	e014      	b.n	800678e <_vfiprintf_r+0x13a>
 8006764:	eba0 0308 	sub.w	r3, r0, r8
 8006768:	fa09 f303 	lsl.w	r3, r9, r3
 800676c:	4313      	orrs	r3, r2
 800676e:	9304      	str	r3, [sp, #16]
 8006770:	46a2      	mov	sl, r4
 8006772:	e7d2      	b.n	800671a <_vfiprintf_r+0xc6>
 8006774:	9b03      	ldr	r3, [sp, #12]
 8006776:	1d19      	adds	r1, r3, #4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	9103      	str	r1, [sp, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	bfbb      	ittet	lt
 8006780:	425b      	neglt	r3, r3
 8006782:	f042 0202 	orrlt.w	r2, r2, #2
 8006786:	9307      	strge	r3, [sp, #28]
 8006788:	9307      	strlt	r3, [sp, #28]
 800678a:	bfb8      	it	lt
 800678c:	9204      	strlt	r2, [sp, #16]
 800678e:	7823      	ldrb	r3, [r4, #0]
 8006790:	2b2e      	cmp	r3, #46	@ 0x2e
 8006792:	d10a      	bne.n	80067aa <_vfiprintf_r+0x156>
 8006794:	7863      	ldrb	r3, [r4, #1]
 8006796:	2b2a      	cmp	r3, #42	@ 0x2a
 8006798:	d132      	bne.n	8006800 <_vfiprintf_r+0x1ac>
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	1d1a      	adds	r2, r3, #4
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	9203      	str	r2, [sp, #12]
 80067a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067a6:	3402      	adds	r4, #2
 80067a8:	9305      	str	r3, [sp, #20]
 80067aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006880 <_vfiprintf_r+0x22c>
 80067ae:	7821      	ldrb	r1, [r4, #0]
 80067b0:	2203      	movs	r2, #3
 80067b2:	4650      	mov	r0, sl
 80067b4:	f7f9 fd0c 	bl	80001d0 <memchr>
 80067b8:	b138      	cbz	r0, 80067ca <_vfiprintf_r+0x176>
 80067ba:	9b04      	ldr	r3, [sp, #16]
 80067bc:	eba0 000a 	sub.w	r0, r0, sl
 80067c0:	2240      	movs	r2, #64	@ 0x40
 80067c2:	4082      	lsls	r2, r0
 80067c4:	4313      	orrs	r3, r2
 80067c6:	3401      	adds	r4, #1
 80067c8:	9304      	str	r3, [sp, #16]
 80067ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ce:	4829      	ldr	r0, [pc, #164]	@ (8006874 <_vfiprintf_r+0x220>)
 80067d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067d4:	2206      	movs	r2, #6
 80067d6:	f7f9 fcfb 	bl	80001d0 <memchr>
 80067da:	2800      	cmp	r0, #0
 80067dc:	d03f      	beq.n	800685e <_vfiprintf_r+0x20a>
 80067de:	4b26      	ldr	r3, [pc, #152]	@ (8006878 <_vfiprintf_r+0x224>)
 80067e0:	bb1b      	cbnz	r3, 800682a <_vfiprintf_r+0x1d6>
 80067e2:	9b03      	ldr	r3, [sp, #12]
 80067e4:	3307      	adds	r3, #7
 80067e6:	f023 0307 	bic.w	r3, r3, #7
 80067ea:	3308      	adds	r3, #8
 80067ec:	9303      	str	r3, [sp, #12]
 80067ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f0:	443b      	add	r3, r7
 80067f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067f4:	e76a      	b.n	80066cc <_vfiprintf_r+0x78>
 80067f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80067fa:	460c      	mov	r4, r1
 80067fc:	2001      	movs	r0, #1
 80067fe:	e7a8      	b.n	8006752 <_vfiprintf_r+0xfe>
 8006800:	2300      	movs	r3, #0
 8006802:	3401      	adds	r4, #1
 8006804:	9305      	str	r3, [sp, #20]
 8006806:	4619      	mov	r1, r3
 8006808:	f04f 0c0a 	mov.w	ip, #10
 800680c:	4620      	mov	r0, r4
 800680e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006812:	3a30      	subs	r2, #48	@ 0x30
 8006814:	2a09      	cmp	r2, #9
 8006816:	d903      	bls.n	8006820 <_vfiprintf_r+0x1cc>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0c6      	beq.n	80067aa <_vfiprintf_r+0x156>
 800681c:	9105      	str	r1, [sp, #20]
 800681e:	e7c4      	b.n	80067aa <_vfiprintf_r+0x156>
 8006820:	fb0c 2101 	mla	r1, ip, r1, r2
 8006824:	4604      	mov	r4, r0
 8006826:	2301      	movs	r3, #1
 8006828:	e7f0      	b.n	800680c <_vfiprintf_r+0x1b8>
 800682a:	ab03      	add	r3, sp, #12
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	462a      	mov	r2, r5
 8006830:	4b12      	ldr	r3, [pc, #72]	@ (800687c <_vfiprintf_r+0x228>)
 8006832:	a904      	add	r1, sp, #16
 8006834:	4630      	mov	r0, r6
 8006836:	f3af 8000 	nop.w
 800683a:	4607      	mov	r7, r0
 800683c:	1c78      	adds	r0, r7, #1
 800683e:	d1d6      	bne.n	80067ee <_vfiprintf_r+0x19a>
 8006840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006842:	07d9      	lsls	r1, r3, #31
 8006844:	d405      	bmi.n	8006852 <_vfiprintf_r+0x1fe>
 8006846:	89ab      	ldrh	r3, [r5, #12]
 8006848:	059a      	lsls	r2, r3, #22
 800684a:	d402      	bmi.n	8006852 <_vfiprintf_r+0x1fe>
 800684c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800684e:	f7ff fddd 	bl	800640c <__retarget_lock_release_recursive>
 8006852:	89ab      	ldrh	r3, [r5, #12]
 8006854:	065b      	lsls	r3, r3, #25
 8006856:	f53f af1f 	bmi.w	8006698 <_vfiprintf_r+0x44>
 800685a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800685c:	e71e      	b.n	800669c <_vfiprintf_r+0x48>
 800685e:	ab03      	add	r3, sp, #12
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	462a      	mov	r2, r5
 8006864:	4b05      	ldr	r3, [pc, #20]	@ (800687c <_vfiprintf_r+0x228>)
 8006866:	a904      	add	r1, sp, #16
 8006868:	4630      	mov	r0, r6
 800686a:	f000 f879 	bl	8006960 <_printf_i>
 800686e:	e7e4      	b.n	800683a <_vfiprintf_r+0x1e6>
 8006870:	08006fb0 	.word	0x08006fb0
 8006874:	08006fba 	.word	0x08006fba
 8006878:	00000000 	.word	0x00000000
 800687c:	0800662f 	.word	0x0800662f
 8006880:	08006fb6 	.word	0x08006fb6

08006884 <_printf_common>:
 8006884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006888:	4616      	mov	r6, r2
 800688a:	4698      	mov	r8, r3
 800688c:	688a      	ldr	r2, [r1, #8]
 800688e:	690b      	ldr	r3, [r1, #16]
 8006890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006894:	4293      	cmp	r3, r2
 8006896:	bfb8      	it	lt
 8006898:	4613      	movlt	r3, r2
 800689a:	6033      	str	r3, [r6, #0]
 800689c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068a0:	4607      	mov	r7, r0
 80068a2:	460c      	mov	r4, r1
 80068a4:	b10a      	cbz	r2, 80068aa <_printf_common+0x26>
 80068a6:	3301      	adds	r3, #1
 80068a8:	6033      	str	r3, [r6, #0]
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	0699      	lsls	r1, r3, #26
 80068ae:	bf42      	ittt	mi
 80068b0:	6833      	ldrmi	r3, [r6, #0]
 80068b2:	3302      	addmi	r3, #2
 80068b4:	6033      	strmi	r3, [r6, #0]
 80068b6:	6825      	ldr	r5, [r4, #0]
 80068b8:	f015 0506 	ands.w	r5, r5, #6
 80068bc:	d106      	bne.n	80068cc <_printf_common+0x48>
 80068be:	f104 0a19 	add.w	sl, r4, #25
 80068c2:	68e3      	ldr	r3, [r4, #12]
 80068c4:	6832      	ldr	r2, [r6, #0]
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	42ab      	cmp	r3, r5
 80068ca:	dc26      	bgt.n	800691a <_printf_common+0x96>
 80068cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068d0:	6822      	ldr	r2, [r4, #0]
 80068d2:	3b00      	subs	r3, #0
 80068d4:	bf18      	it	ne
 80068d6:	2301      	movne	r3, #1
 80068d8:	0692      	lsls	r2, r2, #26
 80068da:	d42b      	bmi.n	8006934 <_printf_common+0xb0>
 80068dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068e0:	4641      	mov	r1, r8
 80068e2:	4638      	mov	r0, r7
 80068e4:	47c8      	blx	r9
 80068e6:	3001      	adds	r0, #1
 80068e8:	d01e      	beq.n	8006928 <_printf_common+0xa4>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	6922      	ldr	r2, [r4, #16]
 80068ee:	f003 0306 	and.w	r3, r3, #6
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	bf02      	ittt	eq
 80068f6:	68e5      	ldreq	r5, [r4, #12]
 80068f8:	6833      	ldreq	r3, [r6, #0]
 80068fa:	1aed      	subeq	r5, r5, r3
 80068fc:	68a3      	ldr	r3, [r4, #8]
 80068fe:	bf0c      	ite	eq
 8006900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006904:	2500      	movne	r5, #0
 8006906:	4293      	cmp	r3, r2
 8006908:	bfc4      	itt	gt
 800690a:	1a9b      	subgt	r3, r3, r2
 800690c:	18ed      	addgt	r5, r5, r3
 800690e:	2600      	movs	r6, #0
 8006910:	341a      	adds	r4, #26
 8006912:	42b5      	cmp	r5, r6
 8006914:	d11a      	bne.n	800694c <_printf_common+0xc8>
 8006916:	2000      	movs	r0, #0
 8006918:	e008      	b.n	800692c <_printf_common+0xa8>
 800691a:	2301      	movs	r3, #1
 800691c:	4652      	mov	r2, sl
 800691e:	4641      	mov	r1, r8
 8006920:	4638      	mov	r0, r7
 8006922:	47c8      	blx	r9
 8006924:	3001      	adds	r0, #1
 8006926:	d103      	bne.n	8006930 <_printf_common+0xac>
 8006928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800692c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006930:	3501      	adds	r5, #1
 8006932:	e7c6      	b.n	80068c2 <_printf_common+0x3e>
 8006934:	18e1      	adds	r1, r4, r3
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	2030      	movs	r0, #48	@ 0x30
 800693a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800693e:	4422      	add	r2, r4
 8006940:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006944:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006948:	3302      	adds	r3, #2
 800694a:	e7c7      	b.n	80068dc <_printf_common+0x58>
 800694c:	2301      	movs	r3, #1
 800694e:	4622      	mov	r2, r4
 8006950:	4641      	mov	r1, r8
 8006952:	4638      	mov	r0, r7
 8006954:	47c8      	blx	r9
 8006956:	3001      	adds	r0, #1
 8006958:	d0e6      	beq.n	8006928 <_printf_common+0xa4>
 800695a:	3601      	adds	r6, #1
 800695c:	e7d9      	b.n	8006912 <_printf_common+0x8e>
	...

08006960 <_printf_i>:
 8006960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006964:	7e0f      	ldrb	r7, [r1, #24]
 8006966:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006968:	2f78      	cmp	r7, #120	@ 0x78
 800696a:	4691      	mov	r9, r2
 800696c:	4680      	mov	r8, r0
 800696e:	460c      	mov	r4, r1
 8006970:	469a      	mov	sl, r3
 8006972:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006976:	d807      	bhi.n	8006988 <_printf_i+0x28>
 8006978:	2f62      	cmp	r7, #98	@ 0x62
 800697a:	d80a      	bhi.n	8006992 <_printf_i+0x32>
 800697c:	2f00      	cmp	r7, #0
 800697e:	f000 80d1 	beq.w	8006b24 <_printf_i+0x1c4>
 8006982:	2f58      	cmp	r7, #88	@ 0x58
 8006984:	f000 80b8 	beq.w	8006af8 <_printf_i+0x198>
 8006988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800698c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006990:	e03a      	b.n	8006a08 <_printf_i+0xa8>
 8006992:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006996:	2b15      	cmp	r3, #21
 8006998:	d8f6      	bhi.n	8006988 <_printf_i+0x28>
 800699a:	a101      	add	r1, pc, #4	@ (adr r1, 80069a0 <_printf_i+0x40>)
 800699c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069a0:	080069f9 	.word	0x080069f9
 80069a4:	08006a0d 	.word	0x08006a0d
 80069a8:	08006989 	.word	0x08006989
 80069ac:	08006989 	.word	0x08006989
 80069b0:	08006989 	.word	0x08006989
 80069b4:	08006989 	.word	0x08006989
 80069b8:	08006a0d 	.word	0x08006a0d
 80069bc:	08006989 	.word	0x08006989
 80069c0:	08006989 	.word	0x08006989
 80069c4:	08006989 	.word	0x08006989
 80069c8:	08006989 	.word	0x08006989
 80069cc:	08006b0b 	.word	0x08006b0b
 80069d0:	08006a37 	.word	0x08006a37
 80069d4:	08006ac5 	.word	0x08006ac5
 80069d8:	08006989 	.word	0x08006989
 80069dc:	08006989 	.word	0x08006989
 80069e0:	08006b2d 	.word	0x08006b2d
 80069e4:	08006989 	.word	0x08006989
 80069e8:	08006a37 	.word	0x08006a37
 80069ec:	08006989 	.word	0x08006989
 80069f0:	08006989 	.word	0x08006989
 80069f4:	08006acd 	.word	0x08006acd
 80069f8:	6833      	ldr	r3, [r6, #0]
 80069fa:	1d1a      	adds	r2, r3, #4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6032      	str	r2, [r6, #0]
 8006a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e09c      	b.n	8006b46 <_printf_i+0x1e6>
 8006a0c:	6833      	ldr	r3, [r6, #0]
 8006a0e:	6820      	ldr	r0, [r4, #0]
 8006a10:	1d19      	adds	r1, r3, #4
 8006a12:	6031      	str	r1, [r6, #0]
 8006a14:	0606      	lsls	r6, r0, #24
 8006a16:	d501      	bpl.n	8006a1c <_printf_i+0xbc>
 8006a18:	681d      	ldr	r5, [r3, #0]
 8006a1a:	e003      	b.n	8006a24 <_printf_i+0xc4>
 8006a1c:	0645      	lsls	r5, r0, #25
 8006a1e:	d5fb      	bpl.n	8006a18 <_printf_i+0xb8>
 8006a20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a24:	2d00      	cmp	r5, #0
 8006a26:	da03      	bge.n	8006a30 <_printf_i+0xd0>
 8006a28:	232d      	movs	r3, #45	@ 0x2d
 8006a2a:	426d      	negs	r5, r5
 8006a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a30:	4858      	ldr	r0, [pc, #352]	@ (8006b94 <_printf_i+0x234>)
 8006a32:	230a      	movs	r3, #10
 8006a34:	e011      	b.n	8006a5a <_printf_i+0xfa>
 8006a36:	6821      	ldr	r1, [r4, #0]
 8006a38:	6833      	ldr	r3, [r6, #0]
 8006a3a:	0608      	lsls	r0, r1, #24
 8006a3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a40:	d402      	bmi.n	8006a48 <_printf_i+0xe8>
 8006a42:	0649      	lsls	r1, r1, #25
 8006a44:	bf48      	it	mi
 8006a46:	b2ad      	uxthmi	r5, r5
 8006a48:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a4a:	4852      	ldr	r0, [pc, #328]	@ (8006b94 <_printf_i+0x234>)
 8006a4c:	6033      	str	r3, [r6, #0]
 8006a4e:	bf14      	ite	ne
 8006a50:	230a      	movne	r3, #10
 8006a52:	2308      	moveq	r3, #8
 8006a54:	2100      	movs	r1, #0
 8006a56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a5a:	6866      	ldr	r6, [r4, #4]
 8006a5c:	60a6      	str	r6, [r4, #8]
 8006a5e:	2e00      	cmp	r6, #0
 8006a60:	db05      	blt.n	8006a6e <_printf_i+0x10e>
 8006a62:	6821      	ldr	r1, [r4, #0]
 8006a64:	432e      	orrs	r6, r5
 8006a66:	f021 0104 	bic.w	r1, r1, #4
 8006a6a:	6021      	str	r1, [r4, #0]
 8006a6c:	d04b      	beq.n	8006b06 <_printf_i+0x1a6>
 8006a6e:	4616      	mov	r6, r2
 8006a70:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a74:	fb03 5711 	mls	r7, r3, r1, r5
 8006a78:	5dc7      	ldrb	r7, [r0, r7]
 8006a7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a7e:	462f      	mov	r7, r5
 8006a80:	42bb      	cmp	r3, r7
 8006a82:	460d      	mov	r5, r1
 8006a84:	d9f4      	bls.n	8006a70 <_printf_i+0x110>
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d10b      	bne.n	8006aa2 <_printf_i+0x142>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	07df      	lsls	r7, r3, #31
 8006a8e:	d508      	bpl.n	8006aa2 <_printf_i+0x142>
 8006a90:	6923      	ldr	r3, [r4, #16]
 8006a92:	6861      	ldr	r1, [r4, #4]
 8006a94:	4299      	cmp	r1, r3
 8006a96:	bfde      	ittt	le
 8006a98:	2330      	movle	r3, #48	@ 0x30
 8006a9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a9e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006aa2:	1b92      	subs	r2, r2, r6
 8006aa4:	6122      	str	r2, [r4, #16]
 8006aa6:	f8cd a000 	str.w	sl, [sp]
 8006aaa:	464b      	mov	r3, r9
 8006aac:	aa03      	add	r2, sp, #12
 8006aae:	4621      	mov	r1, r4
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	f7ff fee7 	bl	8006884 <_printf_common>
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d14a      	bne.n	8006b50 <_printf_i+0x1f0>
 8006aba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006abe:	b004      	add	sp, #16
 8006ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	f043 0320 	orr.w	r3, r3, #32
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	4832      	ldr	r0, [pc, #200]	@ (8006b98 <_printf_i+0x238>)
 8006ace:	2778      	movs	r7, #120	@ 0x78
 8006ad0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	6831      	ldr	r1, [r6, #0]
 8006ad8:	061f      	lsls	r7, r3, #24
 8006ada:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ade:	d402      	bmi.n	8006ae6 <_printf_i+0x186>
 8006ae0:	065f      	lsls	r7, r3, #25
 8006ae2:	bf48      	it	mi
 8006ae4:	b2ad      	uxthmi	r5, r5
 8006ae6:	6031      	str	r1, [r6, #0]
 8006ae8:	07d9      	lsls	r1, r3, #31
 8006aea:	bf44      	itt	mi
 8006aec:	f043 0320 	orrmi.w	r3, r3, #32
 8006af0:	6023      	strmi	r3, [r4, #0]
 8006af2:	b11d      	cbz	r5, 8006afc <_printf_i+0x19c>
 8006af4:	2310      	movs	r3, #16
 8006af6:	e7ad      	b.n	8006a54 <_printf_i+0xf4>
 8006af8:	4826      	ldr	r0, [pc, #152]	@ (8006b94 <_printf_i+0x234>)
 8006afa:	e7e9      	b.n	8006ad0 <_printf_i+0x170>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	f023 0320 	bic.w	r3, r3, #32
 8006b02:	6023      	str	r3, [r4, #0]
 8006b04:	e7f6      	b.n	8006af4 <_printf_i+0x194>
 8006b06:	4616      	mov	r6, r2
 8006b08:	e7bd      	b.n	8006a86 <_printf_i+0x126>
 8006b0a:	6833      	ldr	r3, [r6, #0]
 8006b0c:	6825      	ldr	r5, [r4, #0]
 8006b0e:	6961      	ldr	r1, [r4, #20]
 8006b10:	1d18      	adds	r0, r3, #4
 8006b12:	6030      	str	r0, [r6, #0]
 8006b14:	062e      	lsls	r6, r5, #24
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	d501      	bpl.n	8006b1e <_printf_i+0x1be>
 8006b1a:	6019      	str	r1, [r3, #0]
 8006b1c:	e002      	b.n	8006b24 <_printf_i+0x1c4>
 8006b1e:	0668      	lsls	r0, r5, #25
 8006b20:	d5fb      	bpl.n	8006b1a <_printf_i+0x1ba>
 8006b22:	8019      	strh	r1, [r3, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	6123      	str	r3, [r4, #16]
 8006b28:	4616      	mov	r6, r2
 8006b2a:	e7bc      	b.n	8006aa6 <_printf_i+0x146>
 8006b2c:	6833      	ldr	r3, [r6, #0]
 8006b2e:	1d1a      	adds	r2, r3, #4
 8006b30:	6032      	str	r2, [r6, #0]
 8006b32:	681e      	ldr	r6, [r3, #0]
 8006b34:	6862      	ldr	r2, [r4, #4]
 8006b36:	2100      	movs	r1, #0
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f7f9 fb49 	bl	80001d0 <memchr>
 8006b3e:	b108      	cbz	r0, 8006b44 <_printf_i+0x1e4>
 8006b40:	1b80      	subs	r0, r0, r6
 8006b42:	6060      	str	r0, [r4, #4]
 8006b44:	6863      	ldr	r3, [r4, #4]
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b4e:	e7aa      	b.n	8006aa6 <_printf_i+0x146>
 8006b50:	6923      	ldr	r3, [r4, #16]
 8006b52:	4632      	mov	r2, r6
 8006b54:	4649      	mov	r1, r9
 8006b56:	4640      	mov	r0, r8
 8006b58:	47d0      	blx	sl
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d0ad      	beq.n	8006aba <_printf_i+0x15a>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	079b      	lsls	r3, r3, #30
 8006b62:	d413      	bmi.n	8006b8c <_printf_i+0x22c>
 8006b64:	68e0      	ldr	r0, [r4, #12]
 8006b66:	9b03      	ldr	r3, [sp, #12]
 8006b68:	4298      	cmp	r0, r3
 8006b6a:	bfb8      	it	lt
 8006b6c:	4618      	movlt	r0, r3
 8006b6e:	e7a6      	b.n	8006abe <_printf_i+0x15e>
 8006b70:	2301      	movs	r3, #1
 8006b72:	4632      	mov	r2, r6
 8006b74:	4649      	mov	r1, r9
 8006b76:	4640      	mov	r0, r8
 8006b78:	47d0      	blx	sl
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d09d      	beq.n	8006aba <_printf_i+0x15a>
 8006b7e:	3501      	adds	r5, #1
 8006b80:	68e3      	ldr	r3, [r4, #12]
 8006b82:	9903      	ldr	r1, [sp, #12]
 8006b84:	1a5b      	subs	r3, r3, r1
 8006b86:	42ab      	cmp	r3, r5
 8006b88:	dcf2      	bgt.n	8006b70 <_printf_i+0x210>
 8006b8a:	e7eb      	b.n	8006b64 <_printf_i+0x204>
 8006b8c:	2500      	movs	r5, #0
 8006b8e:	f104 0619 	add.w	r6, r4, #25
 8006b92:	e7f5      	b.n	8006b80 <_printf_i+0x220>
 8006b94:	08006fc1 	.word	0x08006fc1
 8006b98:	08006fd2 	.word	0x08006fd2

08006b9c <__sflush_r>:
 8006b9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba4:	0716      	lsls	r6, r2, #28
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	460c      	mov	r4, r1
 8006baa:	d454      	bmi.n	8006c56 <__sflush_r+0xba>
 8006bac:	684b      	ldr	r3, [r1, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dc02      	bgt.n	8006bb8 <__sflush_r+0x1c>
 8006bb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	dd48      	ble.n	8006c4a <__sflush_r+0xae>
 8006bb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bba:	2e00      	cmp	r6, #0
 8006bbc:	d045      	beq.n	8006c4a <__sflush_r+0xae>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006bc4:	682f      	ldr	r7, [r5, #0]
 8006bc6:	6a21      	ldr	r1, [r4, #32]
 8006bc8:	602b      	str	r3, [r5, #0]
 8006bca:	d030      	beq.n	8006c2e <__sflush_r+0x92>
 8006bcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006bce:	89a3      	ldrh	r3, [r4, #12]
 8006bd0:	0759      	lsls	r1, r3, #29
 8006bd2:	d505      	bpl.n	8006be0 <__sflush_r+0x44>
 8006bd4:	6863      	ldr	r3, [r4, #4]
 8006bd6:	1ad2      	subs	r2, r2, r3
 8006bd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006bda:	b10b      	cbz	r3, 8006be0 <__sflush_r+0x44>
 8006bdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	2300      	movs	r3, #0
 8006be2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006be4:	6a21      	ldr	r1, [r4, #32]
 8006be6:	4628      	mov	r0, r5
 8006be8:	47b0      	blx	r6
 8006bea:	1c43      	adds	r3, r0, #1
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	d106      	bne.n	8006bfe <__sflush_r+0x62>
 8006bf0:	6829      	ldr	r1, [r5, #0]
 8006bf2:	291d      	cmp	r1, #29
 8006bf4:	d82b      	bhi.n	8006c4e <__sflush_r+0xb2>
 8006bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8006ca0 <__sflush_r+0x104>)
 8006bf8:	40ca      	lsrs	r2, r1
 8006bfa:	07d6      	lsls	r6, r2, #31
 8006bfc:	d527      	bpl.n	8006c4e <__sflush_r+0xb2>
 8006bfe:	2200      	movs	r2, #0
 8006c00:	6062      	str	r2, [r4, #4]
 8006c02:	04d9      	lsls	r1, r3, #19
 8006c04:	6922      	ldr	r2, [r4, #16]
 8006c06:	6022      	str	r2, [r4, #0]
 8006c08:	d504      	bpl.n	8006c14 <__sflush_r+0x78>
 8006c0a:	1c42      	adds	r2, r0, #1
 8006c0c:	d101      	bne.n	8006c12 <__sflush_r+0x76>
 8006c0e:	682b      	ldr	r3, [r5, #0]
 8006c10:	b903      	cbnz	r3, 8006c14 <__sflush_r+0x78>
 8006c12:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c16:	602f      	str	r7, [r5, #0]
 8006c18:	b1b9      	cbz	r1, 8006c4a <__sflush_r+0xae>
 8006c1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c1e:	4299      	cmp	r1, r3
 8006c20:	d002      	beq.n	8006c28 <__sflush_r+0x8c>
 8006c22:	4628      	mov	r0, r5
 8006c24:	f7ff fbf4 	bl	8006410 <_free_r>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c2c:	e00d      	b.n	8006c4a <__sflush_r+0xae>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	4628      	mov	r0, r5
 8006c32:	47b0      	blx	r6
 8006c34:	4602      	mov	r2, r0
 8006c36:	1c50      	adds	r0, r2, #1
 8006c38:	d1c9      	bne.n	8006bce <__sflush_r+0x32>
 8006c3a:	682b      	ldr	r3, [r5, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0c6      	beq.n	8006bce <__sflush_r+0x32>
 8006c40:	2b1d      	cmp	r3, #29
 8006c42:	d001      	beq.n	8006c48 <__sflush_r+0xac>
 8006c44:	2b16      	cmp	r3, #22
 8006c46:	d11e      	bne.n	8006c86 <__sflush_r+0xea>
 8006c48:	602f      	str	r7, [r5, #0]
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	e022      	b.n	8006c94 <__sflush_r+0xf8>
 8006c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c52:	b21b      	sxth	r3, r3
 8006c54:	e01b      	b.n	8006c8e <__sflush_r+0xf2>
 8006c56:	690f      	ldr	r7, [r1, #16]
 8006c58:	2f00      	cmp	r7, #0
 8006c5a:	d0f6      	beq.n	8006c4a <__sflush_r+0xae>
 8006c5c:	0793      	lsls	r3, r2, #30
 8006c5e:	680e      	ldr	r6, [r1, #0]
 8006c60:	bf08      	it	eq
 8006c62:	694b      	ldreq	r3, [r1, #20]
 8006c64:	600f      	str	r7, [r1, #0]
 8006c66:	bf18      	it	ne
 8006c68:	2300      	movne	r3, #0
 8006c6a:	eba6 0807 	sub.w	r8, r6, r7
 8006c6e:	608b      	str	r3, [r1, #8]
 8006c70:	f1b8 0f00 	cmp.w	r8, #0
 8006c74:	dde9      	ble.n	8006c4a <__sflush_r+0xae>
 8006c76:	6a21      	ldr	r1, [r4, #32]
 8006c78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c7a:	4643      	mov	r3, r8
 8006c7c:	463a      	mov	r2, r7
 8006c7e:	4628      	mov	r0, r5
 8006c80:	47b0      	blx	r6
 8006c82:	2800      	cmp	r0, #0
 8006c84:	dc08      	bgt.n	8006c98 <__sflush_r+0xfc>
 8006c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c98:	4407      	add	r7, r0
 8006c9a:	eba8 0800 	sub.w	r8, r8, r0
 8006c9e:	e7e7      	b.n	8006c70 <__sflush_r+0xd4>
 8006ca0:	20400001 	.word	0x20400001

08006ca4 <_fflush_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	690b      	ldr	r3, [r1, #16]
 8006ca8:	4605      	mov	r5, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	b913      	cbnz	r3, 8006cb4 <_fflush_r+0x10>
 8006cae:	2500      	movs	r5, #0
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	b118      	cbz	r0, 8006cbe <_fflush_r+0x1a>
 8006cb6:	6a03      	ldr	r3, [r0, #32]
 8006cb8:	b90b      	cbnz	r3, 8006cbe <_fflush_r+0x1a>
 8006cba:	f7ff faa1 	bl	8006200 <__sinit>
 8006cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0f3      	beq.n	8006cae <_fflush_r+0xa>
 8006cc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006cc8:	07d0      	lsls	r0, r2, #31
 8006cca:	d404      	bmi.n	8006cd6 <_fflush_r+0x32>
 8006ccc:	0599      	lsls	r1, r3, #22
 8006cce:	d402      	bmi.n	8006cd6 <_fflush_r+0x32>
 8006cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cd2:	f7ff fb9a 	bl	800640a <__retarget_lock_acquire_recursive>
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	4621      	mov	r1, r4
 8006cda:	f7ff ff5f 	bl	8006b9c <__sflush_r>
 8006cde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ce0:	07da      	lsls	r2, r3, #31
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	d4e4      	bmi.n	8006cb0 <_fflush_r+0xc>
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	059b      	lsls	r3, r3, #22
 8006cea:	d4e1      	bmi.n	8006cb0 <_fflush_r+0xc>
 8006cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cee:	f7ff fb8d 	bl	800640c <__retarget_lock_release_recursive>
 8006cf2:	e7dd      	b.n	8006cb0 <_fflush_r+0xc>

08006cf4 <__swbuf_r>:
 8006cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf6:	460e      	mov	r6, r1
 8006cf8:	4614      	mov	r4, r2
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	b118      	cbz	r0, 8006d06 <__swbuf_r+0x12>
 8006cfe:	6a03      	ldr	r3, [r0, #32]
 8006d00:	b90b      	cbnz	r3, 8006d06 <__swbuf_r+0x12>
 8006d02:	f7ff fa7d 	bl	8006200 <__sinit>
 8006d06:	69a3      	ldr	r3, [r4, #24]
 8006d08:	60a3      	str	r3, [r4, #8]
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	071a      	lsls	r2, r3, #28
 8006d0e:	d501      	bpl.n	8006d14 <__swbuf_r+0x20>
 8006d10:	6923      	ldr	r3, [r4, #16]
 8006d12:	b943      	cbnz	r3, 8006d26 <__swbuf_r+0x32>
 8006d14:	4621      	mov	r1, r4
 8006d16:	4628      	mov	r0, r5
 8006d18:	f000 f82a 	bl	8006d70 <__swsetup_r>
 8006d1c:	b118      	cbz	r0, 8006d26 <__swbuf_r+0x32>
 8006d1e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006d22:	4638      	mov	r0, r7
 8006d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	6922      	ldr	r2, [r4, #16]
 8006d2a:	1a98      	subs	r0, r3, r2
 8006d2c:	6963      	ldr	r3, [r4, #20]
 8006d2e:	b2f6      	uxtb	r6, r6
 8006d30:	4283      	cmp	r3, r0
 8006d32:	4637      	mov	r7, r6
 8006d34:	dc05      	bgt.n	8006d42 <__swbuf_r+0x4e>
 8006d36:	4621      	mov	r1, r4
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f7ff ffb3 	bl	8006ca4 <_fflush_r>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d1ed      	bne.n	8006d1e <__swbuf_r+0x2a>
 8006d42:	68a3      	ldr	r3, [r4, #8]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	60a3      	str	r3, [r4, #8]
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	6022      	str	r2, [r4, #0]
 8006d4e:	701e      	strb	r6, [r3, #0]
 8006d50:	6962      	ldr	r2, [r4, #20]
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d004      	beq.n	8006d62 <__swbuf_r+0x6e>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	07db      	lsls	r3, r3, #31
 8006d5c:	d5e1      	bpl.n	8006d22 <__swbuf_r+0x2e>
 8006d5e:	2e0a      	cmp	r6, #10
 8006d60:	d1df      	bne.n	8006d22 <__swbuf_r+0x2e>
 8006d62:	4621      	mov	r1, r4
 8006d64:	4628      	mov	r0, r5
 8006d66:	f7ff ff9d 	bl	8006ca4 <_fflush_r>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d0d9      	beq.n	8006d22 <__swbuf_r+0x2e>
 8006d6e:	e7d6      	b.n	8006d1e <__swbuf_r+0x2a>

08006d70 <__swsetup_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4b29      	ldr	r3, [pc, #164]	@ (8006e18 <__swsetup_r+0xa8>)
 8006d74:	4605      	mov	r5, r0
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	460c      	mov	r4, r1
 8006d7a:	b118      	cbz	r0, 8006d84 <__swsetup_r+0x14>
 8006d7c:	6a03      	ldr	r3, [r0, #32]
 8006d7e:	b90b      	cbnz	r3, 8006d84 <__swsetup_r+0x14>
 8006d80:	f7ff fa3e 	bl	8006200 <__sinit>
 8006d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d88:	0719      	lsls	r1, r3, #28
 8006d8a:	d422      	bmi.n	8006dd2 <__swsetup_r+0x62>
 8006d8c:	06da      	lsls	r2, r3, #27
 8006d8e:	d407      	bmi.n	8006da0 <__swsetup_r+0x30>
 8006d90:	2209      	movs	r2, #9
 8006d92:	602a      	str	r2, [r5, #0]
 8006d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d9e:	e033      	b.n	8006e08 <__swsetup_r+0x98>
 8006da0:	0758      	lsls	r0, r3, #29
 8006da2:	d512      	bpl.n	8006dca <__swsetup_r+0x5a>
 8006da4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006da6:	b141      	cbz	r1, 8006dba <__swsetup_r+0x4a>
 8006da8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dac:	4299      	cmp	r1, r3
 8006dae:	d002      	beq.n	8006db6 <__swsetup_r+0x46>
 8006db0:	4628      	mov	r0, r5
 8006db2:	f7ff fb2d 	bl	8006410 <_free_r>
 8006db6:	2300      	movs	r3, #0
 8006db8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	6063      	str	r3, [r4, #4]
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f043 0308 	orr.w	r3, r3, #8
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	b94b      	cbnz	r3, 8006dea <__swsetup_r+0x7a>
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006de0:	d003      	beq.n	8006dea <__swsetup_r+0x7a>
 8006de2:	4621      	mov	r1, r4
 8006de4:	4628      	mov	r0, r5
 8006de6:	f000 f84f 	bl	8006e88 <__smakebuf_r>
 8006dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dee:	f013 0201 	ands.w	r2, r3, #1
 8006df2:	d00a      	beq.n	8006e0a <__swsetup_r+0x9a>
 8006df4:	2200      	movs	r2, #0
 8006df6:	60a2      	str	r2, [r4, #8]
 8006df8:	6962      	ldr	r2, [r4, #20]
 8006dfa:	4252      	negs	r2, r2
 8006dfc:	61a2      	str	r2, [r4, #24]
 8006dfe:	6922      	ldr	r2, [r4, #16]
 8006e00:	b942      	cbnz	r2, 8006e14 <__swsetup_r+0xa4>
 8006e02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e06:	d1c5      	bne.n	8006d94 <__swsetup_r+0x24>
 8006e08:	bd38      	pop	{r3, r4, r5, pc}
 8006e0a:	0799      	lsls	r1, r3, #30
 8006e0c:	bf58      	it	pl
 8006e0e:	6962      	ldrpl	r2, [r4, #20]
 8006e10:	60a2      	str	r2, [r4, #8]
 8006e12:	e7f4      	b.n	8006dfe <__swsetup_r+0x8e>
 8006e14:	2000      	movs	r0, #0
 8006e16:	e7f7      	b.n	8006e08 <__swsetup_r+0x98>
 8006e18:	20000018 	.word	0x20000018

08006e1c <_sbrk_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d06      	ldr	r5, [pc, #24]	@ (8006e38 <_sbrk_r+0x1c>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	f7fa f90c 	bl	8001044 <_sbrk>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_sbrk_r+0x1a>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_sbrk_r+0x1a>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	200004a4 	.word	0x200004a4

08006e3c <__swhatbuf_r>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	460c      	mov	r4, r1
 8006e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e44:	2900      	cmp	r1, #0
 8006e46:	b096      	sub	sp, #88	@ 0x58
 8006e48:	4615      	mov	r5, r2
 8006e4a:	461e      	mov	r6, r3
 8006e4c:	da0d      	bge.n	8006e6a <__swhatbuf_r+0x2e>
 8006e4e:	89a3      	ldrh	r3, [r4, #12]
 8006e50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e54:	f04f 0100 	mov.w	r1, #0
 8006e58:	bf14      	ite	ne
 8006e5a:	2340      	movne	r3, #64	@ 0x40
 8006e5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e60:	2000      	movs	r0, #0
 8006e62:	6031      	str	r1, [r6, #0]
 8006e64:	602b      	str	r3, [r5, #0]
 8006e66:	b016      	add	sp, #88	@ 0x58
 8006e68:	bd70      	pop	{r4, r5, r6, pc}
 8006e6a:	466a      	mov	r2, sp
 8006e6c:	f000 f848 	bl	8006f00 <_fstat_r>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	dbec      	blt.n	8006e4e <__swhatbuf_r+0x12>
 8006e74:	9901      	ldr	r1, [sp, #4]
 8006e76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e7e:	4259      	negs	r1, r3
 8006e80:	4159      	adcs	r1, r3
 8006e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e86:	e7eb      	b.n	8006e60 <__swhatbuf_r+0x24>

08006e88 <__smakebuf_r>:
 8006e88:	898b      	ldrh	r3, [r1, #12]
 8006e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e8c:	079d      	lsls	r5, r3, #30
 8006e8e:	4606      	mov	r6, r0
 8006e90:	460c      	mov	r4, r1
 8006e92:	d507      	bpl.n	8006ea4 <__smakebuf_r+0x1c>
 8006e94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	6123      	str	r3, [r4, #16]
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	6163      	str	r3, [r4, #20]
 8006ea0:	b003      	add	sp, #12
 8006ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea4:	ab01      	add	r3, sp, #4
 8006ea6:	466a      	mov	r2, sp
 8006ea8:	f7ff ffc8 	bl	8006e3c <__swhatbuf_r>
 8006eac:	9f00      	ldr	r7, [sp, #0]
 8006eae:	4605      	mov	r5, r0
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7ff fb18 	bl	80064e8 <_malloc_r>
 8006eb8:	b948      	cbnz	r0, 8006ece <__smakebuf_r+0x46>
 8006eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ebe:	059a      	lsls	r2, r3, #22
 8006ec0:	d4ee      	bmi.n	8006ea0 <__smakebuf_r+0x18>
 8006ec2:	f023 0303 	bic.w	r3, r3, #3
 8006ec6:	f043 0302 	orr.w	r3, r3, #2
 8006eca:	81a3      	strh	r3, [r4, #12]
 8006ecc:	e7e2      	b.n	8006e94 <__smakebuf_r+0xc>
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	6020      	str	r0, [r4, #0]
 8006ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ed6:	81a3      	strh	r3, [r4, #12]
 8006ed8:	9b01      	ldr	r3, [sp, #4]
 8006eda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ede:	b15b      	cbz	r3, 8006ef8 <__smakebuf_r+0x70>
 8006ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f000 f81d 	bl	8006f24 <_isatty_r>
 8006eea:	b128      	cbz	r0, 8006ef8 <__smakebuf_r+0x70>
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	f023 0303 	bic.w	r3, r3, #3
 8006ef2:	f043 0301 	orr.w	r3, r3, #1
 8006ef6:	81a3      	strh	r3, [r4, #12]
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	431d      	orrs	r5, r3
 8006efc:	81a5      	strh	r5, [r4, #12]
 8006efe:	e7cf      	b.n	8006ea0 <__smakebuf_r+0x18>

08006f00 <_fstat_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4d07      	ldr	r5, [pc, #28]	@ (8006f20 <_fstat_r+0x20>)
 8006f04:	2300      	movs	r3, #0
 8006f06:	4604      	mov	r4, r0
 8006f08:	4608      	mov	r0, r1
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	602b      	str	r3, [r5, #0]
 8006f0e:	f7fa f870 	bl	8000ff2 <_fstat>
 8006f12:	1c43      	adds	r3, r0, #1
 8006f14:	d102      	bne.n	8006f1c <_fstat_r+0x1c>
 8006f16:	682b      	ldr	r3, [r5, #0]
 8006f18:	b103      	cbz	r3, 8006f1c <_fstat_r+0x1c>
 8006f1a:	6023      	str	r3, [r4, #0]
 8006f1c:	bd38      	pop	{r3, r4, r5, pc}
 8006f1e:	bf00      	nop
 8006f20:	200004a4 	.word	0x200004a4

08006f24 <_isatty_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4d06      	ldr	r5, [pc, #24]	@ (8006f40 <_isatty_r+0x1c>)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	602b      	str	r3, [r5, #0]
 8006f30:	f7fa f86f 	bl	8001012 <_isatty>
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	d102      	bne.n	8006f3e <_isatty_r+0x1a>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	b103      	cbz	r3, 8006f3e <_isatty_r+0x1a>
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	200004a4 	.word	0x200004a4

08006f44 <_init>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	bf00      	nop
 8006f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4a:	bc08      	pop	{r3}
 8006f4c:	469e      	mov	lr, r3
 8006f4e:	4770      	bx	lr

08006f50 <_fini>:
 8006f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f52:	bf00      	nop
 8006f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f56:	bc08      	pop	{r3}
 8006f58:	469e      	mov	lr, r3
 8006f5a:	4770      	bx	lr
